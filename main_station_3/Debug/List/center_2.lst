
AVRASM ver. 2.1.30  D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm Wed Sep 13 19:17:20 2017

D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1099): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R5
                 	.DEF _rx_rd_index0=R4
                 	.DEF _rx_counter0=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _time_flow=R10
                 	.DEF _time_flow_msb=R11
                 	.DEF _time_s=R12
                 	.DEF _time_s_msb=R13
                 	.DEF _flag=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02ba 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0587 	JMP  _ext_int6_isr
000010 940c 0592 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 035f 	JMP  _timer2_ovf
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0347 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 02fd 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0323 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 5f00
00004c 0000
00004d 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 _tbl10_G106:
00013d 2710
00013e 03e8
00013f 0064
000140 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000141 0001      	.DB  0x1,0x0
                 _tbl16_G106:
000142 1000
000143 0100
000144 0010
000145 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000146 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000147 0000
000148 0000      	.DB  0x0,0x0,0x0,0x0
000149 0000
00014a 0000      	.DB  0x0,0x0,0x0,0x0
00014b 0000      	.DB  0x0,0x0
                 
                 _0x3:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1226): warning: .cseg .db misalignment - padding zero byte
00014c 0001      	.DB  0x1
                 _0x2D:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1228): warning: .cseg .db misalignment - padding zero byte
00014d 00a1      	.DB  0xA1
                 _0x2E:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1230): warning: .cseg .db misalignment - padding zero byte
00014e 00a2      	.DB  0xA2
                 _0x2F:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1232): warning: .cseg .db misalignment - padding zero byte
00014f 00a3      	.DB  0xA3
                 _0x30:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1234): warning: .cseg .db misalignment - padding zero byte
000150 00a4      	.DB  0xA4
                 _0xD1:
000151 0506
000152 0507
000153 0518
000154 0529      	.DB  LOW(_0xD0),HIGH(_0xD0),LOW(_0xD0+1),HIGH(_0xD0+1),LOW(_0xD0+18),HIGH(_0xD0+18),LOW(_0xD0+35),HIGH(_0xD0+35)
000155 053a      	.DB  LOW(_0xD0+52),HIGH(_0xD0+52)
                 _0xE0:
000156 4547
000157 2054
000158 752f
000159 6470      	.DB  0x47,0x45,0x54,0x20,0x2F,0x75,0x70,0x64
00015a 7461
00015b 3f65
00015c 656b
00015d 3d79      	.DB  0x61,0x74,0x65,0x3F,0x6B,0x65,0x79,0x3D
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1241): warning: .cseg .db misalignment - padding zero byte
00015e 0000      	.DB  0x0
                 _0x0:
00015f 5245
000160 4f52
000161 0052
000162 5237      	.DB  0x45,0x52,0x52,0x4F,0x52,0x0,0x37,0x52
000163 4e36
000164 5953
000165 4846
000166 4642      	.DB  0x36,0x4E,0x53,0x59,0x46,0x48,0x42,0x46
000167 5552
000168 5241
000169 4b36
00016a 3500      	.DB  0x52,0x55,0x41,0x52,0x36,0x4B,0x0,0x35
00016b 3049
00016c 3030
00016d 5257
00016e 584f      	.DB  0x49,0x30,0x30,0x30,0x57,0x52,0x4F,0x58
00016f 464f
000170 3053
000171 3856
000172 0035      	.DB  0x4F,0x46,0x53,0x30,0x56,0x38,0x35,0x0
000173 4e36
000174 4648
000175 4858
000176 3730      	.DB  0x36,0x4E,0x48,0x46,0x58,0x48,0x30,0x37
000177 5336
000178 3043
000179 4432
00017a 305a      	.DB  0x36,0x53,0x43,0x30,0x32,0x44,0x5A,0x30
00017b 5700
00017c 4955
00017d 3854
00017e 584c      	.DB  0x0,0x57,0x55,0x49,0x54,0x38,0x4C,0x58
00017f 4e37
000180 3239
000181 3858
000182 344a      	.DB  0x37,0x4E,0x39,0x32,0x58,0x38,0x4A,0x34
000183 0057
000184 6f4e
000185 6564
000186 203a      	.DB  0x57,0x0,0x4E,0x6F,0x64,0x65,0x3A,0x20
000187 5400
000188 6d65
000189 3a70
00018a 0020      	.DB  0x0,0x54,0x65,0x6D,0x70,0x3A,0x20,0x0
00018b 7548
00018c 696d
00018d 3a64
00018e 0020      	.DB  0x48,0x75,0x6D,0x69,0x64,0x3A,0x20,0x0
00018f 6157
000190 6574
000191 3a72
000192 0020      	.DB  0x57,0x61,0x74,0x65,0x72,0x3A,0x20,0x0
000193 4321
000194 6300
000195 006d
000196 3132      	.DB  0x21,0x43,0x0,0x63,0x6D,0x0,0x32,0x31
000197 3700
000198 0035
000199 3534
00019a 4200      	.DB  0x0,0x37,0x35,0x0,0x34,0x35,0x0,0x42
00019b 6f6f
00019c 6974
00019d 676e
00019e 4100      	.DB  0x6F,0x6F,0x74,0x69,0x6E,0x67,0x0,0x41
00019f 0d54
0001a0 000a
0001a1 4b4f
0001a2 4100      	.DB  0x54,0xD,0xA,0x0,0x4F,0x4B,0x0,0x41
0001a3 2b54
0001a4 4943
0001a5 5350
0001a6 4154      	.DB  0x54,0x2B,0x43,0x49,0x50,0x53,0x54,0x41
0001a7 5554
0001a8 0d53
0001a9 000a
0001aa 5453      	.DB  0x54,0x55,0x53,0xD,0xA,0x0,0x53,0x54
0001ab 5441
0001ac 5355
0001ad 323a
0001ae 5700      	.DB  0x41,0x54,0x55,0x53,0x3A,0x32,0x0,0x57
0001af 6669
0001b0 2069
0001b1 6f43
0001b2 6e6e      	.DB  0x69,0x66,0x69,0x20,0x43,0x6F,0x6E,0x6E
0001b3 6365
0001b4 6574
0001b5 0d64
0001b6 000a      	.DB  0x65,0x63,0x74,0x65,0x64,0xD,0xA,0x0
0001b7 5441
0001b8 432b
0001b9 4d57
0001ba 444f      	.DB  0x41,0x54,0x2B,0x43,0x57,0x4D,0x4F,0x44
0001bb 3d45
0001bc 0d31
0001bd 000a
0001be 5441      	.DB  0x45,0x3D,0x31,0xD,0xA,0x0,0x41,0x54
0001bf 432b
0001c0 4a57
0001c1 5041
0001c2 223d      	.DB  0x2B,0x43,0x57,0x4A,0x41,0x50,0x3D,0x22
0001c3 6854
0001c4 7961
0001c5 545f
0001c6 6168      	.DB  0x54,0x68,0x61,0x79,0x5F,0x54,0x68,0x61
0001c7 5f6f
0001c8 6564
0001c9 5f6f
0001ca 6967      	.DB  0x6F,0x5F,0x64,0x65,0x6F,0x5F,0x67,0x69
0001cb 6961
0001cc 2c22
0001cd 6322
0001ce 6968      	.DB  0x61,0x69,0x22,0x2C,0x22,0x63,0x68,0x69
0001cf 686e
0001d0 6178
0001d1 2263
0001d2 0a0d      	.DB  0x6E,0x68,0x78,0x61,0x63,0x22,0xD,0xA
0001d3 4100
0001d4 2b54
0001d5 4943
0001d6 4d50      	.DB  0x0,0x41,0x54,0x2B,0x43,0x49,0x50,0x4D
0001d7 5855
0001d8 313d
0001d9 4100
0001da 2b54      	.DB  0x55,0x58,0x3D,0x31,0x0,0x41,0x54,0x2B
0001db 4943
0001dc 5350
0001dd 4154
0001de 5452      	.DB  0x43,0x49,0x50,0x53,0x54,0x41,0x52,0x54
0001df 303d
0001e0 222c
0001e1 4354
0001e2 2250      	.DB  0x3D,0x30,0x2C,0x22,0x54,0x43,0x50,0x22
0001e3 222c
0001e4 7061
0001e5 2e69
0001e6 6874      	.DB  0x2C,0x22,0x61,0x70,0x69,0x2E,0x74,0x68
0001e7 6e69
0001e8 7367
0001e9 6570
0001ea 6b61      	.DB  0x69,0x6E,0x67,0x73,0x70,0x65,0x61,0x6B
0001eb 632e
0001ec 6d6f
0001ed 2c22
0001ee 3038      	.DB  0x2E,0x63,0x6F,0x6D,0x22,0x2C,0x38,0x30
0001ef 2600
0001f0 6966
0001f1 6c65
0001f2 3164      	.DB  0x0,0x26,0x66,0x69,0x65,0x6C,0x64,0x31
0001f3 003d
0001f4 6626
0001f5 6569
0001f6 646c      	.DB  0x3D,0x0,0x26,0x66,0x69,0x65,0x6C,0x64
0001f7 3d32
0001f8 2600
0001f9 6966
0001fa 6c65      	.DB  0x32,0x3D,0x0,0x26,0x66,0x69,0x65,0x6C
0001fb 3364
0001fc 003d
0001fd 5441
0001fe 432b      	.DB  0x64,0x33,0x3D,0x0,0x41,0x54,0x2B,0x43
0001ff 5049
000200 4553
000201 444e
000202 303d      	.DB  0x49,0x50,0x53,0x45,0x4E,0x44,0x3D,0x30
000203 002c
000204 203e
000205 4100
000206 2b54      	.DB  0x2C,0x0,0x3E,0x20,0x0,0x41,0x54,0x2B
000207 4943
000208 4350
000209 4f4c
00020a 4553      	.DB  0x43,0x49,0x50,0x43,0x4C,0x4F,0x53,0x45
00020b 303d
00020c 0a0d
00020d 7200
00020e 6961      	.DB  0x3D,0x30,0xD,0xA,0x0,0x72,0x61,0x69
00020f 6e6e
000210 6e69
000211 0067
000212 7473      	.DB  0x6E,0x6E,0x69,0x6E,0x67,0x0,0x73,0x74
000213 7261
000214 0074
000215 6425
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1288): warning: .cseg .db misalignment - padding zero byte
000216 0000      	.DB  0x61,0x72,0x74,0x0,0x25,0x64,0x0
                 _0x2040060:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1290): warning: .cseg .db misalignment - padding zero byte
000217 0001      	.DB  0x1
                 _0x2040000:
000218 4e2d
000219 4e41
00021a 4900
00021b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1293): warning: .cseg .db misalignment - padding zero byte
00021c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00021d 0001      	.DW  0x01
00021e 0002      	.DW  0x02
00021f 028c      	.DW  __REG_BIT_VARS*2
                 
000220 000a      	.DW  0x0A
000221 0004      	.DW  0x04
000222 028e      	.DW  __REG_VARS*2
                 
000223 0001      	.DW  0x01
000224 07ee      	.DW  _count
000225 0298      	.DW  _0x3*2
                 
000226 0006      	.DW  0x06
000227 0500      	.DW  _0x2C
000228 02be      	.DW  _0x0*2
                 
000229 0001      	.DW  0x01
00022a 0843      	.DW  _Code_tay_cam1
00022b 029a      	.DW  _0x2D*2
                 
00022c 0001      	.DW  0x01
00022d 0844      	.DW  _Code_tay_cam2
00022e 029c      	.DW  _0x2E*2
                 
00022f 0001      	.DW  0x01
000230 0845      	.DW  _Code_tay_cam3
000231 029e      	.DW  _0x2F*2
                 
000232 0001      	.DW  0x01
000233 0846      	.DW  _Code_tay_cam4
000234 02a0      	.DW  _0x30*2
                 
000235 0001      	.DW  0x01
000236 0506      	.DW  _0xD0
000237 02c3      	.DW  _0x0*2+5
                 
000238 0011      	.DW  0x11
000239 0507      	.DW  _0xD0+1
00023a 02c4      	.DW  _0x0*2+6
                 
00023b 0011      	.DW  0x11
00023c 0518      	.DW  _0xD0+18
00023d 02d5      	.DW  _0x0*2+23
                 
00023e 0011      	.DW  0x11
00023f 0529      	.DW  _0xD0+35
000240 02e6      	.DW  _0x0*2+40
                 
000241 0011      	.DW  0x11
000242 053a      	.DW  _0xD0+52
000243 02f7      	.DW  _0x0*2+57
                 
000244 000a      	.DW  0x0A
000245 086c      	.DW  _key
000246 02a2      	.DW  _0xD1*2
                 
000247 0007      	.DW  0x07
000248 054b      	.DW  _0xD2
000249 0308      	.DW  _0x0*2+74
                 
00024a 0007      	.DW  0x07
00024b 0552      	.DW  _0xD2+7
00024c 030f      	.DW  _0x0*2+81
                 
00024d 0008      	.DW  0x08
00024e 0559      	.DW  _0xD2+14
00024f 0316      	.DW  _0x0*2+88
                 
000250 0008      	.DW  0x08
000251 0561      	.DW  _0xD2+22
000252 031e      	.DW  _0x0*2+96
                 
000253 0003      	.DW  0x03
000254 0569      	.DW  _0xD2+30
000255 0326      	.DW  _0x0*2+104
                 
000256 0003      	.DW  0x03
000257 056c      	.DW  _0xD2+33
000258 0329      	.DW  _0x0*2+107
                 
000259 0003      	.DW  0x03
00025a 056f      	.DW  _0xD3
00025b 032c      	.DW  _0x0*2+110
                 
00025c 0003      	.DW  0x03
00025d 0572      	.DW  _0xD3+3
00025e 032f      	.DW  _0x0*2+113
                 
00025f 0003      	.DW  0x03
000260 0575      	.DW  _0xD3+6
000261 0332      	.DW  _0x0*2+116
                 
000262 0008      	.DW  0x08
000263 0578      	.DW  _0xD4
000264 0335      	.DW  _0x0*2+119
                 
000265 0005      	.DW  0x05
000266 0580      	.DW  _0xD4+8
000267 033d      	.DW  _0x0*2+127
                 
000268 0003      	.DW  0x03
000269 0585      	.DW  _0xD4+13
00026a 0342      	.DW  _0x0*2+132
                 
00026b 000f      	.DW  0x0F
00026c 0588      	.DW  _0xD4+16
00026d 0345      	.DW  _0x0*2+135
                 
00026e 0003      	.DW  0x03
00026f 0597      	.DW  _0xD4+31
000270 0342      	.DW  _0x0*2+132
                 
000271 0009      	.DW  0x09
000272 059a      	.DW  _0xD4+34
000273 0354      	.DW  _0x0*2+150
                 
000274 0011      	.DW  0x11
000275 05a3      	.DW  _0xD4+43
000276 035d      	.DW  _0x0*2+159
                 
000277 000e      	.DW  0x0E
000278 05b4      	.DW  _0xD4+60
000279 036e      	.DW  _0x0*2+176
                 
00027a 0003      	.DW  0x03
00027b 05c2      	.DW  _0xD4+74
00027c 0342      	.DW  _0x0*2+132
                 
00027d 002b      	.DW  0x2B
00027e 05c5      	.DW  _0xD4+77
00027f 037c      	.DW  _0x0*2+190
                 
000280 0003      	.DW  0x03
000281 05f0      	.DW  _0xD4+120
000282 0342      	.DW  _0x0*2+132
                 
000283 000c      	.DW  0x0C
000284 05f3      	.DW  _0xE4
000285 03a7      	.DW  _0x0*2+233
                 
000286 0003      	.DW  0x03
000287 05ff      	.DW  _0xE4+12
000288 033f      	.DW  _0x0*2+129
                 
000289 0003      	.DW  0x03
00028a 0602      	.DW  _0xE4+15
00028b 0342      	.DW  _0x0*2+132
                 
00028c 002c      	.DW  0x2C
00028d 0605      	.DW  _0xE4+18
00028e 03b3      	.DW  _0x0*2+245
                 
00028f 0003      	.DW  0x03
000290 0631      	.DW  _0xE4+62
000291 033f      	.DW  _0x0*2+129
                 
000292 0003      	.DW  0x03
000293 0634      	.DW  _0xE4+65
000294 0342      	.DW  _0x0*2+132
                 
000295 0009      	.DW  0x09
000296 0637      	.DW  _0xE4+68
000297 03df      	.DW  _0x0*2+289
                 
000298 0009      	.DW  0x09
000299 0640      	.DW  _0xE4+77
00029a 03e8      	.DW  _0x0*2+298
                 
00029b 0009      	.DW  0x09
00029c 0649      	.DW  _0xE4+86
00029d 03f1      	.DW  _0x0*2+307
                 
00029e 0003      	.DW  0x03
00029f 0652      	.DW  _0xE4+95
0002a0 033f      	.DW  _0x0*2+129
                 
0002a1 000e      	.DW  0x0E
0002a2 0655      	.DW  _0xE4+98
0002a3 03fa      	.DW  _0x0*2+316
                 
0002a4 0003      	.DW  0x03
0002a5 0663      	.DW  _0xE4+112
0002a6 033f      	.DW  _0x0*2+129
                 
0002a7 0003      	.DW  0x03
0002a8 0666      	.DW  _0xE4+115
0002a9 0408      	.DW  _0x0*2+330
                 
0002aa 0010      	.DW  0x10
0002ab 0669      	.DW  _0xE4+118
0002ac 040b      	.DW  _0x0*2+333
                 
0002ad 0003      	.DW  0x03
0002ae 0679      	.DW  _0xE4+134
0002af 0342      	.DW  _0x0*2+132
                 
0002b0 0009      	.DW  0x09
0002b1 067c      	.DW  _0xE9
0002b2 041b      	.DW  _0x0*2+349
                 
0002b3 0006      	.DW  0x06
0002b4 0685      	.DW  _0xEC
0002b5 0424      	.DW  _0x0*2+358
                 
0002b6 0001      	.DW  0x01
0002b7 0876      	.DW  __seed_G102
0002b8 042e      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
0002b9 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0002ba 94f8      	CLI
0002bb 27ee      	CLR  R30
0002bc bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002bd e0f1      	LDI  R31,1
0002be bff5      	OUT  MCUCR,R31
0002bf bfe5      	OUT  MCUCR,R30
0002c0 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0002c2 e08d      	LDI  R24,(14-2)+1
0002c3 e0a2      	LDI  R26,2
0002c4 27bb      	CLR  R27
                 __CLEAR_REG:
0002c5 93ed      	ST   X+,R30
0002c6 958a      	DEC  R24
0002c7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002c8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002c9 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002ca e0a0      	LDI  R26,LOW(__SRAM_START)
0002cb e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0002cc 93ed      	ST   X+,R30
0002cd 9701      	SBIW R24,1
0002ce f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002cf e3ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002d0 e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002d1 9185      	LPM  R24,Z+
0002d2 9195      	LPM  R25,Z+
0002d3 9700      	SBIW R24,0
0002d4 f061      	BREQ __GLOBAL_INI_END
0002d5 91a5      	LPM  R26,Z+
0002d6 91b5      	LPM  R27,Z+
0002d7 9005      	LPM  R0,Z+
0002d8 9015      	LPM  R1,Z+
0002d9 01bf      	MOVW R22,R30
0002da 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002db 9005      	LPM  R0,Z+
0002dc 920d      	ST   X+,R0
0002dd 9701      	SBIW R24,1
0002de f7e1      	BRNE __GLOBAL_INI_LOOP
0002df 01fb      	MOVW R30,R22
0002e0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0002e1 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002e2 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002e3 bfed      	OUT  SPL,R30
0002e4 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002e5 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002e6 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002e7 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002e8 940c 06a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;// Graphic Display functions
                 ;#include <glcd.h>
                 ;// Font used for displaying text
                 ;// on the graphic display
                 ;#include <font5x7.h>
                 ;
                 ;// Declare your global variables here
                 ;#define menu PINC.3
                 ;#define back PINC.2
                 ;#define enter PINC.0
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;char buff[260];
                 ;int i = 0, time_flow = 0, time_s = 0;
                 ;bool flag = false;
                 ;int dem;
                 ;int count = 1;
                 
                 	.DSEG
                 ;//unsigned char start_h, start_m, start_s, end_h, end_m, end_s;
                 ;int rain_state[5];
                 ;long rain_count;
                 ;bool start_rain = false;
                 ;
                 ;void del_string(unsigned char *s) {
                 ; 0000 0038 void del_string(unsigned char *s) {
                 
                 	.CSEG
                 _del_string:
                 ; .FSTART _del_string
                 ; 0000 0039     while (*s) {
0002ea 93ba      	ST   -Y,R27
0002eb 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x4:
0002ec 81a8      	LD   R26,Y
0002ed 81b9      	LDD  R27,Y+1
0002ee 91ec      	LD   R30,X
0002ef 30e0      	CPI  R30,0
0002f0 f041      	BREQ _0x6
                 ; 0000 003A         *s = '\0';
0002f1 e0e0      	LDI  R30,LOW(0)
0002f2 93ec      	ST   X,R30
                 ; 0000 003B         s++;
0002f3 81e8      	LD   R30,Y
0002f4 81f9      	LDD  R31,Y+1
0002f5 9631      	ADIW R30,1
0002f6 83e8      	ST   Y,R30
0002f7 83f9      	STD  Y+1,R31
                 ; 0000 003C     }
0002f8 cff3      	RJMP _0x4
                 _0x6:
                 ; 0000 003D     i = 0;
0002f9 2488      	CLR  R8
0002fa 2499      	CLR  R9
                 ; 0000 003E }
0002fb 9622      	ADIW R28,2
0002fc 9508      	RET
                 ; .FEND
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0000 0044 interrupt [19] void usart0_rx_isr(void) {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0002fd 93ea      	ST   -Y,R30
0002fe 93fa      	ST   -Y,R31
0002ff b7ef      	IN   R30,SREG
000300 93ea      	ST   -Y,R30
                 ; 0000 0045     char status,data;
                 ; 0000 0046     status=UCSR0A;
000301 931a      	ST   -Y,R17
000302 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000303 b11b      	IN   R17,11
                 ; 0000 0047     data=UDR0;
000304 b10c      	IN   R16,12
                 ; 0000 0048     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
000305 2fe1      	MOV  R30,R17
000306 71ec      	ANDI R30,LOW(0x1C)
000307 f489      	BRNE _0x7
                 ; 0000 0049         rx_buffer0[rx_wr_index0++]=data;
000308 2de5      	MOV  R30,R5
000309 9453      	INC  R5
00030a e0f0      	LDI  R31,0
00030b 55e8      	SUBI R30,LOW(-_rx_buffer0)
00030c 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
00030d 8300      	ST   Z,R16
                 ; 0000 004A #if RX_BUFFER_SIZE0 == 256
                 ; 0000 004B         // special case for receiver buffer size=256
                 ; 0000 004C         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 004D #else
                 ; 0000 004E         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
00030e e4e0      	LDI  R30,LOW(64)
00030f 15e5      	CP   R30,R5
000310 f409      	BRNE _0x8
000311 2455      	CLR  R5
                 ; 0000 004F         if (++rx_counter0 == RX_BUFFER_SIZE0) {
                 _0x8:
000312 9473      	INC  R7
000313 e4e0      	LDI  R30,LOW(64)
000314 15e7      	CP   R30,R7
000315 f419      	BRNE _0x9
                 ; 0000 0050             rx_counter0=0;
000316 2477      	CLR  R7
                 ; 0000 0051             rx_buffer_overflow0=1;
000317 9468      	SET
000318 f820      	BLD  R2,0
                 ; 0000 0052         }
                 ; 0000 0053 #endif
                 ; 0000 0054     }
                 _0x9:
                 ; 0000 0055     buff[i] = data;
                 _0x7:
000319 01f4      	MOVW R30,R8
00031a 51e8      	SUBI R30,LOW(-_buff)
00031b 4ff9      	SBCI R31,HIGH(-_buff)
00031c 8300      	ST   Z,R16
                 ; 0000 0056     i++;
00031d 01f4      	MOVW R30,R8
00031e 9631      	ADIW R30,1
00031f 014f      	MOVW R8,R30
                 ; 0000 0057 }
000320 9109      	LD   R16,Y+
000321 9119      	LD   R17,Y+
000322 c037      	RJMP _0x10C
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0000 005D char getchar(void) {
                 ; 0000 005E     char data;
                 ; 0000 005F     while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0060     data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0061 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0062     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0063 #endif
                 ; 0000 0064 #asm("cli")
                 ; 0000 0065     --rx_counter0;
                 ; 0000 0066 #asm("sei")
                 ; 0000 0067     return data;
                 ; 0000 0068 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void) {
                 ; 0000 007D interrupt [21] void usart0_tx_isr(void) {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000323 93aa      	ST   -Y,R26
000324 93ea      	ST   -Y,R30
000325 93fa      	ST   -Y,R31
000326 b7ef      	IN   R30,SREG
000327 93ea      	ST   -Y,R30
                 ; 0000 007E     if (tx_counter0) {
000328 91e0 0841 	LDS  R30,_tx_counter0
00032a 30e0      	CPI  R30,0
00032b f0a9      	BREQ _0xE
                 ; 0000 007F         --tx_counter0;
00032c 50e1      	SUBI R30,LOW(1)
00032d 93e0 0841 	STS  _tx_counter0,R30
                 ; 0000 0080         UDR0=tx_buffer0[tx_rd_index0++];
00032f 91e0 0840 	LDS  R30,_tx_rd_index0
000331 5fef      	SUBI R30,-LOW(1)
000332 93e0 0840 	STS  _tx_rd_index0,R30
000334 50e1      	SUBI R30,LOW(1)
000335 e0f0      	LDI  R31,0
000336 50e1      	SUBI R30,LOW(-_tx_buffer0)
000337 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000338 81e0      	LD   R30,Z
000339 b9ec      	OUT  0xC,R30
                 ; 0000 0081 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0082         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00033a 91a0 0840 	LDS  R26,_tx_rd_index0
00033c 34a0      	CPI  R26,LOW(0x40)
00033d f419      	BRNE _0xF
00033e e0e0      	LDI  R30,LOW(0)
00033f 93e0 0840 	STS  _tx_rd_index0,R30
                 ; 0000 0083 #endif
                 ; 0000 0084     }
                 _0xF:
                 ; 0000 0085 }
                 _0xE:
000341 91e9      	LD   R30,Y+
000342 bfef      	OUT  SREG,R30
000343 91f9      	LD   R31,Y+
000344 91e9      	LD   R30,Y+
000345 91a9      	LD   R26,Y+
000346 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0087 interrupt [17] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000347 93ea      	ST   -Y,R30
000348 93fa      	ST   -Y,R31
000349 b7ef      	IN   R30,SREG
00034a 93ea      	ST   -Y,R30
                 ; 0000 0088     //0.02 ms => 50k = 1s.
                 ; 0000 0089     TCNT0=0x9C;
00034b e9ec      	LDI  R30,LOW(156)
00034c bfe2      	OUT  0x32,R30
                 ; 0000 008A     // Place your code here
                 ; 0000 008B     time_flow++;
00034d 01f5      	MOVW R30,R10
00034e 9631      	ADIW R30,1
00034f 015f      	MOVW R10,R30
                 ; 0000 008C 
                 ; 0000 008D     if (time_flow == 10000) {
000350 e1e0      	LDI  R30,LOW(10000)
000351 e2f7      	LDI  R31,HIGH(10000)
000352 15ea      	CP   R30,R10
000353 05fb      	CPC  R31,R11
000354 f429      	BRNE _0x10
                 ; 0000 008E         time_s++;
000355 01f6      	MOVW R30,R12
000356 9631      	ADIW R30,1
000357 016f      	MOVW R12,R30
                 ; 0000 008F         time_flow = 0;
000358 24aa      	CLR  R10
000359 24bb      	CLR  R11
                 ; 0000 0090     }
                 ; 0000 0091 }
                 _0x10:
                 _0x10C:
00035a 91e9      	LD   R30,Y+
00035b bfef      	OUT  SREG,R30
00035c 91f9      	LD   R31,Y+
00035d 91e9      	LD   R30,Y+
00035e 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf(void){
                 ; 0000 0093 interrupt [11] void timer2_ovf(void){
                 _timer2_ovf:
                 ; .FSTART _timer2_ovf
00035f 93aa      	ST   -Y,R26
000360 93ba      	ST   -Y,R27
000361 93ea      	ST   -Y,R30
000362 93fa      	ST   -Y,R31
000363 b7ef      	IN   R30,SREG
000364 93ea      	ST   -Y,R30
                 ; 0000 0094     TCNT2 = 0x83;
000365 e8e3      	LDI  R30,LOW(131)
000366 bde4      	OUT  0x24,R30
                 ; 0000 0095     if(flag == true)
000367 e0e1      	LDI  R30,LOW(1)
000368 15e6      	CP   R30,R6
000369 f421      	BRNE _0x11
                 ; 0000 0096         dem++;
00036a eeac      	LDI  R26,LOW(_dem)
00036b e0b7      	LDI  R27,HIGH(_dem)
00036c 940e 1015 	CALL SUBOPT_0x0
                 ; 0000 0097     if(dem == 5000){
                 _0x11:
00036e 91a0 07ec 	LDS  R26,_dem
000370 91b0 07ed 	LDS  R27,_dem+1
000372 38a8      	CPI  R26,LOW(0x1388)
000373 e1e3      	LDI  R30,HIGH(0x1388)
000374 07be      	CPC  R27,R30
000375 f489      	BRNE _0x12
                 ; 0000 0098         rain_state[count] = 0;
000376 940e 101b 	CALL SUBOPT_0x1
000378 efa0      	LDI  R26,LOW(_rain_state)
000379 e0b7      	LDI  R27,HIGH(_rain_state)
00037a 0fee      	LSL  R30
00037b 1fff      	ROL  R31
00037c 0fae      	ADD  R26,R30
00037d 1fbf      	ADC  R27,R31
00037e e0e0      	LDI  R30,LOW(0)
00037f e0f0      	LDI  R31,HIGH(0)
000380 93ed      	ST   X+,R30
000381 93fc      	ST   X,R31
                 ; 0000 0099         count++;
000382 940e 1020 	CALL SUBOPT_0x2
                 ; 0000 009A         dem = 0;
000384 940e 1023 	CALL SUBOPT_0x3
                 ; 0000 009B         flag = false;
000386 2466      	CLR  R6
                 ; 0000 009C     }
                 ; 0000 009D }
                 _0x12:
000387 91e9      	LD   R30,Y+
000388 bfef      	OUT  SREG,R30
000389 91f9      	LD   R31,Y+
00038a 91e9      	LD   R30,Y+
00038b 91b9      	LD   R27,Y+
00038c 91a9      	LD   R26,Y+
00038d 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c) {
                 ; 0000 00A3 void putchar(char c) {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00A4     while (tx_counter0 == TX_BUFFER_SIZE0);
00038e 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x13:
00038f 91a0 0841 	LDS  R26,_tx_counter0
000391 34a0      	CPI  R26,LOW(0x40)
000392 f3e1      	BREQ _0x13
                 ; 0000 00A5 #asm("cli")
000393 94f8      	cli
                 ; 0000 00A6     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
000394 91e0 0841 	LDS  R30,_tx_counter0
000396 30e0      	CPI  R30,0
000397 f411      	BRNE _0x17
000398 995d      	SBIC 0xB,5
000399 c018      	RJMP _0x16
                 _0x17:
                 ; 0000 00A7         tx_buffer0[tx_wr_index0++]=c;
00039a 91e0 083f 	LDS  R30,_tx_wr_index0
00039c 5fef      	SUBI R30,-LOW(1)
00039d 93e0 083f 	STS  _tx_wr_index0,R30
00039f 50e1      	SUBI R30,LOW(1)
0003a0 e0f0      	LDI  R31,0
0003a1 50e1      	SUBI R30,LOW(-_tx_buffer0)
0003a2 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0003a3 81a8      	LD   R26,Y
0003a4 83a0      	STD  Z+0,R26
                 ; 0000 00A8 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00A9         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0003a5 91a0 083f 	LDS  R26,_tx_wr_index0
0003a7 34a0      	CPI  R26,LOW(0x40)
0003a8 f419      	BRNE _0x19
0003a9 e0e0      	LDI  R30,LOW(0)
0003aa 93e0 083f 	STS  _tx_wr_index0,R30
                 ; 0000 00AA #endif
                 ; 0000 00AB         ++tx_counter0;
                 _0x19:
0003ac 91e0 0841 	LDS  R30,_tx_counter0
0003ae 5fef      	SUBI R30,-LOW(1)
0003af 93e0 0841 	STS  _tx_counter0,R30
                 ; 0000 00AC     } else
0003b1 c002      	RJMP _0x1A
                 _0x16:
                 ; 0000 00AD         UDR0=c;
0003b2 81e8      	LD   R30,Y
0003b3 b9ec      	OUT  0xC,R30
                 ; 0000 00AE #asm("sei")
                 _0x1A:
0003b4 9478      	sei
                 ; 0000 00AF }
0003b5 9621      	ADIW R28,1
0003b6 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void put_string (unsigned char *s) {
                 ; 0000 00B6 void put_string (unsigned char *s) {
                 _put_string:
                 ; .FSTART _put_string
                 ; 0000 00B7     while(*s) {
0003b7 93ba      	ST   -Y,R27
0003b8 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x1B:
0003b9 81a8      	LD   R26,Y
0003ba 81b9      	LDD  R27,Y+1
0003bb 91ec      	LD   R30,X
0003bc 30e0      	CPI  R30,0
0003bd f061      	BREQ _0x1D
                 ; 0000 00B8         putchar(*s);
0003be 91ac      	LD   R26,X
0003bf dfce      	RCALL _putchar
                 ; 0000 00B9         delay_ms(50);
0003c0 e3a2      	LDI  R26,LOW(50)
0003c1 e0b0      	LDI  R27,0
0003c2 940e 1249 	CALL _delay_ms
                 ; 0000 00BA         s++;
0003c4 81e8      	LD   R30,Y
0003c5 81f9      	LDD  R31,Y+1
0003c6 9631      	ADIW R30,1
0003c7 83e8      	ST   Y,R30
0003c8 83f9      	STD  Y+1,R31
                 ; 0000 00BB     }
0003c9 cfef      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00BC }
0003ca 940c 08cf 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void refresh(int time_ms) {
                 ; 0000 00BE void refresh(int time_ms) {
                 _refresh:
                 ; .FSTART _refresh
                 ; 0000 00BF     delay_ms(time_ms);
0003cc 940e 1029 	CALL SUBOPT_0x4
                 ;	time_ms -> Y+0
0003ce 940e 1249 	CALL _delay_ms
                 ; 0000 00C0     del_string(buff);
0003d0 eea8      	LDI  R26,LOW(_buff)
0003d1 e0b6      	LDI  R27,HIGH(_buff)
0003d2 df17      	RCALL _del_string
                 ; 0000 00C1     i = 0;
0003d3 2488      	CLR  R8
0003d4 2499      	CLR  R9
                 ; 0000 00C2 }
0003d5 940c 08cf 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void wait_until(unsigned char *keyword, int time_out_s) {
                 ; 0000 00C4 void wait_until(unsigned char *keyword, int time_out_s) {
                 _wait_until:
                 ; .FSTART _wait_until
                 ; 0000 00C5     char temp[20], temp2[20];
                 ; 0000 00C6     int i = 0, time_start, time_temp;
                 ; 0000 00C7 
                 ; 0000 00C8     del_string(temp);
0003d7 93ba      	ST   -Y,R27
0003d8 93aa      	ST   -Y,R26
0003d9 97a8      	SBIW R28,40
0003da 940e 12d6 	CALL __SAVELOCR6
                 ;	*keyword -> Y+48
                 ;	time_out_s -> Y+46
                 ;	temp -> Y+26
                 ;	temp2 -> Y+6
                 ;	i -> R16,R17
                 ;	time_start -> R18,R19
                 ;	time_temp -> R20,R21
                +
0003dc e000     +LDI R16 , LOW ( 0 )
0003dd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0003de 01de      	MOVW R26,R28
0003df 965a      	ADIW R26,26
0003e0 df09      	RCALL _del_string
                 ; 0000 00C9 
                 ; 0000 00CA     while (*keyword) {
                 _0x1E:
0003e1 a9a8      	LDD  R26,Y+48
0003e2 a9b9      	LDD  R27,Y+48+1
0003e3 91ec      	LD   R30,X
0003e4 30e0      	CPI  R30,0
0003e5 f101      	BREQ _0x20
                 ; 0000 00CB         temp[i] = *keyword;
0003e6 01f8      	MOVW R30,R16
0003e7 01de      	MOVW R26,R28
0003e8 965a      	ADIW R26,26
0003e9 0fea      	ADD  R30,R26
0003ea 1ffb      	ADC  R31,R27
0003eb 010f      	MOVW R0,R30
0003ec a9a8      	LDD  R26,Y+48
0003ed a9b9      	LDD  R27,Y+48+1
0003ee 91ec      	LD   R30,X
0003ef 01d0      	MOVW R26,R0
0003f0 93ec      	ST   X,R30
                 ; 0000 00CC         temp2[i] = temp[i];
0003f1 01f8      	MOVW R30,R16
0003f2 01de      	MOVW R26,R28
0003f3 9616      	ADIW R26,6
0003f4 0fea      	ADD  R30,R26
0003f5 1ffb      	ADC  R31,R27
0003f6 010f      	MOVW R0,R30
0003f7 01de      	MOVW R26,R28
0003f8 965a      	ADIW R26,26
0003f9 0fa0      	ADD  R26,R16
0003fa 1fb1      	ADC  R27,R17
0003fb 91ec      	LD   R30,X
0003fc 01d0      	MOVW R26,R0
0003fd 93ec      	ST   X,R30
                 ; 0000 00CD         keyword++;
0003fe a9e8      	LDD  R30,Y+48
0003ff a9f9      	LDD  R31,Y+48+1
000400 9631      	ADIW R30,1
000401 abe8      	STD  Y+48,R30
000402 abf9      	STD  Y+48+1,R31
                 ; 0000 00CE         i++;
                +
000403 5f0f     +SUBI R16 , LOW ( - 1 )
000404 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00CF     }
000405 cfdb      	RJMP _0x1E
                 _0x20:
                 ; 0000 00D0 
                 ; 0000 00D1     time_start = time_s;
000406 0196      	MOVW R18,R12
                 ; 0000 00D2 
                 ; 0000 00D3     while (1) {
                 _0x21:
                 ; 0000 00D4         if (time_s < time_start) {
                +
000407 16c2     +CP R12 , R18
000408 06d3     +CPC R13 , R19
                 	__CPWRR 12,13,18,19
000409 f444      	BRGE _0x24
                 ; 0000 00D5             time_temp = time_s + 60;
00040a 01f6      	MOVW R30,R12
00040b 96fc      	ADIW R30,60
00040c 01af      	MOVW R20,R30
                 ; 0000 00D6             if (time_temp - time_start > time_out_s) {
00040d 01da      	MOVW R26,R20
00040e 940e 102e 	CALL SUBOPT_0x5
000410 f0f4      	BRLT _0x23
                 ; 0000 00D7                 break;
                 ; 0000 00D8             }
                 ; 0000 00D9         } else {
000411 c004      	RJMP _0x26
                 _0x24:
                 ; 0000 00DA             if (time_s - time_start > time_out_s) {
000412 01d6      	MOVW R26,R12
000413 940e 102e 	CALL SUBOPT_0x5
000415 f0cc      	BRLT _0x23
                 ; 0000 00DB                 break;
                 ; 0000 00DC             }
                 ; 0000 00DD         }
                 _0x26:
                 ; 0000 00DE 
                 ; 0000 00DF         if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
000416 940e 1035 	CALL SUBOPT_0x6
000418 01de      	MOVW R26,R28
000419 965c      	ADIW R26,28
00041a 940e 0838 	CALL _strstr
00041c 9730      	SBIW R30,0
00041d f441      	BRNE _0x29
00041e 940e 1035 	CALL SUBOPT_0x6
000420 01de      	MOVW R26,R28
000421 9618      	ADIW R26,8
000422 940e 0838 	CALL _strstr
000424 9730      	SBIW R30,0
000425 f009      	BREQ _0x28
                 _0x29:
                 ; 0000 00E0             break;
000426 c008      	RJMP _0x23
                 ; 0000 00E1         }
                 ; 0000 00E2         if (strstr(buff, "ERROR")) {
                 _0x28:
000427 940e 1035 	CALL SUBOPT_0x6
                +
000429 e0a0     +LDI R26 , LOW ( _0x2C + ( 0 ) )
00042a e0b5     +LDI R27 , HIGH ( _0x2C + ( 0 ) )
                 	__POINTW2MN _0x2C,0
00042b 940e 0838 	CALL _strstr
00042d 9730      	SBIW R30,0
00042e f2c1      	BREQ _0x21
                 ; 0000 00E3             break;
                 ; 0000 00E4         }
                 ; 0000 00E5     }
                 _0x23:
                 ; 0000 00E6 }
00042f 940e 12dd 	CALL __LOADLOCR6
000431 96e2      	ADIW R28,50
000432 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x2C:
000500           	.BYTE 0x6
                 ;
                 ;#define CE PORTA.3
                 ;#define CSN PORTA.2
                 ;#define SCK PORTA.4
                 ;#define MOSI PORTA.1
                 ;#define MISO PINA.5
                 ;#define IRQ PINA.0
                 ;
                 ;unsigned char P_Add, Code_tay_cam1 = 0xA1, Code_tay_cam2 = 0xA2, Code_tay_cam3 = 0xA3, Code_tay_cam4 = 0xA4;
                 ;#include "nrf_code.c"
                 ;#define _BV(x) (1<<(x))
                 ;#define RX_DR       6
                 ;#define TX_DS       5
                 ;#define MAX_RT      4
                 ;#define STATUS      0x07
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    float a;
                 ;    float b;
                 ;    float c;
                 ;    float d;
                 ;}data;
                 ;
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    int light;
                 ;    int humi;
                 ;    int temp;
                 ;    int sm;
                 ;}station_info;
                 ;
                 ;typedef struct
                 ;{
                 ;    int analog_l;
                 ;    int analog_r;
                 ;    int digital_l;
                 ;    int digital_r;
                 ;}tay_cam_info;
                 ;
                 ;station_info station_receive;
                 ;tay_cam_info tay_cam_receive;
                 ;
                 ;data data_receive;
                 ;unsigned char data_receive_2;
                 ;unsigned char result;
                 ;
                 ;
                 ;void config();
                 ;
                 ;
                 ;//-----------------------------TX Mode -----------------------------------------------//
                 ;unsigned char SPI_RW_TX(unsigned char Buff);                                       //Function used for text moving
                 ;void RF_Init_TX();                                                                 //Function allow to Initialize RF dev ...
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value  ...
                 ;void RF_Write_Address_TX(unsigned char Address);                                   //Function to write TX address for pi ...
                 ;void RF_Write_Address_2_TX(unsigned char Address);                                 //Function to write TX address for pi ...
                 ;void RX_Mode_Active_TX();                                                          //Function to put nRF in RX mode
                 ;void TX_Mode_Active_TX();                                                          //Function to put nRF in TX mode
                 ;void RF_Config_TX();                                                               //Function to config the nRF
                 ;void RF_TX_Send_TX(data send);                                                     //Function to send data Value to RX A ...
                 ;void RF_TX_Send_2_TX(data send);                                                   //Function to send data Value to RX a ...
                 ;
                 ;
                 ;//---------------------------------RX Mode----------------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff);                                       //Function used for text moving
                 ;unsigned char SPI_Read_RX(void);
                 ;void RF_Init_RX();                                                                 //Function allow to Initialize RF dev ...
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a regi ...
                 ;void RF_Command_RX(unsigned char command);                                         //Function to write a command
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;void RX_Mode_RX();                                                          //Function to put nRF in RX mode
                 ;void RF_Config_RX();                                                               //Function to config the nRF
                 ;void RF_Read_RX();                                                     //Function to read the data from RX FIFO
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Read_RX_2();
                 ;
                 ;
                 ;
                 ;
                 ;void config()
                 ; 0000 00F0 {
                 
                 	.CSEG
                 _config:
                 ; .FSTART _config
                 ;RF_Write_RX(0x07,0b01111110);  // Clear flag
000433 940e 103a 	CALL SUBOPT_0x7
                 ;RF_Command_RX(0b11100010);     //Flush RX
                 ;delay_us(10);
                +
000435 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000436 958a     +DEC R24
000437 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;RF_Write_TX(0x00,0b00011111);     //CONFIG 0x00
000438 e0e0      	LDI  R30,LOW(0)
000439 93ea      	ST   -Y,R30
00043a e1af      	LDI  R26,LOW(31)
00043b d024      	RCALL _RF_Write_TX
                 ;delay_ms(2);
00043c e0a2      	LDI  R26,LOW(2)
00043d e0b0      	LDI  R27,0
00043e 940e 1249 	CALL _delay_ms
                 ;RF_Write_TX(0x07,0b01111110);
000440 e0e7      	LDI  R30,LOW(7)
000441 93ea      	ST   -Y,R30
000442 e7ae      	LDI  R26,LOW(126)
000443 d01c      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x1D, 0b00000100);
000444 e1ed      	LDI  R30,LOW(29)
000445 93ea      	ST   -Y,R30
000446 e0a4      	LDI  R26,LOW(4)
000447 d018      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
000448 e0e5      	LDI  R30,LOW(5)
000449 93ea      	ST   -Y,R30
00044a e0a2      	LDI  R26,LOW(2)
00044b d014      	RCALL _RF_Write_TX
                 ;}
00044c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;unsigned char SPI_RW_TX(unsigned char Buff){
                 _SPI_RW_TX:
                 ; .FSTART _SPI_RW_TX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
00044d 93aa      	ST   -Y,R26
00044e 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00044f e010      	LDI  R17,LOW(0)
                 _0x32:
000450 3018      	CPI  R17,8
000451 f450      	BRSH _0x33
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
000452 81e9      	LDD  R30,Y+1
000453 78e0      	ANDI R30,LOW(0x80)
000454 f411      	BRNE _0x34
000455 98d9      	CBI  0x1B,1
000456 c001      	RJMP _0x35
                 _0x34:
000457 9ad9      	SBI  0x1B,1
                 _0x35:
                 ;        delay_us(5);
000458 940e 1042 	CALL SUBOPT_0x8
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
00045a 5f1f      	SUBI R17,-1
00045b cff4      	RJMP _0x32
                 _0x33:
                 ;    return(Buff);                     // return read uchar
00045c 81e9      	LDD  R30,Y+1
00045d 8118      	LDD  R17,Y+0
00045e 940c 08cf 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_TX()                                                    //Function allow to Initialize RF device
                 ;{
                 ;    CE=1;
                 ;    delay_us(700);
                 ;    CE=0;
                 ;    CSN=1;
                 ;}
                 ;
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register  ...
                 ;{
                 _RF_Write_TX:
                 ; .FSTART _RF_Write_TX
                 ;
                 ;    CSN=0;
000460 940e 1054 	CALL SUBOPT_0x9
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    result = SPI_RW_TX(0b00100000|Reg_Add);
000462 dfea      	RCALL _SPI_RW_TX
000463 93e0 086b 	STS  _result,R30
                 ;    SPI_RW_TX(Value);
000465 81a8      	LD   R26,Y
000466 dfe6      	RCALL _SPI_RW_TX
                 ;    CSN=1;
000467 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;	return result;
000469 91e0 086b 	LDS  R30,_result
00046b 940c 08cf 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Address_TX(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Write_Address_TX_2(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Mode_TX()                                             //Function to put nRF in TX mode
                 ;{
                 ;    CE=0;
                 ;    RF_Write_TX(0x00,0b00011110);     //CONFIG 0x00
                 ;}
                 ;
                 ;void RF_Config_TX()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_TX_2()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX_2(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Command_TX(unsigned char command)                            //Function to write a command
                 ;{
                 ;    CSN=0;
                 ;	command -> Y+0
                 ;    SPI_RW_TX(command);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Send_TX(station_info send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.light);
                 ;  SPI_RW_TX(send.humi);
                 ;  SPI_RW_TX(send.temp);
                 ;  SPI_RW_TX(send.sm);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;void RF_Send_TX_2(data send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.a);
                 ;  SPI_RW_TX(send.b);
                 ;  SPI_RW_TX(send.c);
                 ;  SPI_RW_TX(send.d);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;
                 ;
                 ;//--------------------------------------------RX function------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff)
                 ;{
                 _SPI_RW_RX:
                 ; .FSTART _SPI_RW_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
00046d 93aa      	ST   -Y,R26
00046e 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00046f e010      	LDI  R17,LOW(0)
                 _0x7F:
000470 3018      	CPI  R17,8
000471 f450      	BRSH _0x80
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
000472 81e9      	LDD  R30,Y+1
000473 78e0      	ANDI R30,LOW(0x80)
000474 f411      	BRNE _0x81
000475 98d9      	CBI  0x1B,1
000476 c001      	RJMP _0x82
                 _0x81:
000477 9ad9      	SBI  0x1B,1
                 _0x82:
                 ;        delay_us(5);
000478 940e 1042 	CALL SUBOPT_0x8
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
00047a 5f1f      	SUBI R17,-1
00047b cff4      	RJMP _0x7F
                 _0x80:
                 ;    return(Buff);                     // return read uchar
00047c 81e9      	LDD  R30,Y+1
00047d 8118      	LDD  R17,Y+0
00047e 940c 08cf 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read_RX(void)
                 ;{   unsigned char Buff=0;
                 _SPI_Read_RX:
                 ; .FSTART _SPI_Read_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000480 931a      	ST   -Y,R17
000481 930a      	ST   -Y,R16
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
000482 e010      	LDI  R17,0
000483 e000      	LDI  R16,LOW(0)
                 _0x88:
000484 3008      	CPI  R16,8
000485 f478      	BRSH _0x89
                 ;       {
                 ;        delay_us(5);
                +
000486 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000487 958a     +DEC R24
000488 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000489 0f11      	LSL  R17
                 ;        SCK = 1;                      // Set SCK high..
00048a 9adc      	SBI  0x1B,4
                 ;        delay_us(5);
                +
00048b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00048c 958a     +DEC R24
00048d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff |= MISO;                 // capture current MISO bit
00048e e0e0      	LDI  R30,0
00048f 99cd      	SBIC 0x19,5
000490 e0e1      	LDI  R30,1
000491 2b1e      	OR   R17,R30
                 ;        SCK = 0;                      // ..then set SCK low again
000492 98dc      	CBI  0x1B,4
                 ;       }
000493 5f0f      	SUBI R16,-1
000494 cfef      	RJMP _0x88
                 _0x89:
                 ;    return(Buff);                     // return read uchar
000495 2fe1      	MOV  R30,R17
000496 9109      	LD   R16,Y+
000497 9119      	LD   R17,Y+
000498 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_RX()                                                    //Function allow to Initialize RF device
                 ;{
                 _RF_Init_RX:
                 ; .FSTART _RF_Init_RX
                 ;    CE=1;
000499 9adb      	SBI  0x1B,3
                 ;    delay_us(700);
                +
00049a e788     +LDI R24 , LOW ( 1400 )
00049b e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
00049c 9701     +SBIW R24 , 1
00049d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
00049e 98db      	CBI  0x1B,3
                 ;    CSN=1;
00049f 9ada      	SBI  0x1B,2
                 ;}
0004a0 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_RX:
                 ; .FSTART _RF_Write_RX
                 ;    CSN=0;
0004a1 940e 1054 	CALL SUBOPT_0x9
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
0004a3 940e 105f 	CALL SUBOPT_0xB
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
0004a5 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;}
0004a7 940c 08cf 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write2_RX:
                 ; .FSTART _RF_Write2_RX
                 ;    CSN=0;
0004a9 940e 1054 	CALL SUBOPT_0x9
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
0004ab 940e 105f 	CALL SUBOPT_0xB
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
0004ad 81a8      	LD   R26,Y
0004ae 940e 105f 	CALL SUBOPT_0xB
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
0004b0 81a8      	LD   R26,Y
0004b1 940e 105f 	CALL SUBOPT_0xB
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
0004b3 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;}
0004b5 940c 08cf 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write3_RX:
                 ; .FSTART _RF_Write3_RX
                 ;    CSN=0;
0004b7 940e 1054 	CALL SUBOPT_0x9
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
0004b9 940e 1064 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Code_tay_cam2);
0004bb 940e 1064 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Code_tay_cam2);
0004bd 940e 1064 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Code_tay_cam2);
0004bf 940e 1064 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Code_tay_cam2);
0004c1 940e 105f 	CALL SUBOPT_0xB
                 ;    SPI_RW_RX(Value);
                 ;
                 ;
                 ;    CSN=1;
0004c3 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;}
0004c5 940c 08cf 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Command_RX(unsigned char command)                            //Function to write a command
                 ;{
                 _RF_Command_RX:
                 ; .FSTART _RF_Command_RX
                 ;    CSN=0;
0004c7 93aa      	ST   -Y,R26
                 ;	command -> Y+0
0004c8 98da      	CBI  0x1B,2
                 ;    SPI_RW_RX(command);
0004c9 81a8      	LD   R26,Y
0004ca dfa2      	RCALL _SPI_RW_RX
                 ;    CSN=1;
0004cb 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;}
0004cd 940c 0962 	JMP  _0x216000C
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;{
                 _RF_Write_Address_RX:
                 ; .FSTART _RF_Write_Address_RX
                 ;    CSN=0;
0004cf 93aa      	ST   -Y,R26
                 ;	Address1 -> Y+3
                 ;	Address2 -> Y+2
                 ;	Address3 -> Y+1
                 ;	Address4 -> Y+0
0004d0 98da      	CBI  0x1B,2
                 ;    RF_Write_RX(0x03,0b00000011);
0004d1 e0e3      	LDI  R30,LOW(3)
0004d2 93ea      	ST   -Y,R30
0004d3 e0a3      	LDI  R26,LOW(3)
0004d4 dfcc      	RCALL _RF_Write_RX
                 ;    CSN=1;
0004d5 940e 105a 	CALL SUBOPT_0xA
                 ;    delay_us(10);
                 ;    CSN=0;
0004d7 98da      	CBI  0x1B,2
                 ;    RF_Write2_RX(0x0A, Address1);
0004d8 e0ea      	LDI  R30,LOW(10)
0004d9 93ea      	ST   -Y,R30
0004da 81ac      	LDD  R26,Y+4
0004db dfcd      	RCALL _RF_Write2_RX
                 ;    RF_Write2_RX(0x10, Address1);
0004dc e1e0      	LDI  R30,LOW(16)
0004dd 93ea      	ST   -Y,R30
0004de 81ac      	LDD  R26,Y+4
0004df dfc9      	RCALL _RF_Write2_RX
                 ;
                 ;    RF_Write3_RX(0x0B, Address2);
0004e0 e0eb      	LDI  R30,LOW(11)
0004e1 93ea      	ST   -Y,R30
0004e2 81ab      	LDD  R26,Y+3
0004e3 940e 1069 	CALL SUBOPT_0xD
                 ;    RF_Write3_RX(0x10, Address2);
0004e5 81ab      	LDD  R26,Y+3
0004e6 dfd0      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0C, Address3);
0004e7 e0ec      	LDI  R30,LOW(12)
0004e8 93ea      	ST   -Y,R30
0004e9 81aa      	LDD  R26,Y+2
0004ea 940e 1069 	CALL SUBOPT_0xD
                 ;    RF_Write3_RX(0x10, Address3);
0004ec 81aa      	LDD  R26,Y+2
0004ed dfc9      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0D, Address4);
0004ee e0ed      	LDI  R30,LOW(13)
0004ef 93ea      	ST   -Y,R30
0004f0 81a9      	LDD  R26,Y+1
0004f1 940e 1069 	CALL SUBOPT_0xD
                 ;    RF_Write3_RX(0x10, Address4);
0004f3 81a9      	LDD  R26,Y+1
0004f4 dfc2      	RCALL _RF_Write3_RX
                 ;
                 ;}
0004f5 940c 097e 	JMP  _0x216000B
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX_2(unsigned char Address1){
                 ;    CSN=0;
                 ;	Address1 -> Y+0
                 ;    RF_Write_RX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;
                 ;    RF_Write2_RX(0x0A, Address1);
                 ;    RF_Write2_RX(0x10, Address1);
                 ;}
                 ;
                 ;
                 ;void RF_Mode_RX()                                             //Function to put nRF in RX mode
                 ;{
                 _RF_Mode_RX:
                 ; .FSTART _RF_Mode_RX
                 ;    RF_Write_RX(0x00,0b00011111);     //CONFIG 0x00
0004f7 e0e0      	LDI  R30,LOW(0)
0004f8 93ea      	ST   -Y,R30
0004f9 e1af      	LDI  R26,LOW(31)
0004fa dfa6      	RCALL _RF_Write_RX
                 ;    CE=1;
0004fb 9adb      	SBI  0x1B,3
                 ;}
0004fc 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX()                                                  //Function to config the nRF
                 ;{
                 _RF_Config_RX:
                 ; .FSTART _RF_Config_RX
                 ;RF_Write_RX(0x1C,0b00001111);
0004fd e1ec      	LDI  R30,LOW(28)
0004fe 940e 106e 	CALL SUBOPT_0xE
                 ;RF_Write_Address_RX(Code_tay_cam1, Code_tay_cam2, Code_tay_cam3, Code_tay_cam4);
000500 91e0 0843 	LDS  R30,_Code_tay_cam1
000502 93ea      	ST   -Y,R30
000503 91e0 0844 	LDS  R30,_Code_tay_cam2
000505 93ea      	ST   -Y,R30
000506 91e0 0845 	LDS  R30,_Code_tay_cam3
000508 93ea      	ST   -Y,R30
000509 91a0 0846 	LDS  R26,_Code_tay_cam4
00050b dfc3      	RCALL _RF_Write_Address_RX
                 ;RF_Write_RX(0x02,0b00001111);     //EX_RXADDR 0x02    enable data pipe 0;
00050c e0e2      	LDI  R30,LOW(2)
00050d 940e 106e 	CALL SUBOPT_0xE
                 ;RF_Write_RX(0x01,0b00001111);     //EN_AA 0x01        enable auto-acknowledgment
00050f e0e1      	LDI  R30,LOW(1)
000510 940e 106e 	CALL SUBOPT_0xE
                 ;}
000512 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX_2(){
                 ;    RF_Write_RX(0x1C,0b00001111);
                 ;    RF_Write_Address_RX_2(Code_tay_cam1);
                 ;    RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;    RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_RX_3(){
                 ;RF_Write_RX(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
                 ;RF_Write_Address_RX_2(Code_tay_cam1);
                 ;RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;RF_Write_RX(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
                 ;}
                 ;
                 ;void RF_Read_RX()                                         //Function to read the data from RX FIFO
                 ;{
                 ;   CE=0;
                 ;   CSN=1;
                 ;   delay_us(10);
                 ;   CSN=0;
                 ;   SPI_RW_RX(0b01100001);
                 ;   delay_us(10);
                 ;   data_receive.flag = SPI_Read_RX();
                 ;   data_receive.a = SPI_Read_RX();
                 ;   data_receive.b = SPI_Read_RX();
                 ;   data_receive.c = SPI_Read_RX();
                 ;   data_receive.d = SPI_Read_RX();
                 ;   CSN=1;
                 ;   CE=1;
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_2(){
                 ;    CE=0;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_RX(0b01100001);
                 ;    delay_us(10);
                 ;    tay_cam_receive.analog_l = SPI_Read_RX();
                 ;    tay_cam_receive.analog_r = SPI_Read_RX();
                 ;    tay_cam_receive.digital_l = SPI_Read_RX();
                 ;    tay_cam_receive.digital_r = SPI_Read_RX();
                 ;    CSN=1;
                 ;    CE=1;
                 ;    RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;    RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_3()                                         //Function to read the data from RX FIFO
                 ;{
                 _RF_Read_RX_3:
                 ; .FSTART _RF_Read_RX_3
                 ;   CE=0;
000513 98db      	CBI  0x1B,3
                 ;   CSN=1;
000514 940e 105a 	CALL SUBOPT_0xA
                 ;   delay_us(10);
                 ;   CSN=0;
000516 98da      	CBI  0x1B,2
                 ;   SPI_RW_RX(0b01100001);
000517 e6a1      	LDI  R26,LOW(97)
000518 df54      	RCALL _SPI_RW_RX
                 ;   delay_us(10);
                +
000519 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00051a 958a     +DEC R24
00051b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;   station_receive.flag = SPI_Read_RX();
00051c df63      	RCALL _SPI_Read_RX
00051d e0f0      	LDI  R31,0
00051e 93e0 0847 	STS  _station_receive,R30
000520 93f0 0848 	STS  _station_receive+1,R31
                 ;   station_receive.light = SPI_Read_RX();
000522 df5d      	RCALL _SPI_Read_RX
                +
000523 e4a9     +LDI R26 , LOW ( _station_receive + ( 2 ) )
000524 e0b8     +LDI R27 , HIGH ( _station_receive + ( 2 ) )
                 	__POINTW2MN _station_receive,2
000525 940e 1072 	CALL SUBOPT_0xF
                 ;   station_receive.humi = SPI_Read_RX();
                +
000527 e4ab     +LDI R26 , LOW ( _station_receive + ( 4 ) )
000528 e0b8     +LDI R27 , HIGH ( _station_receive + ( 4 ) )
                 	__POINTW2MN _station_receive,4
000529 940e 1072 	CALL SUBOPT_0xF
                 ;   station_receive.temp = SPI_Read_RX();
                +
00052b e4ad     +LDI R26 , LOW ( _station_receive + ( 6 ) )
00052c e0b8     +LDI R27 , HIGH ( _station_receive + ( 6 ) )
                 	__POINTW2MN _station_receive,6
00052d 940e 1072 	CALL SUBOPT_0xF
                 ;   station_receive.sm = SPI_Read_RX();
                +
00052f e4af     +LDI R26 , LOW ( _station_receive + ( 8 ) )
000530 e0b8     +LDI R27 , HIGH ( _station_receive + ( 8 ) )
                 	__POINTW2MN _station_receive,8
000531 e0f0      	LDI  R31,0
000532 93ed      	ST   X+,R30
000533 93fc      	ST   X,R31
                 ;   CSN=1;
000534 9ada      	SBI  0x1B,2
                 ;   CE=1;
000535 9adb      	SBI  0x1B,3
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
000536 940e 103a 	CALL SUBOPT_0x7
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
000538 9508      	RET
                 ; .FEND
                 ;
                 ;bool flag;
                 ;unsigned char* key[] = {"", "7R6NSYFHBFRUAR6K", "5I000WROXOFS0V85", "6NHFXH076SC02DZ0", "WUIT8LX7N92X8J4W"};
                 
                 	.DSEG
                 _0xD0:
000506           	.BYTE 0x45
                 ;char cmd[250];
                 ;#include "s_function.c"
                 ;void border()
                 ; 0000 00F5 {
                 
                 	.CSEG
                 _border:
                 ; .FSTART _border
                 ;    glcd_line(48,0, 48, 15);
000539 e3e0      	LDI  R30,LOW(48)
00053a 93ea      	ST   -Y,R30
00053b e0e0      	LDI  R30,LOW(0)
00053c 940e 1077 	CALL SUBOPT_0x10
                 ;    glcd_line(0, 15, 48, 15);
00053e e0ef      	LDI  R30,LOW(15)
00053f 940e 1077 	CALL SUBOPT_0x10
                 ;    glcd_line(0,0,84,0);
000541 e0e0      	LDI  R30,LOW(0)
000542 93ea      	ST   -Y,R30
000543 e5e4      	LDI  R30,LOW(84)
000544 93ea      	ST   -Y,R30
000545 e0a0      	LDI  R26,LOW(0)
000546 940e 0d0c 	CALL _glcd_line
                 ;    glcd_line(84,0, 84, 48);
000548 e5e4      	LDI  R30,LOW(84)
000549 93ea      	ST   -Y,R30
00054a e0e0      	LDI  R30,LOW(0)
00054b 940e 1080 	CALL SUBOPT_0x11
                 ;    glcd_line(0, 48, 84, 48);
00054d e3e0      	LDI  R30,LOW(48)
00054e 940e 1080 	CALL SUBOPT_0x11
                 ;    glcd_line(0, 0, 0, 48);
000550 e0e0      	LDI  R30,LOW(0)
000551 93ea      	ST   -Y,R30
000552 93ea      	ST   -Y,R30
000553 e3a0      	LDI  R26,LOW(48)
000554 940e 0d0c 	CALL _glcd_line
                 ;    glcd_moveto(3,3);
000556 e0e3      	LDI  R30,LOW(3)
000557 940e 1089 	CALL SUBOPT_0x12
                 ;    glcd_outtext("Node: ");
                +
000559 e4ab     +LDI R26 , LOW ( _0xD2 + ( 0 ) )
00055a e0b5     +LDI R27 , HIGH ( _0xD2 + ( 0 ) )
                 	__POINTW2MN _0xD2,0
00055b 940e 108d 	CALL SUBOPT_0x13
                 ;   // glcd_moveto(40, 3);
                 ;   // glcd_outtext("4");
                 ;
                 ;    glcd_moveto(4, 18);
00055d e1a2      	LDI  R26,LOW(18)
00055e 940e 0d00 	CALL _glcd_moveto
                 ;    glcd_outtext("Temp: ");
                +
000560 e5a2     +LDI R26 , LOW ( _0xD2 + ( 7 ) )
000561 e0b5     +LDI R27 , HIGH ( _0xD2 + ( 7 ) )
                 	__POINTW2MN _0xD2,7
000562 940e 108d 	CALL SUBOPT_0x13
                 ;    glcd_moveto(4, 28);
000564 e1ac      	LDI  R26,LOW(28)
000565 940e 0d00 	CALL _glcd_moveto
                 ;    glcd_outtext("Humid: ");
                +
000567 e5a9     +LDI R26 , LOW ( _0xD2 + ( 14 ) )
000568 e0b5     +LDI R27 , HIGH ( _0xD2 + ( 14 ) )
                 	__POINTW2MN _0xD2,14
000569 940e 108d 	CALL SUBOPT_0x13
                 ;    glcd_moveto(4, 37);
00056b e2a5      	LDI  R26,LOW(37)
00056c 940e 0d00 	CALL _glcd_moveto
                 ;    glcd_outtext("Water: ");
                +
00056e e6a1     +LDI R26 , LOW ( _0xD2 + ( 22 ) )
00056f e0b5     +LDI R27 , HIGH ( _0xD2 + ( 22 ) )
                 	__POINTW2MN _0xD2,22
000570 940e 0cd6 	CALL _glcd_outtext
                 ;    glcd_moveto(68, 18);
000572 e4e4      	LDI  R30,LOW(68)
000573 940e 1092 	CALL SUBOPT_0x14
                 ;    glcd_outtext("!C");
                +
000575 e6a9     +LDI R26 , LOW ( _0xD2 + ( 30 ) )
000576 e0b5     +LDI R27 , HIGH ( _0xD2 + ( 30 ) )
                 	__POINTW2MN _0xD2,30
000577 940e 0cd6 	CALL _glcd_outtext
                 ;    glcd_moveto(69, 28);
000579 e4e5      	LDI  R30,LOW(69)
00057a 940e 1096 	CALL SUBOPT_0x15
                 ;    glcd_putchar(37);
00057c e2a5      	LDI  R26,LOW(37)
00057d 940e 0c74 	CALL _glcd_putchar
                 ;    glcd_moveto(69, 37);
00057f e4e5      	LDI  R30,LOW(69)
000580 940e 109a 	CALL SUBOPT_0x16
                 ;    glcd_outtext("cm");
                +
000582 e6ac     +LDI R26 , LOW ( _0xD2 + ( 33 ) )
000583 e0b5     +LDI R27 , HIGH ( _0xD2 + ( 33 ) )
                 	__POINTW2MN _0xD2,33
000584 940e 0cd6 	CALL _glcd_outtext
                 ;}
000586 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xD2:
00054b           	.BYTE 0x24
                 ;void temp()
                 ;{
                 
                 	.CSEG
                 ;     glcd_moveto(50, 28);
                 ;     glcd_outtext("21");
                 ;     glcd_moveto(50, 18);
                 ;     glcd_outtext("75");
                 ;     glcd_moveto(50, 37);
                 ;     glcd_outtext("45");
                 ;}
                 
                 	.DSEG
                 _0xD3:
00056f           	.BYTE 0x9
                 ;void wifi_connect()
                 ;{
                 
                 	.CSEG
                 ;	glcd_moveto(10,10);
                 ;    glcd_clear();
                 ;    glcd_outtext("Booting");
                 ;    delay_ms(2000);
                 ;	put_string("AT\r\n");
                 ;    wait_until("OK", 2);
                 ;    refresh(0);
                 ;	delay_ms(100);
                 ;        put_string("AT+CIPSTATUS\r\n");
                 ;        wait_until("OK", 2);
                 ;        refresh(0);
                 ;        if (strstr(buff, "STATUS:2")) {
                 ;            glcd_outtext("Wifi Connected\r\n");
                 ;        }
                 ;        else
                 ;        {
                 ;            put_string("AT+CWMODE=1\r\n");
                 ;            wait_until("OK", 2);
                 ;           // refresh(0);
                 ;            put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
                 ;            wait_until("OK", 10);
                 ;            refresh(0);
                 ;         //PORTA.6=!PORTA.6;
                 ;        }
                 ;
                 ;  //  refresh(0);
                 ;}
                 
                 	.DSEG
                 _0xD4:
000578           	.BYTE 0x7B
                 ;
                 ;interrupt [EXT_INT6] void ext_int6_isr(void)
                 ; 0000 00F7 {
                 
                 	.CSEG
                 _ext_int6_isr:
                 ; .FSTART _ext_int6_isr
000587 940e 109e 	CALL SUBOPT_0x17
                 ; 0000 00F8 if(start_rain == true){
000589 f439      	BRNE _0xD7
                 ; 0000 00F9     PORTA.6 = !PORTA.6;
00058a 9bde      	SBIS 0x1B,6
00058b c002      	RJMP _0xD8
00058c 98de      	CBI  0x1B,6
00058d c001      	RJMP _0xD9
                 _0xD8:
00058e 9ade      	SBI  0x1B,6
                 _0xD9:
                 ; 0000 00FA     rain_count++;
00058f 940e 10aa 	CALL SUBOPT_0x18
                 ; 0000 00FB }
                 ; 0000 00FC 
                 ; 0000 00FD }
                 _0xD7:
000591 c00a      	RJMP _0x10B
                 ; .FEND
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 0101 {
                 _ext_int7_isr:
                 ; .FSTART _ext_int7_isr
000592 940e 109e 	CALL SUBOPT_0x17
                 ; 0000 0102 if(start_rain == true){
000594 f439      	BRNE _0xDA
                 ; 0000 0103     PORTA.6 = !PORTA.6;
000595 9bde      	SBIS 0x1B,6
000596 c002      	RJMP _0xDB
000597 98de      	CBI  0x1B,6
000598 c001      	RJMP _0xDC
                 _0xDB:
000599 9ade      	SBI  0x1B,6
                 _0xDC:
                 ; 0000 0104     rain_count++;
00059a 940e 10aa 	CALL SUBOPT_0x18
                 ; 0000 0105 }
                 ; 0000 0106 
                 ; 0000 0107 }
                 _0xDA:
                 _0x10B:
00059c 91e9      	LD   R30,Y+
00059d bfef      	OUT  SREG,R30
00059e 91f9      	LD   R31,Y+
00059f 91e9      	LD   R30,Y+
0005a0 91b9      	LD   R27,Y+
0005a1 91a9      	LD   R26,Y+
0005a2 9179      	LD   R23,Y+
0005a3 9169      	LD   R22,Y+
0005a4 9518      	RETI
                 ; .FEND
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 010D {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 010E ADMUX=adc_input | ADC_VREF_TYPE;
0005a5 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0005a6 81e8      	LD   R30,Y
0005a7 b9e7      	OUT  0x7,R30
                 ; 0000 010F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0110 delay_us(10);
                +
0005a8 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0005a9 958a     +DEC R24
0005aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0111 // Start the AD conversion
                 ; 0000 0112 ADCSRA|=(1<<ADSC);
0005ab 9a36      	SBI  0x6,6
                 ; 0000 0113 // Wait for the AD conversion to complete
                 ; 0000 0114 while ((ADCSRA & (1<<ADIF))==0);
                 _0xDD:
0005ac 9b34      	SBIS 0x6,4
0005ad cffe      	RJMP _0xDD
                 ; 0000 0115 ADCSRA|=(1<<ADIF);
0005ae 9a34      	SBI  0x6,4
                 ; 0000 0116 return ADCW;
0005af b1e4      	IN   R30,0x4
0005b0 b1f5      	IN   R31,0x4+1
0005b1 940c 0962 	JMP  _0x216000C
                 ; 0000 0117 }
                 ; .FEND
                 ;
                 ;void read_and_send(unsigned char *s){
                 ; 0000 0119 void read_and_send(unsigned char *s){
                 _read_and_send:
                 ; .FSTART _read_and_send
                 ; 0000 011A     // Thay nhung ham respones_read bang ham wait_until
                 ; 0000 011B     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
                 ; 0000 011C     int length = 0, i = 0;
                 ; 0000 011D     memset(api_key, '\0',20);
0005b3 93ba      	ST   -Y,R27
0005b4 93aa      	ST   -Y,R26
0005b5 97ef      	SBIW R28,63
0005b6 972e      	SBIW R28,14
0005b7 e181      	LDI  R24,17
0005b8 e2a8      	LDI  R26,LOW(40)
0005b9 e0b0      	LDI  R27,HIGH(40)
0005ba eaec      	LDI  R30,LOW(_0xE0*2)
0005bb e0f2      	LDI  R31,HIGH(_0xE0*2)
0005bc 940e 12e4 	CALL __INITLOCB
0005be 940e 12d8 	CALL __SAVELOCR4
                 ;	*s -> Y+81
                 ;	api_key -> Y+61
                 ;	cmd -> Y+44
                 ;	temp -> Y+24
                 ;	temp2 -> Y+4
                 ;	length -> R16,R17
                 ;	i -> R18,R19
                +
0005c0 e000     +LDI R16 , LOW ( 0 )
0005c1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0005c2 e020     +LDI R18 , LOW ( 0 )
0005c3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0005c4 01fe      	MOVW R30,R28
0005c5 96fd      	ADIW R30,61
0005c6 940e 10b5 	CALL SUBOPT_0x19
                 ; 0000 011E     memset(temp, '\0',20);
0005c8 01fe      	MOVW R30,R28
0005c9 9678      	ADIW R30,24
0005ca 940e 10b5 	CALL SUBOPT_0x19
                 ; 0000 011F     memset(temp2, '\0',20);
0005cc 01fe      	MOVW R30,R28
0005cd 9634      	ADIW R30,4
0005ce 940e 10b5 	CALL SUBOPT_0x19
                 ; 0000 0120 
                 ; 0000 0121     while (*s) {
                 _0xE1:
0005d0 940e 10bd 	CALL SUBOPT_0x1A
0005d2 30e0      	CPI  R30,0
0005d3 f0f9      	BREQ _0xE3
                 ; 0000 0122         temp2[i] = *s;
0005d4 01f9      	MOVW R30,R18
0005d5 01de      	MOVW R26,R28
0005d6 9614      	ADIW R26,4
0005d7 0fea      	ADD  R30,R26
0005d8 1ffb      	ADC  R31,R27
0005d9 01bf      	MOVW R22,R30
0005da 940e 10bd 	CALL SUBOPT_0x1A
0005dc 01db      	MOVW R26,R22
0005dd 93ec      	ST   X,R30
                 ; 0000 0123         api_key[i] = temp2[i];
0005de 01f9      	MOVW R30,R18
0005df 01de      	MOVW R26,R28
0005e0 96dd      	ADIW R26,61
0005e1 0fea      	ADD  R30,R26
0005e2 1ffb      	ADC  R31,R27
0005e3 010f      	MOVW R0,R30
0005e4 01de      	MOVW R26,R28
0005e5 9614      	ADIW R26,4
0005e6 0fa2      	ADD  R26,R18
0005e7 1fb3      	ADC  R27,R19
0005e8 91ec      	LD   R30,X
0005e9 01d0      	MOVW R26,R0
0005ea 93ec      	ST   X,R30
                 ; 0000 0124         s++;
0005eb 01de      	MOVW R26,R28
0005ec 5aaf      	SUBI R26,LOW(-(81))
0005ed 4fbf      	SBCI R27,HIGH(-(81))
0005ee 940e 1015 	CALL SUBOPT_0x0
                 ; 0000 0125         i++;
                +
0005f0 5f2f     +SUBI R18 , LOW ( - 1 )
0005f1 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0126     }
0005f2 cfdd      	RJMP _0xE1
                 _0xE3:
                 ; 0000 0127     put_string("AT+CIPMUX=1");
                +
0005f3 efa3     +LDI R26 , LOW ( _0xE4 + ( 0 ) )
0005f4 e0b5     +LDI R27 , HIGH ( _0xE4 + ( 0 ) )
                 	__POINTW2MN _0xE4,0
0005f5 940e 10c5 	CALL SUBOPT_0x1B
                 ; 0000 0128     delay_ms(300);
                 ; 0000 0129     put_string("\r\n");
                +
0005f7 efaf     +LDI R26 , LOW ( _0xE4 + ( 12 ) )
0005f8 e0b5     +LDI R27 , HIGH ( _0xE4 + ( 12 ) )
                 	__POINTW2MN _0xE4,12
0005f9 ddbd      	RCALL _put_string
                 ; 0000 012A     wait_until("OK", 2);
                +
0005fa e0e2     +LDI R30 , LOW ( _0xE4 + ( 15 ) )
0005fb e0f6     +LDI R31 , HIGH ( _0xE4 + ( 15 ) )
                 	__POINTW1MN _0xE4,15
0005fc 93fa      	ST   -Y,R31
0005fd 93ea      	ST   -Y,R30
0005fe e0a2      	LDI  R26,LOW(2)
0005ff e0b0      	LDI  R27,0
000600 ddd6      	RCALL _wait_until
                 ; 0000 012B     refresh(10);
000601 e0aa      	LDI  R26,LOW(10)
000602 e0b0      	LDI  R27,0
000603 ddc8      	RCALL _refresh
                 ; 0000 012C 
                 ; 0000 012D     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
                +
000604 e0a5     +LDI R26 , LOW ( _0xE4 + ( 18 ) )
000605 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 18 ) )
                 	__POINTW2MN _0xE4,18
000606 940e 10c5 	CALL SUBOPT_0x1B
                 ; 0000 012E     delay_ms(300);
                 ; 0000 012F     put_string("\r\n");
                +
000608 e3a1     +LDI R26 , LOW ( _0xE4 + ( 62 ) )
000609 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 62 ) )
                 	__POINTW2MN _0xE4,62
00060a ddac      	RCALL _put_string
                 ; 0000 0130     wait_until("OK", 20);
                +
00060b e3e4     +LDI R30 , LOW ( _0xE4 + ( 65 ) )
00060c e0f6     +LDI R31 , HIGH ( _0xE4 + ( 65 ) )
                 	__POINTW1MN _0xE4,65
00060d 93fa      	ST   -Y,R31
00060e 93ea      	ST   -Y,R30
00060f e1a4      	LDI  R26,LOW(20)
000610 e0b0      	LDI  R27,0
000611 ddc5      	RCALL _wait_until
                 ; 0000 0131     refresh(500);
000612 efa4      	LDI  R26,LOW(500)
000613 e0b1      	LDI  R27,HIGH(500)
000614 ddb7      	RCALL _refresh
                 ; 0000 0132 
                 ; 0000 0133     strcat(cmd, api_key);
000615 940e 10cb 	CALL SUBOPT_0x1C
000617 01de      	MOVW R26,R28
000618 96df      	ADIW R26,63
000619 940e 10d0 	CALL SUBOPT_0x1D
                 ; 0000 0134     strcat(cmd, "&field1=");
                +
00061b e3a7     +LDI R26 , LOW ( _0xE4 + ( 68 ) )
00061c e0b6     +LDI R27 , HIGH ( _0xE4 + ( 68 ) )
                 	__POINTW2MN _0xE4,68
00061d 940e 080e 	CALL _strcat
                 ; 0000 0135     itoa(station_receive.temp, temp);
00061f 940e 10d3 	CALL SUBOPT_0x1E
000621 940e 10d8 	CALL SUBOPT_0x1F
                 ; 0000 0136     strcat(cmd, temp);
000623 940e 10df 	CALL SUBOPT_0x20
                 ; 0000 0137 
                 ; 0000 0138     strcat(cmd, "&field2=");
                +
000625 e4a0     +LDI R26 , LOW ( _0xE4 + ( 77 ) )
000626 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 77 ) )
                 	__POINTW2MN _0xE4,77
000627 940e 080e 	CALL _strcat
                 ; 0000 0139     itoa(station_receive.humi, temp);
000629 940e 10e2 	CALL SUBOPT_0x21
00062b 940e 10d8 	CALL SUBOPT_0x1F
                 ; 0000 013A     strcat(cmd, temp);
00062d 940e 10df 	CALL SUBOPT_0x20
                 ; 0000 013B 
                 ; 0000 013C     strcat(cmd, "&field3=");
                +
00062f e4a9     +LDI R26 , LOW ( _0xE4 + ( 86 ) )
000630 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 86 ) )
                 	__POINTW2MN _0xE4,86
000631 940e 080e 	CALL _strcat
                 ; 0000 013D     itoa(station_receive.sm, temp);
                +
000633 91e0 084f+LDS R30 , _station_receive + ( 8 )
000635 91f0 0850+LDS R31 , _station_receive + ( 8 ) + 1
                 	__GETW1MN _station_receive,8
000637 940e 10d8 	CALL SUBOPT_0x1F
                 ; 0000 013E     strcat(cmd, temp);
000639 940e 10df 	CALL SUBOPT_0x20
                 ; 0000 013F 
                 ; 0000 0140     strcat(cmd, "\r\n");
                +
00063b e5a2     +LDI R26 , LOW ( _0xE4 + ( 95 ) )
00063c e0b6     +LDI R27 , HIGH ( _0xE4 + ( 95 ) )
                 	__POINTW2MN _0xE4,95
00063d 940e 080e 	CALL _strcat
                 ; 0000 0141     length = strlen(cmd);
00063f 01de      	MOVW R26,R28
000640 969c      	ADIW R26,44
000641 940e 081f 	CALL _strlen
000643 018f      	MOVW R16,R30
                 ; 0000 0142     itoa(length, temp);
000644 931a      	ST   -Y,R17
000645 930a      	ST   -Y,R16
000646 01de      	MOVW R26,R28
000647 965a      	ADIW R26,26
000648 940e 084f 	CALL _itoa
                 ; 0000 0143 
                 ; 0000 0144     put_string("AT+CIPSEND=0,");
                +
00064a e5a5     +LDI R26 , LOW ( _0xE4 + ( 98 ) )
00064b e0b6     +LDI R27 , HIGH ( _0xE4 + ( 98 ) )
                 	__POINTW2MN _0xE4,98
00064c dd6a      	RCALL _put_string
                 ; 0000 0145     put_string(temp);
00064d 01de      	MOVW R26,R28
00064e 9658      	ADIW R26,24
00064f dd67      	RCALL _put_string
                 ; 0000 0146     delay_ms(500);
000650 efa4      	LDI  R26,LOW(500)
000651 e0b1      	LDI  R27,HIGH(500)
000652 940e 1249 	CALL _delay_ms
                 ; 0000 0147     put_string("\r\n");
                +
000654 e6a3     +LDI R26 , LOW ( _0xE4 + ( 112 ) )
000655 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 112 ) )
                 	__POINTW2MN _0xE4,112
000656 dd60      	RCALL _put_string
                 ; 0000 0148     wait_until("> ", 5);
                +
000657 e6e6     +LDI R30 , LOW ( _0xE4 + ( 115 ) )
000658 e0f6     +LDI R31 , HIGH ( _0xE4 + ( 115 ) )
                 	__POINTW1MN _0xE4,115
000659 940e 10e7 	CALL SUBOPT_0x22
                 ; 0000 0149     put_string(cmd);
00065b 01de      	MOVW R26,R28
00065c 969c      	ADIW R26,44
00065d dd59      	RCALL _put_string
                 ; 0000 014A     delay_ms(1000);
00065e eea8      	LDI  R26,LOW(1000)
00065f e0b3      	LDI  R27,HIGH(1000)
000660 940e 1249 	CALL _delay_ms
                 ; 0000 014B     putchar(0x1A);
000662 e1aa      	LDI  R26,LOW(26)
000663 dd2a      	RCALL _putchar
                 ; 0000 014C     refresh(10);
000664 e0aa      	LDI  R26,LOW(10)
000665 e0b0      	LDI  R27,0
000666 dd65      	RCALL _refresh
                 ; 0000 014D 	put_string("AT+CIPCLOSE=0\r\n");
                +
000667 e6a9     +LDI R26 , LOW ( _0xE4 + ( 118 ) )
000668 e0b6     +LDI R27 , HIGH ( _0xE4 + ( 118 ) )
                 	__POINTW2MN _0xE4,118
000669 dd4d      	RCALL _put_string
                 ; 0000 014E 	wait_until("OK",5);
                +
00066a e7e9     +LDI R30 , LOW ( _0xE4 + ( 134 ) )
00066b e0f6     +LDI R31 , HIGH ( _0xE4 + ( 134 ) )
                 	__POINTW1MN _0xE4,134
00066c 940e 10e7 	CALL SUBOPT_0x22
                 ; 0000 014F 
                 ; 0000 0150 }
00066e 940e 12df 	CALL __LOADLOCR4
000670 96ef      	ADIW R28,63
000671 9664      	ADIW R28,20
000672 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xE4:
0005f3           	.BYTE 0x89
                 ;
                 ;void print_rain(){
                 ; 0000 0152 void print_rain(){
                 
                 	.CSEG
                 _print_rain:
                 ; .FSTART _print_rain
                 ; 0000 0153         //rtc_get_time(&end_h, &end_m, &end_s);
                 ; 0000 0154         glcd_moveto(55,3);
000673 e3e7      	LDI  R30,LOW(55)
000674 940e 1089 	CALL SUBOPT_0x12
                 ; 0000 0155         itoa(rain_count, buff);
000676 91e0 07fa 	LDS  R30,_rain_count
000678 91f0 07fb 	LDS  R31,_rain_count+1
00067a 940e 10ed 	CALL SUBOPT_0x23
                 ; 0000 0156         glcd_outtext(buff);
                 ; 0000 0157         start_rain = false;
00067c e0e0      	LDI  R30,LOW(0)
00067d 93e0 07fe 	STS  _start_rain,R30
                 ; 0000 0158         rain_count = 0;
00067f 93e0 07fa 	STS  _rain_count,R30
000681 93e0 07fb 	STS  _rain_count+1,R30
000683 93e0 07fc 	STS  _rain_count+2,R30
000685 93e0 07fd 	STS  _rain_count+3,R30
                 ; 0000 0159 }
000687 9508      	RET
                 ; .FEND
                 ;
                 ;void check_rain(){
                 ; 0000 015B void check_rain(){
                 _check_rain:
                 ; .FSTART _check_rain
                 ; 0000 015C     if(read_adc(6) < 500){
000688 e0a6      	LDI  R26,LOW(6)
000689 df1b      	RCALL _read_adc
00068a 3fe4      	CPI  R30,LOW(0x1F4)
00068b e0a1      	LDI  R26,HIGH(0x1F4)
00068c 07fa      	CPC  R31,R26
00068d f4d0      	BRSH _0xE5
                 ; 0000 015D         start_rain = true;
00068e e0e1      	LDI  R30,LOW(1)
00068f 93e0 07fe 	STS  _start_rain,R30
                 ; 0000 015E         glcd_clear();
000691 940e 0964 	CALL _glcd_clear
                 ; 0000 015F         while(1){
                 _0xE6:
                 ; 0000 0160             glcd_moveto(0,0);
000693 940e 10f7 	CALL SUBOPT_0x24
                 ; 0000 0161             glcd_outtext("rainning");
                +
000695 e7ac     +LDI R26 , LOW ( _0xE9 + ( 0 ) )
000696 e0b6     +LDI R27 , HIGH ( _0xE9 + ( 0 ) )
                 	__POINTW2MN _0xE9,0
000697 940e 0cd6 	CALL _glcd_outtext
                 ; 0000 0162             if(menu == 0){
000699 999b      	SBIC 0x13,3
00069a c003      	RJMP _0xEA
                 ; 0000 0163                 start_rain = false;
00069b 940e 10fc 	CALL SUBOPT_0x25
                 ; 0000 0164                 print_rain();
                 ; 0000 0165                 delay_ms(800);
                 ; 0000 0166                 glcd_clear();
                 ; 0000 0167                 break;
00069d c00a      	RJMP _0xE8
                 ; 0000 0168             }
                 ; 0000 0169             if(read_adc(6) > 500){
                 _0xEA:
00069e e0a6      	LDI  R26,LOW(6)
00069f df05      	RCALL _read_adc
0006a0 3fe5      	CPI  R30,LOW(0x1F5)
0006a1 e0a1      	LDI  R26,HIGH(0x1F5)
0006a2 07fa      	CPC  R31,R26
0006a3 f018      	BRLO _0xEB
                 ; 0000 016A                 start_rain = false;
0006a4 940e 10fc 	CALL SUBOPT_0x25
                 ; 0000 016B                 print_rain();
                 ; 0000 016C                 delay_ms(800);
                 ; 0000 016D                 glcd_clear();
                 ; 0000 016E                 break;
0006a6 c001      	RJMP _0xE8
                 ; 0000 016F             }
                 ; 0000 0170         }
                 _0xEB:
0006a7 cfeb      	RJMP _0xE6
                 _0xE8:
                 ; 0000 0171     }
                 ; 0000 0172 }
                 _0xE5:
0006a8 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xE9:
00067c           	.BYTE 0x9
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0176 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0177 // Declare your local variables here
                 ; 0000 0178 // Variable used to store graphic display
                 ; 0000 0179 // controller initialization data
                 ; 0000 017A GLCDINIT_t glcd_init_data;
                 ; 0000 017B 
                 ; 0000 017C // Input/Output Ports initialization
                 ; 0000 017D // Port A initialization
                 ; 0000 017E DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
0006a9 9728      	SBIW R28,8
                 ;	glcd_init_data -> Y+0
0006aa e5ee      	LDI  R30,LOW(94)
0006ab bbea      	OUT  0x1A,R30
                 ; 0000 017F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0180 PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
0006ac e3ef      	LDI  R30,LOW(63)
0006ad bbeb      	OUT  0x1B,R30
                 ; 0000 0181 
                 ; 0000 0182 // Port B initialization
                 ; 0000 0183 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0184     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
0006ae e0ec      	LDI  R30,LOW(12)
0006af bbe7      	OUT  0x17,R30
                 ; 0000 0185 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0186     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0006b0 bbe8      	OUT  0x18,R30
                 ; 0000 0187 
                 ; 0000 0188 // Port C initialization
                 ; 0000 0189 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 018A     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0006b1 e0e0      	LDI  R30,LOW(0)
0006b2 bbe4      	OUT  0x14,R30
                 ; 0000 018B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 018C     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
0006b3 e0ed      	LDI  R30,LOW(13)
0006b4 bbe5      	OUT  0x15,R30
                 ; 0000 018D 
                 ; 0000 018E // Port D initialization
                 ; 0000 018F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0190 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0006b5 e0e0      	LDI  R30,LOW(0)
0006b6 bbe1      	OUT  0x11,R30
                 ; 0000 0191 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0192 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0006b7 bbe2      	OUT  0x12,R30
                 ; 0000 0193 
                 ; 0000 0194 // Port E initialization
                 ; 0000 0195 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0196 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
0006b8 b9e2      	OUT  0x2,R30
                 ; 0000 0197 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0198 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
0006b9 b9e3      	OUT  0x3,R30
                 ; 0000 0199 
                 ; 0000 019A // Port F initialization
                 ; 0000 019B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 019C DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
0006ba 93e0 0061 	STS  97,R30
                 ; 0000 019D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 019E PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
0006bc 93e0 0062 	STS  98,R30
                 ; 0000 019F 
                 ; 0000 01A0 // Port G initialization
                 ; 0000 01A1 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 01A2 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
0006be 93e0 0064 	STS  100,R30
                 ; 0000 01A3 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01A4 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
0006c0 93e0 0065 	STS  101,R30
                 ; 0000 01A5 
                 ; 0000 01A6 // Timer/Counter 0 initialization
                 ; 0000 01A7 // Clock source: System Clock
                 ; 0000 01A8 // Clock value: 250.000 kHz
                 ; 0000 01A9 // Mode: Normal top=0xFF
                 ; 0000 01AA // OC0 output: Disconnected
                 ; 0000 01AB // Timer Period: 1 ms
                 ; 0000 01AC ASSR=0<<AS0;
0006c2 bfe0      	OUT  0x30,R30
                 ; 0000 01AD TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0006c3 e0e2      	LDI  R30,LOW(2)
0006c4 bfe3      	OUT  0x33,R30
                 ; 0000 01AE TCNT0=0x9C;
0006c5 e9ec      	LDI  R30,LOW(156)
0006c6 bfe2      	OUT  0x32,R30
                 ; 0000 01AF OCR0=0x00;
0006c7 e0e0      	LDI  R30,LOW(0)
0006c8 bfe1      	OUT  0x31,R30
                 ; 0000 01B0 
                 ; 0000 01B1 // Timer/Counter 1 initialization
                 ; 0000 01B2 // Clock source: System Clock
                 ; 0000 01B3 // Clock value: Timer1 Stopped
                 ; 0000 01B4 // Mode: Normal top=0xFFFF
                 ; 0000 01B5 // OC1A output: Disconnected
                 ; 0000 01B6 // OC1B output: Disconnected
                 ; 0000 01B7 // OC1C output: Disconnected
                 ; 0000 01B8 // Noise Canceler: Off
                 ; 0000 01B9 // Input Capture on Falling Edge
                 ; 0000 01BA // Timer1 Overflow Interrupt: Off
                 ; 0000 01BB // Input Capture Interrupt: Off
                 ; 0000 01BC // Compare A Match Interrupt: Off
                 ; 0000 01BD // Compare B Match Interrupt: Off
                 ; 0000 01BE // Compare C Match Interrupt: Off
                 ; 0000 01BF TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
0006c9 bdef      	OUT  0x2F,R30
                 ; 0000 01C0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0006ca bdee      	OUT  0x2E,R30
                 ; 0000 01C1 TCNT1H=0x00;
0006cb bded      	OUT  0x2D,R30
                 ; 0000 01C2 TCNT1L=0x00;
0006cc bdec      	OUT  0x2C,R30
                 ; 0000 01C3 ICR1H=0x00;
0006cd bde7      	OUT  0x27,R30
                 ; 0000 01C4 ICR1L=0x00;
0006ce bde6      	OUT  0x26,R30
                 ; 0000 01C5 OCR1AH=0x00;
0006cf bdeb      	OUT  0x2B,R30
                 ; 0000 01C6 OCR1AL=0x00;
0006d0 bdea      	OUT  0x2A,R30
                 ; 0000 01C7 OCR1BH=0x00;
0006d1 bde9      	OUT  0x29,R30
                 ; 0000 01C8 OCR1BL=0x00;
0006d2 bde8      	OUT  0x28,R30
                 ; 0000 01C9 OCR1CH=0x00;
0006d3 93e0 0079 	STS  121,R30
                 ; 0000 01CA OCR1CL=0x00;
0006d5 93e0 0078 	STS  120,R30
                 ; 0000 01CB 
                 ; 0000 01CC // Timer/Counter 2 initialization
                 ; 0000 01CD // Clock source: System Clock
                 ; 0000 01CE // Clock value: 125.000 kHz
                 ; 0000 01CF // Mode: Normal top=0xFF
                 ; 0000 01D0 // OC2 output: Disconnected
                 ; 0000 01D1 // Timer Period: 1 ms
                 ; 0000 01D2 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (1<<CS21) | (1<<CS20);
0006d7 e0e3      	LDI  R30,LOW(3)
0006d8 bde5      	OUT  0x25,R30
                 ; 0000 01D3 TCNT2=0x83;
0006d9 e8e3      	LDI  R30,LOW(131)
0006da bde4      	OUT  0x24,R30
                 ; 0000 01D4 OCR2=0x00;
0006db e0e0      	LDI  R30,LOW(0)
0006dc bde3      	OUT  0x23,R30
                 ; 0000 01D5 
                 ; 0000 01D6 // Timer/Counter 3 initialization
                 ; 0000 01D7 // Clock source: System Clock
                 ; 0000 01D8 // Clock value: Timer3 Stopped
                 ; 0000 01D9 // Mode: Normal top=0xFFFF
                 ; 0000 01DA // OC3A output: Disconnected
                 ; 0000 01DB // OC3B output: Disconnected
                 ; 0000 01DC // OC3C output: Disconnected
                 ; 0000 01DD // Noise Canceler: Off
                 ; 0000 01DE // Input Capture on Falling Edge
                 ; 0000 01DF // Timer3 Overflow Interrupt: Off
                 ; 0000 01E0 // Input Capture Interrupt: Off
                 ; 0000 01E1 // Compare A Match Interrupt: Off
                 ; 0000 01E2 // Compare B Match Interrupt: Off
                 ; 0000 01E3 // Compare C Match Interrupt: Off
                 ; 0000 01E4 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0006dd 93e0 008b 	STS  139,R30
                 ; 0000 01E5 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
0006df 93e0 008a 	STS  138,R30
                 ; 0000 01E6 TCNT3H=0x00;
0006e1 93e0 0089 	STS  137,R30
                 ; 0000 01E7 TCNT3L=0x00;
0006e3 93e0 0088 	STS  136,R30
                 ; 0000 01E8 ICR3H=0x00;
0006e5 93e0 0081 	STS  129,R30
                 ; 0000 01E9 ICR3L=0x00;
0006e7 93e0 0080 	STS  128,R30
                 ; 0000 01EA OCR3AH=0x00;
0006e9 93e0 0087 	STS  135,R30
                 ; 0000 01EB OCR3AL=0x00;
0006eb 93e0 0086 	STS  134,R30
                 ; 0000 01EC OCR3BH=0x00;
0006ed 93e0 0085 	STS  133,R30
                 ; 0000 01ED OCR3BL=0x00;
0006ef 93e0 0084 	STS  132,R30
                 ; 0000 01EE OCR3CH=0x00;
0006f1 93e0 0083 	STS  131,R30
                 ; 0000 01EF OCR3CL=0x00;
0006f3 93e0 0082 	STS  130,R30
                 ; 0000 01F0 
                 ; 0000 01F1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01F2 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0006f5 e4e1      	LDI  R30,LOW(65)
0006f6 bfe7      	OUT  0x37,R30
                 ; 0000 01F3 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0006f7 e0e0      	LDI  R30,LOW(0)
0006f8 93e0 007d 	STS  125,R30
                 ; 0000 01F4 
                 ; 0000 01F5 // External Interrupt(s) initialization
                 ; 0000 01F6 // INT0: Off
                 ; 0000 01F7 // INT1: Off
                 ; 0000 01F8 // INT2: Off
                 ; 0000 01F9 // INT3: Off
                 ; 0000 01FA // INT4: Off
                 ; 0000 01FB // INT5: Off
                 ; 0000 01FC // INT6: On
                 ; 0000 01FD // INT6 Mode: Low level
                 ; 0000 01FE // INT7: On
                 ; 0000 01FF // INT7 Mode: Low level
                 ; 0000 0200 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0006fa 93e0 006a 	STS  106,R30
                 ; 0000 0201 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
0006fc bfea      	OUT  0x3A,R30
                 ; 0000 0202 EIMSK=(1<<INT7) | (1<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
0006fd ece0      	LDI  R30,LOW(192)
0006fe bfe9      	OUT  0x39,R30
                 ; 0000 0203 EIFR=(1<<INTF7) | (1<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (0<<INTF0);
0006ff bfe8      	OUT  0x38,R30
                 ; 0000 0204 
                 ; 0000 0205 // USART0 initialization
                 ; 0000 0206 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0207 // USART0 Receiver: On
                 ; 0000 0208 // USART0 Transmitter: On
                 ; 0000 0209 // USART0 Mode: Asynchronous
                 ; 0000 020A // USART0 Baud Rate: 9600
                 ; 0000 020B UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000700 e0e0      	LDI  R30,LOW(0)
000701 b9eb      	OUT  0xB,R30
                 ; 0000 020C UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000702 ede8      	LDI  R30,LOW(216)
000703 b9ea      	OUT  0xA,R30
                 ; 0000 020D UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000704 e0e6      	LDI  R30,LOW(6)
000705 93e0 0095 	STS  149,R30
                 ; 0000 020E UBRR0H=0x00;
000707 e0e0      	LDI  R30,LOW(0)
000708 93e0 0090 	STS  144,R30
                 ; 0000 020F UBRR0L=0x33;
00070a e3e3      	LDI  R30,LOW(51)
00070b b9e9      	OUT  0x9,R30
                 ; 0000 0210 
                 ; 0000 0211 // USART1 initialization
                 ; 0000 0212 // USART1 disabled
                 ; 0000 0213 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00070c e0e0      	LDI  R30,LOW(0)
00070d 93e0 009a 	STS  154,R30
                 ; 0000 0214 
                 ; 0000 0215 // Analog Comparator initialization
                 ; 0000 0216 // Analog Comparator: Off
                 ; 0000 0217 // The Analog Comparator's positive input is
                 ; 0000 0218 // connected to the AIN0 pin
                 ; 0000 0219 // The Analog Comparator's negative input is
                 ; 0000 021A // connected to the AIN1 pin
                 ; 0000 021B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00070f e8e0      	LDI  R30,LOW(128)
000710 b9e8      	OUT  0x8,R30
                 ; 0000 021C SFIOR=(0<<ACME);
000711 e0e0      	LDI  R30,LOW(0)
000712 bde0      	OUT  0x20,R30
                 ; 0000 021D 
                 ; 0000 021E // ADC initialization
                 ; 0000 021F // ADC disabled
                 ; 0000 0220 ADMUX=ADC_VREF_TYPE;
000713 b9e7      	OUT  0x7,R30
                 ; 0000 0221 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000714 e8e3      	LDI  R30,LOW(131)
000715 b9e6      	OUT  0x6,R30
                 ; 0000 0222 SFIOR=(0<<ACME);
000716 e0e0      	LDI  R30,LOW(0)
000717 bde0      	OUT  0x20,R30
                 ; 0000 0223 
                 ; 0000 0224 // SPI initialization
                 ; 0000 0225 // SPI disabled
                 ; 0000 0226 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000718 b9ed      	OUT  0xD,R30
                 ; 0000 0227 
                 ; 0000 0228 // TWI initialization
                 ; 0000 0229 // TWI disabled
                 ; 0000 022A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000719 93e0 0074 	STS  116,R30
                 ; 0000 022B 
                 ; 0000 022C // Bit-Banged I2C Bus initialization
                 ; 0000 022D // I2C Port: PORTD
                 ; 0000 022E // I2C SDA bit: 1
                 ; 0000 022F // I2C SCL bit: 0
                 ; 0000 0230 // Bit Rate: 100 kHz
                 ; 0000 0231 // Note: I2C settings are specified in the
                 ; 0000 0232 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 0233 i2c_init();
00071b 940e 11f8 	CALL _i2c_init
                 ; 0000 0234 
                 ; 0000 0235 // DS1307 Real Time Clock initialization
                 ; 0000 0236 // Square wave output on pin SQW/OUT: On
                 ; 0000 0237 // Square wave frequency: 32768Hz
                 ; 0000 0238 rtc_init(3,1,0);
00071d e0e3      	LDI  R30,LOW(3)
00071e 93ea      	ST   -Y,R30
00071f e0e1      	LDI  R30,LOW(1)
000720 93ea      	ST   -Y,R30
000721 e0a0      	LDI  R26,LOW(0)
000722 d0bc      	RCALL _rtc_init
                 ; 0000 0239 
                 ; 0000 023A // Graphic Display Controller initialization
                 ; 0000 023B // The PCD8544 connections are specified in the
                 ; 0000 023C // Project|Configure|C Compiler|Libraries|Graphic Display menu:
                 ; 0000 023D // SDIN - PORTC Bit 7
                 ; 0000 023E // SCLK - PORTA Bit 7
                 ; 0000 023F // D /C - PORTC Bit 6
                 ; 0000 0240 // /SCE - PORTC Bit 5
                 ; 0000 0241 // /RES - PORTC Bit 4
                 ; 0000 0242 
                 ; 0000 0243 // Specify the current font for displaying text
                 ; 0000 0244 glcd_init_data.font=font5x7;
000723 e8ec      	LDI  R30,LOW(_font5x7*2)
000724 e0f0      	LDI  R31,HIGH(_font5x7*2)
000725 83e8      	ST   Y,R30
000726 83f9      	STD  Y+1,R31
                 ; 0000 0245 // No function is used for reading
                 ; 0000 0246 // image data from external memory
                 ; 0000 0247 glcd_init_data.readxmem=NULL;
000727 e0e0      	LDI  R30,LOW(0)
000728 83ea      	STD  Y+2,R30
000729 83eb      	STD  Y+2+1,R30
                 ; 0000 0248 // No function is used for writing
                 ; 0000 0249 // image data to external memory
                 ; 0000 024A glcd_init_data.writexmem=NULL;
00072a 83ec      	STD  Y+4,R30
00072b 83ed      	STD  Y+4+1,R30
                 ; 0000 024B // Set the LCD temperature coefficient
                 ; 0000 024C glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
00072c 81ee      	LDD  R30,Y+6
00072d 7fec      	ANDI R30,LOW(0xFC)
00072e 83ee      	STD  Y+6,R30
                 ; 0000 024D // Set the LCD bias
                 ; 0000 024E glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
00072f 7ee3      	ANDI R30,LOW(0xE3)
000730 60ec      	ORI  R30,LOW(0xC)
000731 83ee      	STD  Y+6,R30
                 ; 0000 024F // Set the LCD contrast control voltage VLCD
                 ; 0000 0250 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
000732 81ef      	LDD  R30,Y+7
000733 78e0      	ANDI R30,LOW(0x80)
000734 63e2      	ORI  R30,LOW(0x32)
000735 83ef      	STD  Y+7,R30
                 ; 0000 0251 
                 ; 0000 0252 glcd_init(&glcd_init_data);
000736 01de      	MOVW R26,R28
000737 940e 08db 	CALL _glcd_init
                 ; 0000 0253 
                 ; 0000 0254 // Global enable interrupts
                 ; 0000 0255 #asm("sei")
000739 9478      	sei
                 ; 0000 0256 
                 ; 0000 0257 glcd_moveto(0,0);
00073a 940e 10f7 	CALL SUBOPT_0x24
                 ; 0000 0258 glcd_outtext("start");
                +
00073c e8a5     +LDI R26 , LOW ( _0xEC + ( 0 ) )
00073d e0b6     +LDI R27 , HIGH ( _0xEC + ( 0 ) )
                 	__POINTW2MN _0xEC,0
00073e 940e 0cd6 	CALL _glcd_outtext
                 ; 0000 0259 delay_ms(1000);
000740 eea8      	LDI  R26,LOW(1000)
000741 e0b3      	LDI  R27,HIGH(1000)
000742 940e 1249 	CALL _delay_ms
                 ; 0000 025A //wifi_connect();
                 ; 0000 025B 
                 ; 0000 025C RF_Init_RX();
000744 dd54      	RCALL _RF_Init_RX
                 ; 0000 025D config();
000745 dced      	RCALL _config
                 ; 0000 025E RF_Config_RX();
000746 ddb6      	RCALL _RF_Config_RX
                 ; 0000 025F count = 1;
000747 940e 1107 	CALL SUBOPT_0x26
                 ; 0000 0260 glcd_clear();
000749 940e 0964 	CALL _glcd_clear
                 ; 0000 0261 
                 ; 0000 0262 while (1){
                 _0xED:
                 ; 0000 0263 
                 ; 0000 0264     if (menu==0){
00074b 999b      	SBIC 0x13,3
00074c c04d      	RJMP _0xF0
                 ; 0000 0265         while(1){
                 _0xF1:
                 ; 0000 0266             check_rain();
00074d df3a      	RCALL _check_rain
                 ; 0000 0267             RF_Mode_RX();
00074e dda8      	RCALL _RF_Mode_RX
                 ; 0000 0268             if(IRQ == 0){
00074f 99c8      	SBIC 0x19,0
000750 c048      	RJMP _0xF4
                 ; 0000 0269                 RF_Read_RX_3();
000751 940e 110e 	CALL SUBOPT_0x27
                 ; 0000 026A                 if(station_receive.flag == count){
000753 f009      	BREQ PC+2
000754 c044      	RJMP _0xF5
                 ; 0000 026B                     border();
000755 dde3      	RCALL _border
                 ; 0000 026C                     glcd_moveto(40, 3);
000756 e2e8      	LDI  R30,LOW(40)
000757 940e 1089 	CALL SUBOPT_0x12
                 ; 0000 026D                     itoa(station_receive.flag, buff);
000759 940e 1118 	CALL SUBOPT_0x28
                 ; 0000 026E                     glcd_outtext(buff);
                 ; 0000 026F                     glcd_moveto(46, 18);
00075b e2ee      	LDI  R30,LOW(46)
00075c 940e 1092 	CALL SUBOPT_0x14
                 ; 0000 0270                     sprintf(buff, "%d", station_receive.temp);
00075e 940e 1035 	CALL SUBOPT_0x6
000760 940e 111d 	CALL SUBOPT_0x29
000762 940e 10d3 	CALL SUBOPT_0x1E
000764 940e 1122 	CALL SUBOPT_0x2A
                 ; 0000 0271                     glcd_outtext(buff);
                 ; 0000 0272                     glcd_moveto(46, 28);
000766 940e 1096 	CALL SUBOPT_0x15
                 ; 0000 0273                     sprintf(buff, "%d", station_receive.humi);
000768 940e 1035 	CALL SUBOPT_0x6
00076a 940e 111d 	CALL SUBOPT_0x29
00076c 940e 10e2 	CALL SUBOPT_0x21
00076e 940e 1122 	CALL SUBOPT_0x2A
                 ; 0000 0274                     glcd_outtext(buff);
                 ; 0000 0275                     glcd_moveto(46, 37);
000770 940e 109a 	CALL SUBOPT_0x16
                 ; 0000 0276                     sprintf(buff, "%d", station_receive.sm/10);
000772 940e 1035 	CALL SUBOPT_0x6
000774 940e 111d 	CALL SUBOPT_0x29
000776 940e 1130 	CALL SUBOPT_0x2B
000778 940e 1139 	CALL SUBOPT_0x2C
                 ; 0000 0277                     glcd_outtext(buff);
                 ; 0000 0278                     if(station_receive.sm/10 < 10){
00077a 973a      	SBIW R30,10
00077b f414      	BRGE _0xF6
                 ; 0000 0279                         PORTA.3 = 0;
00077c 98db      	CBI  0x1B,3
                 ; 0000 027A                     }
                 ; 0000 027B                     else{
00077d c001      	RJMP _0xF9
                 _0xF6:
                 ; 0000 027C                         PORTA.3 = 1;
00077e 9adb      	SBI  0x1B,3
                 ; 0000 027D                     }
                 _0xF9:
                 ; 0000 027E                     read_and_send(key[count]);
00077f 940e 101b 	CALL SUBOPT_0x1
000781 e6ac      	LDI  R26,LOW(_key)
000782 e0b8      	LDI  R27,HIGH(_key)
000783 0fee      	LSL  R30
000784 1fff      	ROL  R31
000785 0fae      	ADD  R26,R30
000786 1fbf      	ADC  R27,R31
000787 940e 129e 	CALL __GETW1P
000789 01df      	MOVW R26,R30
00078a de28      	RCALL _read_and_send
                 ; 0000 027F                     delay_ms(800);
00078b 940e 1146 	CALL SUBOPT_0x2D
                 ; 0000 0280                     count++;
                 ; 0000 0281                     if(count == 5)
00078d 91a0 07ee 	LDS  R26,_count
00078f 91b0 07ef 	LDS  R27,_count+1
000791 9715      	SBIW R26,5
000792 f411      	BRNE _0xFC
                 ; 0000 0282                         count = 1;
000793 940e 1107 	CALL SUBOPT_0x26
                 ; 0000 0283                     dem = 0;
                 _0xFC:
000795 940e 1023 	CALL SUBOPT_0x3
                 ; 0000 0284                     flag = true;
000797 e0e1      	LDI  R30,LOW(1)
000798 2e6e      	MOV  R6,R30
                 ; 0000 0285                 }
                 ; 0000 0286             }
                 _0xF5:
                 ; 0000 0287         }
                 _0xF4:
000799 cfb3      	RJMP _0xF1
                 ; 0000 0288     }
                 ; 0000 0289     if (back==0){
                 _0xF0:
00079a 999a      	SBIC 0x13,2
00079b c041      	RJMP _0xFD
                 ; 0000 028A         while(1){
                 _0xFE:
                 ; 0000 028B             check_rain();
00079c deeb      	RCALL _check_rain
                 ; 0000 028C             if(IRQ == 0){
00079d 99c8      	SBIC 0x19,0
00079e c03d      	RJMP _0x101
                 ; 0000 028D                 RF_Read_RX_3();
00079f 940e 110e 	CALL SUBOPT_0x27
                 ; 0000 028E                 if(station_receive.flag == count){
0007a1 f5d1      	BRNE _0x102
                 ; 0000 028F                     border();
0007a2 dd96      	RCALL _border
                 ; 0000 0290                     glcd_moveto(40, 3);
0007a3 e2e8      	LDI  R30,LOW(40)
0007a4 940e 1089 	CALL SUBOPT_0x12
                 ; 0000 0291                     itoa(station_receive.flag, buff);
0007a6 940e 1118 	CALL SUBOPT_0x28
                 ; 0000 0292                     glcd_outtext(buff);
                 ; 0000 0293                     glcd_moveto(46, 18);
0007a8 e2ee      	LDI  R30,LOW(46)
0007a9 940e 1092 	CALL SUBOPT_0x14
                 ; 0000 0294                     sprintf(buff, "%d", station_receive.temp);
0007ab 940e 1035 	CALL SUBOPT_0x6
0007ad 940e 111d 	CALL SUBOPT_0x29
0007af 940e 10d3 	CALL SUBOPT_0x1E
0007b1 940e 1122 	CALL SUBOPT_0x2A
                 ; 0000 0295                     glcd_outtext(buff);
                 ; 0000 0296                     glcd_moveto(46, 28);
0007b3 940e 1096 	CALL SUBOPT_0x15
                 ; 0000 0297                     sprintf(buff, "%d", station_receive.humi);
0007b5 940e 1035 	CALL SUBOPT_0x6
0007b7 940e 111d 	CALL SUBOPT_0x29
0007b9 940e 10e2 	CALL SUBOPT_0x21
0007bb 940e 1122 	CALL SUBOPT_0x2A
                 ; 0000 0298                     glcd_outtext(buff);
                 ; 0000 0299                     glcd_moveto(46, 37);
0007bd 940e 109a 	CALL SUBOPT_0x16
                 ; 0000 029A                     sprintf(buff, "%d", station_receive.sm);
0007bf 940e 1035 	CALL SUBOPT_0x6
0007c1 940e 111d 	CALL SUBOPT_0x29
                +
0007c3 91e0 084f+LDS R30 , _station_receive + ( 8 )
0007c5 91f0 0850+LDS R31 , _station_receive + ( 8 ) + 1
                 	__GETW1MN _station_receive,8
0007c7 940e 1139 	CALL SUBOPT_0x2C
                 ; 0000 029B                     glcd_outtext(buff);
                 ; 0000 029C                     if(station_receive.sm/10 < 10){
0007c9 973a      	SBIW R30,10
0007ca f414      	BRGE _0x103
                 ; 0000 029D                         PORTA.3 = 0;
0007cb 98db      	CBI  0x1B,3
                 ; 0000 029E                     }
                 ; 0000 029F                     else{
0007cc c001      	RJMP _0x106
                 _0x103:
                 ; 0000 02A0                         PORTA.3 = 1;
0007cd 9adb      	SBI  0x1B,3
                 ; 0000 02A1                     }
                 _0x106:
                 ; 0000 02A2                     delay_ms(800);
0007ce 940e 1146 	CALL SUBOPT_0x2D
                 ; 0000 02A3                     count++;
                 ; 0000 02A4                     if(count == 5)
0007d0 91a0 07ee 	LDS  R26,_count
0007d2 91b0 07ef 	LDS  R27,_count+1
0007d4 9715      	SBIW R26,5
0007d5 f411      	BRNE _0x109
                 ; 0000 02A5                         count = 1;
0007d6 940e 1107 	CALL SUBOPT_0x26
                 ; 0000 02A6                     dem = 0;
                 _0x109:
0007d8 940e 1023 	CALL SUBOPT_0x3
                 ; 0000 02A7                     flag = true;
0007da e0e1      	LDI  R30,LOW(1)
0007db 2e6e      	MOV  R6,R30
                 ; 0000 02A8                 }
                 ; 0000 02A9             }
                 _0x102:
                 ; 0000 02AA 
                 ; 0000 02AB         }
                 _0x101:
0007dc cfbf      	RJMP _0xFE
                 ; 0000 02AC     }
                 ; 0000 02AD }
                 _0xFD:
0007dd cf6d      	RJMP _0xED
                 ; 0000 02AE }
                 _0x10A:
0007de cfff      	RJMP _0x10A
                 ; .FEND
                 
                 	.DSEG
                 _0xEC:
000685           	.BYTE 0x6
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
0007df 93aa      	ST   -Y,R26
0007e0 81ea      	LDD  R30,Y+2
0007e1 70e3      	ANDI R30,LOW(0x3)
0007e2 83ea      	STD  Y+2,R30
0007e3 81e9      	LDD  R30,Y+1
0007e4 30e0      	CPI  R30,0
0007e5 f019      	BREQ _0x2000003
0007e6 81ea      	LDD  R30,Y+2
0007e7 61e0      	ORI  R30,0x10
0007e8 83ea      	STD  Y+2,R30
                 _0x2000003:
0007e9 81e8      	LD   R30,Y
0007ea 30e0      	CPI  R30,0
0007eb f019      	BREQ _0x2000004
0007ec 81ea      	LDD  R30,Y+2
0007ed 68e0      	ORI  R30,0x80
0007ee 83ea      	STD  Y+2,R30
                 _0x2000004:
0007ef 940e 11fd 	CALL _i2c_start
0007f1 eda0      	LDI  R26,LOW(208)
0007f2 940e 1231 	CALL _i2c_write
0007f4 e0a7      	LDI  R26,LOW(7)
0007f5 940e 1231 	CALL _i2c_write
0007f7 81aa      	LDD  R26,Y+2
0007f8 940e 1231 	CALL _i2c_write
0007fa 940e 120c 	CALL _i2c_stop
0007fc 940c 08b4 	JMP  _0x216000E
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0007fe 93ba      	ST   -Y,R27
0007ff 93aa      	ST   -Y,R26
000800 81b9          ldd  r27,y+1
000801 81a8          ld   r26,y
000802 9610          adiw r26,0
000803 f031          breq memset1
000804 81fc          ldd  r31,y+4
000805 81eb          ldd  r30,y+3
000806 816a          ldd  r22,y+2
                 memset0:
000807 9361          st   z+,r22
000808 9711          sbiw r26,1
000809 f7e9          brne memset0
                 memset1:
00080a 81eb          ldd  r30,y+3
00080b 81fc          ldd  r31,y+4
00080c 940c 0e3a 	JMP  _0x2160005
                 ; .FEND
                 _strcat:
                 ; .FSTART _strcat
00080e 93ba      	ST   -Y,R27
00080f 93aa      	ST   -Y,R26
000810 91e9          ld   r30,y+
000811 91f9          ld   r31,y+
000812 91a9          ld   r26,y+
000813 91b9          ld   r27,y+
000814 01cd          movw r24,r26
                 strcat0:
000815 916d          ld   r22,x+
000816 2366          tst  r22
000817 f7e9          brne strcat0
000818 9711          sbiw r26,1
                 strcat1:
000819 9161          ld   r22,z+
00081a 936d          st   x+,r22
00081b 2366          tst  r22
00081c f7e1          brne strcat1
00081d 01fc          movw r30,r24
00081e 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
00081f 93ba      	ST   -Y,R27
000820 93aa      	ST   -Y,R26
000821 91a9          ld   r26,y+
000822 91b9          ld   r27,y+
000823 27ee          clr  r30
000824 27ff          clr  r31
                 strlen0:
000825 916d          ld   r22,x+
000826 2366          tst  r22
000827 f011          breq strlen1
000828 9631          adiw r30,1
000829 cffb          rjmp strlen0
                 strlen1:
00082a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00082b 93ba      	ST   -Y,R27
00082c 93aa      	ST   -Y,R26
00082d 27aa          clr  r26
00082e 27bb          clr  r27
00082f 91e9          ld   r30,y+
000830 91f9          ld   r31,y+
                 strlenf0:
000831 9005      	lpm  r0,z+
000832 2000          tst  r0
000833 f011          breq strlenf1
000834 9611          adiw r26,1
000835 cffb          rjmp strlenf0
                 strlenf1:
000836 01fd          movw r30,r26
000837 9508          ret
                 ; .FEND
                 _strstr:
                 ; .FSTART _strstr
000838 93ba      	ST   -Y,R27
000839 93aa      	ST   -Y,R26
00083a 81aa          ldd  r26,y+2
00083b 81bb          ldd  r27,y+3
00083c 01cd          movw r24,r26
                 strstr0:
00083d 81e8          ld   r30,y
00083e 81f9          ldd  r31,y+1
                 strstr1:
00083f 9171          ld   r23,z+
000840 2377          tst  r23
000841 f411          brne strstr2
000842 01fc          movw r30,r24
000843 c009          rjmp strstr3
                 strstr2:
000844 916d          ld   r22,x+
000845 1767          cp   r22,r23
000846 f3c1          breq strstr1
000847 9601          adiw r24,1
000848 01dc          movw r26,r24
000849 2366          tst  r22
00084a f791          brne strstr0
00084b 27ee          clr  r30
00084c 27ff          clr  r31
                 strstr3:
00084d 940c 097e 	JMP  _0x216000B
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00084f 93ba      	ST   -Y,R27
000850 93aa      	ST   -Y,R26
000851 91a9          ld   r26,y+
000852 91b9          ld   r27,y+
000853 91e9          ld   r30,y+
000854 91f9          ld   r31,y+
000855 9630          adiw r30,0
000856 f42a          brpl __itoa0
000857 95e0          com  r30
000858 95f0          com  r31
000859 9631          adiw r30,1
00085a e26d          ldi  r22,'-'
00085b 936d          st   x+,r22
                 __itoa0:
00085c 94e8          clt
00085d e180          ldi  r24,low(10000)
00085e e297          ldi  r25,high(10000)
00085f d00d          rcall __itoa1
000860 ee88          ldi  r24,low(1000)
000861 e093          ldi  r25,high(1000)
000862 d00a          rcall __itoa1
000863 e684          ldi  r24,100
000864 2799          clr  r25
000865 d007          rcall __itoa1
000866 e08a          ldi  r24,10
000867 d005          rcall __itoa1
000868 2f6e          mov  r22,r30
000869 d010          rcall __itoa5
00086a 2766          clr  r22
00086b 936c          st   x,r22
00086c 9508          ret
                 
                 __itoa1:
00086d 2766          clr	 r22
                 __itoa2:
00086e 17e8          cp   r30,r24
00086f 07f9          cpc  r31,r25
000870 f020          brlo __itoa3
000871 9563          inc  r22
000872 1be8          sub  r30,r24
000873 0bf9          sbc  r31,r25
000874 f7c9          brne __itoa2
                 __itoa3:
000875 2366          tst  r22
000876 f411          brne __itoa4
000877 f016          brts __itoa5
000878 9508          ret
                 __itoa4:
000879 9468          set
                 __itoa5:
00087a 5d60          subi r22,-0x30
00087b 936d          st   x+,r22
00087c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G103:
                 ; .FSTART _pcd8544_delay_G103
00087d 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G103:
                 ; .FSTART _pcd8544_wrbus_G103
00087e 93aa      	ST   -Y,R26
00087f 931a      	ST   -Y,R17
000880 98ad      	CBI  0x15,5
000881 e018      	LDI  R17,LOW(8)
                 _0x2060004:
000882 dffa      	RCALL _pcd8544_delay_G103
000883 81e9      	LDD  R30,Y+1
000884 78e0      	ANDI R30,LOW(0x80)
000885 f011      	BREQ _0x2060006
000886 9aaf      	SBI  0x15,7
000887 c001      	RJMP _0x2060007
                 _0x2060006:
000888 98af      	CBI  0x15,7
                 _0x2060007:
000889 81e9      	LDD  R30,Y+1
00088a 0fee      	LSL  R30
00088b 83e9      	STD  Y+1,R30
00088c dff0      	RCALL _pcd8544_delay_G103
00088d 9adf      	SBI  0x1B,7
00088e dfee      	RCALL _pcd8544_delay_G103
00088f 98df      	CBI  0x1B,7
000890 5011      	SUBI R17,LOW(1)
000891 f781      	BRNE _0x2060004
000892 9aad      	SBI  0x15,5
000893 8118      	LDD  R17,Y+0
000894 c03a      	RJMP _0x216000D
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
000895 93aa      	ST   -Y,R26
000896 98ae      	CBI  0x15,6
000897 81a8      	LD   R26,Y
000898 dfe5      	RCALL _pcd8544_wrbus_G103
000899 c0c8      	RJMP _0x216000C
                 ; .FEND
                 _pcd8544_wrdata_G103:
                 ; .FSTART _pcd8544_wrdata_G103
00089a 93aa      	ST   -Y,R26
00089b 9aae      	SBI  0x15,6
00089c 81a8      	LD   R26,Y
00089d dfe0      	RCALL _pcd8544_wrbus_G103
00089e c0c3      	RJMP _0x216000C
                 ; .FEND
                 _pcd8544_setaddr_G103:
                 ; .FSTART _pcd8544_setaddr_G103
00089f 93aa      	ST   -Y,R26
0008a0 931a      	ST   -Y,R17
0008a1 81e9      	LDD  R30,Y+1
0008a2 95e6      	LSR  R30
0008a3 95e6      	LSR  R30
0008a4 95e6      	LSR  R30
0008a5 2f1e      	MOV  R17,R30
0008a6 e5e4      	LDI  R30,LOW(84)
0008a7 9fe1      	MUL  R30,R17
0008a8 01f0      	MOVW R30,R0
0008a9 01df      	MOVW R26,R30
0008aa 81ea      	LDD  R30,Y+2
0008ab e0f0      	LDI  R31,0
0008ac 0fea      	ADD  R30,R26
0008ad 1ffb      	ADC  R31,R27
0008ae 93e0 087a 	STS  _gfx_addr_G103,R30
0008b0 93f0 087b 	STS  _gfx_addr_G103+1,R31
0008b2 2fe1      	MOV  R30,R17
0008b3 8118      	LDD  R17,Y+0
                 _0x216000E:
0008b4 9623      	ADIW R28,3
0008b5 9508      	RET
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
0008b6 93aa      	ST   -Y,R26
0008b7 81e9      	LDD  R30,Y+1
0008b8 68e0      	ORI  R30,0x80
0008b9 2fae      	MOV  R26,R30
0008ba dfda      	RCALL _pcd8544_wrcmd
0008bb 81e9      	LDD  R30,Y+1
0008bc 93ea      	ST   -Y,R30
0008bd 81a9      	LDD  R26,Y+1
0008be dfe0      	RCALL _pcd8544_setaddr_G103
0008bf 64e0      	ORI  R30,0x40
0008c0 2fae      	MOV  R26,R30
0008c1 dfd3      	RCALL _pcd8544_wrcmd
0008c2 c00c      	RJMP _0x216000D
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
0008c3 93aa      	ST   -Y,R26
0008c4 81e9      	LDD  R30,Y+1
0008c5 93ea      	ST   -Y,R30
0008c6 81a9      	LDD  R26,Y+1
0008c7 dfee      	RCALL _pcd8544_gotoxy
0008c8 91e0 087a 	LDS  R30,_gfx_addr_G103
0008ca 91f0 087b 	LDS  R31,_gfx_addr_G103+1
0008cc 58e4      	SUBI R30,LOW(-_gfx_buffer_G103)
0008cd 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
0008ce 81e0      	LD   R30,Z
                 _0x216000D:
0008cf 9622      	ADIW R28,2
0008d0 9508      	RET
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
0008d1 93aa      	ST   -Y,R26
0008d2 940e 114b 	CALL SUBOPT_0x2E
0008d4 9731      	SBIW R30,1
0008d5 58e4      	SUBI R30,LOW(-_gfx_buffer_G103)
0008d6 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
0008d7 81a8      	LD   R26,Y
0008d8 83a0      	STD  Z+0,R26
0008d9 dfc0      	RCALL _pcd8544_wrdata_G103
0008da c087      	RJMP _0x216000C
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0008db 93ba      	ST   -Y,R27
0008dc 93aa      	ST   -Y,R26
0008dd 940e 12d8 	CALL __SAVELOCR4
0008df 9aa5      	SBI  0x14,5
0008e0 9aad      	SBI  0x15,5
0008e1 9ad7      	SBI  0x1A,7
0008e2 98df      	CBI  0x1B,7
0008e3 9aa7      	SBI  0x14,7
0008e4 9aa6      	SBI  0x14,6
0008e5 9aa4      	SBI  0x14,4
0008e6 98ac      	CBI  0x15,4
0008e7 e0aa      	LDI  R26,LOW(10)
0008e8 e0b0      	LDI  R27,0
0008e9 940e 1249 	CALL _delay_ms
0008eb 9aac      	SBI  0x15,4
0008ec 81ec      	LDD  R30,Y+4
0008ed 81fd      	LDD  R31,Y+4+1
0008ee 9730      	SBIW R30,0
0008ef f121      	BREQ _0x2060008
0008f0 81e6      	LDD  R30,Z+6
0008f1 70e3      	ANDI R30,LOW(0x3)
0008f2 2f1e      	MOV  R17,R30
0008f3 81ec      	LDD  R30,Y+4
0008f4 81fd      	LDD  R31,Y+4+1
0008f5 81e6      	LDD  R30,Z+6
0008f6 95e6      	LSR  R30
0008f7 95e6      	LSR  R30
0008f8 70e7      	ANDI R30,LOW(0x7)
0008f9 2f0e      	MOV  R16,R30
0008fa 81ec      	LDD  R30,Y+4
0008fb 81fd      	LDD  R31,Y+4+1
0008fc 81e7      	LDD  R30,Z+7
0008fd 77ef      	ANDI R30,0x7F
0008fe 2f3e      	MOV  R19,R30
0008ff 81ac      	LDD  R26,Y+4
000900 81bd      	LDD  R27,Y+4+1
000901 940e 129e 	CALL __GETW1P
                +
000903 93e0 068f+STS _glcd_state + ( 4 ) , R30
000905 93f0 0690+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000907 9612      	ADIW R26,2
000908 940e 129e 	CALL __GETW1P
                +
00090a 93e0 06a4+STS _glcd_state + ( 25 ) , R30
00090c 93f0 06a5+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
00090e 81ac      	LDD  R26,Y+4
00090f 81bd      	LDD  R27,Y+4+1
000910 9614      	ADIW R26,4
000911 940e 129e 	CALL __GETW1P
000913 c00d      	RJMP _0x20600A0
                 _0x2060008:
000914 e010      	LDI  R17,LOW(0)
000915 e003      	LDI  R16,LOW(3)
000916 e332      	LDI  R19,LOW(50)
000917 e0e0      	LDI  R30,LOW(0)
000918 e0f0      	LDI  R31,HIGH(0)
                +
000919 93e0 068f+STS _glcd_state + ( 4 ) , R30
00091b 93f0 0690+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
00091d 93e0 06a4+STS _glcd_state + ( 25 ) , R30
00091f 93f0 06a5+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20600A0:
                +
000921 93e0 06a6+STS _glcd_state + ( 27 ) , R30
000923 93f0 06a7+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000925 e2a1      	LDI  R26,LOW(33)
000926 df6e      	RCALL _pcd8544_wrcmd
000927 2fe1      	MOV  R30,R17
000928 60e4      	ORI  R30,4
000929 2fae      	MOV  R26,R30
00092a df6a      	RCALL _pcd8544_wrcmd
00092b 2fe0      	MOV  R30,R16
00092c 61e0      	ORI  R30,0x10
00092d 2fae      	MOV  R26,R30
00092e df66      	RCALL _pcd8544_wrcmd
00092f 2fe3      	MOV  R30,R19
000930 68e0      	ORI  R30,0x80
000931 2fae      	MOV  R26,R30
000932 df62      	RCALL _pcd8544_wrcmd
000933 e2a0      	LDI  R26,LOW(32)
000934 df60      	RCALL _pcd8544_wrcmd
000935 e0a1      	LDI  R26,LOW(1)
000936 d022      	RCALL _glcd_display
000937 e0e1      	LDI  R30,LOW(1)
000938 93e0 068b 	STS  _glcd_state,R30
00093a e0e0      	LDI  R30,LOW(0)
                +
00093b 93e0 068c+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
00093d e0e1      	LDI  R30,LOW(1)
                +
00093e 93e0 0691+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000940 93e0 0692+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
000942 93e0 0693+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
000944 efef      	LDI  R30,LOW(255)
                +
000945 93e0 0694+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000947 e0e1      	LDI  R30,LOW(1)
                +
000948 93e0 069b+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
00094a e9ec     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
00094b e0f6     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
00094c 93fa      	ST   -Y,R31
00094d 93ea      	ST   -Y,R30
00094e efef      	LDI  R30,LOW(255)
00094f 93ea      	ST   -Y,R30
000950 e0a8      	LDI  R26,LOW(8)
000951 e0b0      	LDI  R27,0
000952 940e 07fe 	CALL _memset
000954 d00f      	RCALL _glcd_clear
000955 e0e1      	LDI  R30,LOW(1)
000956 940e 12df 	CALL __LOADLOCR4
000958 c080      	RJMP _0x216000A
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
000959 93aa      	ST   -Y,R26
00095a 81e8      	LD   R30,Y
00095b 30e0      	CPI  R30,0
00095c f011      	BREQ _0x206000A
00095d e0ec      	LDI  R30,LOW(12)
00095e c001      	RJMP _0x206000B
                 _0x206000A:
00095f e0e8      	LDI  R30,LOW(8)
                 _0x206000B:
000960 2fae      	MOV  R26,R30
000961 df33      	RCALL _pcd8544_wrcmd
                 _0x216000C:
000962 9621      	ADIW R28,1
000963 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000964 940e 12d8 	CALL __SAVELOCR4
000966 e030      	LDI  R19,0
                +
000967 91e0 068c+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000969 30e0      	CPI  R30,0
00096a f009      	BREQ _0x206000D
00096b ef3f      	LDI  R19,LOW(255)
                 _0x206000D:
00096c e0e0      	LDI  R30,LOW(0)
00096d 93ea      	ST   -Y,R30
00096e e0a0      	LDI  R26,LOW(0)
00096f df46      	RCALL _pcd8544_gotoxy
                +
000970 ef08     +LDI R16 , LOW ( 504 )
000971 e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x206000E:
000972 01f8      	MOVW R30,R16
                +
000973 5001     +SUBI R16 , LOW ( 1 )
000974 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
000975 9730      	SBIW R30,0
000976 f019      	BREQ _0x2060010
000977 2fa3      	MOV  R26,R19
000978 df58      	RCALL _pcd8544_wrbyte
000979 cff8      	RJMP _0x206000E
                 _0x2060010:
00097a 940e 10f7 	CALL SUBOPT_0x24
00097c 940e 12df 	CALL __LOADLOCR4
                 _0x216000B:
00097e 9624      	ADIW R28,4
00097f 9508      	RET
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
000980 93aa      	ST   -Y,R26
000981 931a      	ST   -Y,R17
000982 930a      	ST   -Y,R16
000983 81ac      	LDD  R26,Y+4
000984 35a4      	CPI  R26,LOW(0x54)
000985 f418      	BRSH _0x2060012
000986 81ab      	LDD  R26,Y+3
000987 33a0      	CPI  R26,LOW(0x30)
000988 f010      	BRLO _0x2060011
                 _0x2060012:
000989 940c 0e38 	JMP  _0x2160004
                 _0x2060011:
00098b 81ec      	LDD  R30,Y+4
00098c 93ea      	ST   -Y,R30
00098d 81ac      	LDD  R26,Y+4
00098e df34      	RCALL _pcd8544_rdbyte
00098f 2f1e      	MOV  R17,R30
000990 81eb      	LDD  R30,Y+3
000991 70e7      	ANDI R30,LOW(0x7)
000992 e0a1      	LDI  R26,LOW(1)
000993 940e 125b 	CALL __LSLB12
000995 2f0e      	MOV  R16,R30
000996 81ea      	LDD  R30,Y+2
000997 30e0      	CPI  R30,0
000998 f011      	BREQ _0x2060014
000999 2b10      	OR   R17,R16
00099a c003      	RJMP _0x2060015
                 _0x2060014:
00099b 2fe0      	MOV  R30,R16
00099c 95e0      	COM  R30
00099d 231e      	AND  R17,R30
                 _0x2060015:
00099e 2fa1      	MOV  R26,R17
00099f df31      	RCALL _pcd8544_wrbyte
0009a0 940c 0e38 	JMP  _0x2160004
                 ; .FEND
                 _pcd8544_wrmasked_G103:
                 ; .FSTART _pcd8544_wrmasked_G103
0009a2 93aa      	ST   -Y,R26
0009a3 931a      	ST   -Y,R17
0009a4 81ed      	LDD  R30,Y+5
0009a5 93ea      	ST   -Y,R30
0009a6 81ad      	LDD  R26,Y+5
0009a7 df1b      	RCALL _pcd8544_rdbyte
0009a8 2f1e      	MOV  R17,R30
0009a9 81e9      	LDD  R30,Y+1
0009aa 30e7      	CPI  R30,LOW(0x7)
0009ab f011      	BREQ _0x2060020
0009ac 30e8      	CPI  R30,LOW(0x8)
0009ad f439      	BRNE _0x2060021
                 _0x2060020:
0009ae 81eb      	LDD  R30,Y+3
0009af 93ea      	ST   -Y,R30
0009b0 81aa      	LDD  R26,Y+2
0009b1 940e 0faf 	CALL _glcd_mappixcolor1bit
0009b3 83eb      	STD  Y+3,R30
0009b4 c008      	RJMP _0x2060022
                 _0x2060021:
0009b5 30e3      	CPI  R30,LOW(0x3)
0009b6 f421      	BRNE _0x2060024
0009b7 81eb      	LDD  R30,Y+3
0009b8 95e0      	COM  R30
0009b9 83eb      	STD  Y+3,R30
0009ba c002      	RJMP _0x2060025
                 _0x2060024:
0009bb 30e0      	CPI  R30,0
0009bc f421      	BRNE _0x2060026
                 _0x2060025:
                 _0x2060022:
0009bd 81ea      	LDD  R30,Y+2
0009be 95e0      	COM  R30
0009bf 231e      	AND  R17,R30
0009c0 c002      	RJMP _0x2060027
                 _0x2060026:
0009c1 30e2      	CPI  R30,LOW(0x2)
0009c2 f429      	BRNE _0x2060028
                 _0x2060027:
0009c3 81ea      	LDD  R30,Y+2
0009c4 81ab      	LDD  R26,Y+3
0009c5 23ea      	AND  R30,R26
0009c6 2b1e      	OR   R17,R30
0009c7 c00e      	RJMP _0x206001E
                 _0x2060028:
0009c8 30e1      	CPI  R30,LOW(0x1)
0009c9 f429      	BRNE _0x2060029
0009ca 81ea      	LDD  R30,Y+2
0009cb 81ab      	LDD  R26,Y+3
0009cc 23ea      	AND  R30,R26
0009cd 271e      	EOR  R17,R30
0009ce c007      	RJMP _0x206001E
                 _0x2060029:
0009cf 30e4      	CPI  R30,LOW(0x4)
0009d0 f429      	BRNE _0x206001E
0009d1 81ea      	LDD  R30,Y+2
0009d2 95e0      	COM  R30
0009d3 81ab      	LDD  R26,Y+3
0009d4 2bea      	OR   R30,R26
0009d5 231e      	AND  R17,R30
                 _0x206001E:
0009d6 2fa1      	MOV  R26,R17
0009d7 def9      	RCALL _pcd8544_wrbyte
0009d8 8118      	LDD  R17,Y+0
                 _0x216000A:
0009d9 9626      	ADIW R28,6
0009da 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
0009db 93aa      	ST   -Y,R26
0009dc 9723      	SBIW R28,3
0009dd 940e 12d6 	CALL __SAVELOCR6
0009df 89a8      	LDD  R26,Y+16
0009e0 35a4      	CPI  R26,LOW(0x54)
0009e1 f448      	BRSH _0x206002C
0009e2 85af      	LDD  R26,Y+15
0009e3 33a0      	CPI  R26,LOW(0x30)
0009e4 f430      	BRSH _0x206002C
0009e5 85ae      	LDD  R26,Y+14
0009e6 30a0      	CPI  R26,LOW(0x0)
0009e7 f019      	BREQ _0x206002C
0009e8 85ad      	LDD  R26,Y+13
0009e9 30a0      	CPI  R26,LOW(0x0)
0009ea f409      	BRNE _0x206002B
                 _0x206002C:
0009eb c1d5      	RJMP _0x2160009
                 _0x206002B:
0009ec 85ee      	LDD  R30,Y+14
0009ed 87e8      	STD  Y+8,R30
0009ee 89a8      	LDD  R26,Y+16
0009ef 27bb      	CLR  R27
0009f0 85ee      	LDD  R30,Y+14
0009f1 e0f0      	LDI  R31,0
0009f2 0fae      	ADD  R26,R30
0009f3 1fbf      	ADC  R27,R31
0009f4 35a5      	CPI  R26,LOW(0x55)
0009f5 e0e0      	LDI  R30,HIGH(0x55)
0009f6 07be      	CPC  R27,R30
0009f7 f020      	BRLO _0x206002E
0009f8 89a8      	LDD  R26,Y+16
0009f9 e5e4      	LDI  R30,LOW(84)
0009fa 1bea      	SUB  R30,R26
0009fb 87ee      	STD  Y+14,R30
                 _0x206002E:
0009fc 852d      	LDD  R18,Y+13
0009fd 85af      	LDD  R26,Y+15
0009fe 27bb      	CLR  R27
0009ff 85ed      	LDD  R30,Y+13
000a00 e0f0      	LDI  R31,0
000a01 0fae      	ADD  R26,R30
000a02 1fbf      	ADC  R27,R31
000a03 97d1      	SBIW R26,49
000a04 f020      	BRLO _0x206002F
000a05 85af      	LDD  R26,Y+15
000a06 e3e0      	LDI  R30,LOW(48)
000a07 1bea      	SUB  R30,R26
000a08 87ed      	STD  Y+13,R30
                 _0x206002F:
000a09 85a9      	LDD  R26,Y+9
000a0a 30a6      	CPI  R26,LOW(0x6)
000a0b f009      	BREQ PC+2
000a0c c05b      	RJMP _0x2060030
000a0d 85ec      	LDD  R30,Y+12
000a0e 30e1      	CPI  R30,LOW(0x1)
000a0f f409      	BRNE _0x2060034
000a10 c1b0      	RJMP _0x2160009
                 _0x2060034:
000a11 30e3      	CPI  R30,LOW(0x3)
000a12 f439      	BRNE _0x2060037
                +
000a13 91e0 06a6+LDS R30 , _glcd_state + ( 27 )
000a15 91f0 06a7+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000a17 9730      	SBIW R30,0
000a18 f409      	BRNE _0x2060036
000a19 c1a7      	RJMP _0x2160009
                 _0x2060036:
                 _0x2060037:
000a1a 8508      	LDD  R16,Y+8
000a1b 85ed      	LDD  R30,Y+13
000a1c 95e6      	LSR  R30
000a1d 95e6      	LSR  R30
000a1e 95e6      	LSR  R30
000a1f 2f3e      	MOV  R19,R30
000a20 2fe2      	MOV  R30,R18
000a21 70e7      	ANDI R30,LOW(0x7)
000a22 f419      	BRNE _0x2060039
000a23 85ad      	LDD  R26,Y+13
000a24 172a      	CP   R18,R26
000a25 f0e9      	BREQ _0x2060038
                 _0x2060039:
000a26 2fa0      	MOV  R26,R16
000a27 27bb      	CLR  R27
000a28 2fe3      	MOV  R30,R19
000a29 e0f0      	LDI  R31,0
000a2a 940e 1270 	CALL __MULW12U
000a2c 85aa      	LDD  R26,Y+10
000a2d 85bb      	LDD  R27,Y+10+1
000a2e 940e 114e 	CALL SUBOPT_0x2F
000a30 9526      	LSR  R18
000a31 9526      	LSR  R18
000a32 9526      	LSR  R18
000a33 2f53      	MOV  R21,R19
                 _0x206003B:
000a34 935f      	PUSH R21
000a35 5f5f      	SUBI R21,-1
000a36 2fe2      	MOV  R30,R18
000a37 91af      	POP  R26
000a38 17ea      	CP   R30,R26
000a39 f048      	BRLO _0x206003D
000a3a 2f10      	MOV  R17,R16
                 _0x206003E:
000a3b 2fe1      	MOV  R30,R17
000a3c 5011      	SUBI R17,1
000a3d 30e0      	CPI  R30,0
000a3e f019      	BREQ _0x2060040
000a3f 940e 1153 	CALL SUBOPT_0x30
000a41 cff9      	RJMP _0x206003E
                 _0x2060040:
000a42 cff1      	RJMP _0x206003B
                 _0x206003D:
                 _0x2060038:
000a43 85ae      	LDD  R26,Y+14
000a44 170a      	CP   R16,R26
000a45 f111      	BREQ _0x2060041
000a46 85ee      	LDD  R30,Y+14
000a47 85aa      	LDD  R26,Y+10
000a48 85bb      	LDD  R27,Y+10+1
000a49 e0f0      	LDI  R31,0
000a4a 940e 114e 	CALL SUBOPT_0x2F
000a4c 85ed      	LDD  R30,Y+13
000a4d 70e7      	ANDI R30,LOW(0x7)
000a4e f009      	BREQ _0x2060042
000a4f 5f3f      	SUBI R19,-LOW(1)
                 _0x2060042:
000a50 e020      	LDI  R18,LOW(0)
                 _0x2060043:
000a51 932f      	PUSH R18
000a52 5f2f      	SUBI R18,-1
000a53 2fe3      	MOV  R30,R19
000a54 91af      	POP  R26
000a55 17ae      	CP   R26,R30
000a56 f488      	BRSH _0x2060045
000a57 851e      	LDD  R17,Y+14
                 _0x2060046:
000a58 931f      	PUSH R17
000a59 5f1f      	SUBI R17,-1
000a5a 2fe0      	MOV  R30,R16
000a5b 91af      	POP  R26
000a5c 17ae      	CP   R26,R30
000a5d f418      	BRSH _0x2060048
000a5e 940e 1153 	CALL SUBOPT_0x30
000a60 cff7      	RJMP _0x2060046
                 _0x2060048:
000a61 85ee      	LDD  R30,Y+14
000a62 81ae      	LDD  R26,Y+6
000a63 81bf      	LDD  R27,Y+6+1
000a64 e0f0      	LDI  R31,0
000a65 940e 114e 	CALL SUBOPT_0x2F
000a67 cfe9      	RJMP _0x2060043
                 _0x2060045:
                 _0x2060041:
                 _0x2060030:
000a68 85ef      	LDD  R30,Y+15
000a69 70e7      	ANDI R30,LOW(0x7)
000a6a 2f3e      	MOV  R19,R30
                 _0x2060049:
000a6b 85ed      	LDD  R30,Y+13
000a6c 30e0      	CPI  R30,0
000a6d f409      	BRNE PC+2
000a6e c152      	RJMP _0x206004B
000a6f 85ea      	LDD  R30,Y+10
000a70 85fb      	LDD  R31,Y+10+1
000a71 83ee      	STD  Y+6,R30
000a72 83ff      	STD  Y+6+1,R31
000a73 e010      	LDI  R17,LOW(0)
000a74 8908      	LDD  R16,Y+16
000a75 3030      	CPI  R19,0
000a76 f009      	BREQ PC+2
000a77 c066      	RJMP _0x206004C
000a78 85ad      	LDD  R26,Y+13
000a79 30a8      	CPI  R26,LOW(0x8)
000a7a f408      	BRSH PC+2
000a7b c05d      	RJMP _0x206004D
000a7c 85e9      	LDD  R30,Y+9
000a7d 30e0      	CPI  R30,0
000a7e f011      	BREQ _0x2060052
000a7f 30e3      	CPI  R30,LOW(0x3)
000a80 f409      	BRNE _0x2060053
                 _0x2060052:
000a81 c002      	RJMP _0x2060054
                 _0x2060053:
000a82 30e7      	CPI  R30,LOW(0x7)
000a83 f409      	BRNE _0x2060055
                 _0x2060054:
000a84 c002      	RJMP _0x2060056
                 _0x2060055:
000a85 30e8      	CPI  R30,LOW(0x8)
000a86 f409      	BRNE _0x2060057
                 _0x2060056:
000a87 c002      	RJMP _0x2060058
                 _0x2060057:
000a88 30e9      	CPI  R30,LOW(0x9)
000a89 f409      	BRNE _0x2060059
                 _0x2060058:
000a8a c002      	RJMP _0x206005A
                 _0x2060059:
000a8b 30ea      	CPI  R30,LOW(0xA)
000a8c f421      	BRNE _0x206005B
                 _0x206005A:
000a8d 930a      	ST   -Y,R16
000a8e 89a8      	LDD  R26,Y+16
000a8f de26      	RCALL _pcd8544_gotoxy
000a90 c004      	RJMP _0x2060050
                 _0x206005B:
000a91 30e6      	CPI  R30,LOW(0x6)
000a92 f411      	BRNE _0x2060050
000a93 940e 1160 	CALL SUBOPT_0x31
                 _0x2060050:
                 _0x206005D:
000a95 931f      	PUSH R17
000a96 5f1f      	SUBI R17,-1
000a97 85ee      	LDD  R30,Y+14
000a98 91af      	POP  R26
000a99 17ae      	CP   R26,R30
000a9a f5b8      	BRSH _0x206005F
000a9b 85a9      	LDD  R26,Y+9
000a9c 30a6      	CPI  R26,LOW(0x6)
000a9d f469      	BRNE _0x2060060
000a9e 940e 1164 	CALL SUBOPT_0x32
000aa0 93fa      	ST   -Y,R31
000aa1 93ea      	ST   -Y,R30
000aa2 940e 114b 	CALL SUBOPT_0x2E
000aa4 9731      	SBIW R30,1
000aa5 58e4      	SUBI R30,LOW(-_gfx_buffer_G103)
000aa6 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000aa7 81a0      	LD   R26,Z
000aa8 940e 0ff6 	CALL _glcd_writemem
000aaa c026      	RJMP _0x2060061
                 _0x2060060:
000aab 85e9      	LDD  R30,Y+9
000aac 30e9      	CPI  R30,LOW(0x9)
000aad f411      	BRNE _0x2060065
000aae e050      	LDI  R21,LOW(0)
000aaf c00e      	RJMP _0x2060066
                 _0x2060065:
000ab0 30ea      	CPI  R30,LOW(0xA)
000ab1 f411      	BRNE _0x2060064
000ab2 ef5f      	LDI  R21,LOW(255)
000ab3 c00a      	RJMP _0x2060066
                 _0x2060064:
000ab4 940e 1164 	CALL SUBOPT_0x32
000ab6 940e 116d 	CALL SUBOPT_0x33
000ab8 2f5e      	MOV  R21,R30
000ab9 85e9      	LDD  R30,Y+9
000aba 30e7      	CPI  R30,LOW(0x7)
000abb f011      	BREQ _0x206006D
000abc 30e8      	CPI  R30,LOW(0x8)
000abd f421      	BRNE _0x206006E
                 _0x206006D:
                 _0x2060066:
000abe 940e 1173 	CALL SUBOPT_0x34
000ac0 2f5e      	MOV  R21,R30
000ac1 c006      	RJMP _0x206006F
                 _0x206006E:
000ac2 30e3      	CPI  R30,LOW(0x3)
000ac3 f411      	BRNE _0x2060071
000ac4 9550      	COM  R21
000ac5 c002      	RJMP _0x2060072
                 _0x2060071:
000ac6 30e0      	CPI  R30,0
000ac7 f419      	BRNE _0x2060074
                 _0x2060072:
                 _0x206006F:
000ac8 2fa5      	MOV  R26,R21
000ac9 ddd0      	RCALL _pcd8544_wrdata_G103
000aca c006      	RJMP _0x206006B
                 _0x2060074:
000acb 940e 1177 	CALL SUBOPT_0x35
000acd efef      	LDI  R30,LOW(255)
000ace 93ea      	ST   -Y,R30
000acf 85ad      	LDD  R26,Y+13
000ad0 ded1      	RCALL _pcd8544_wrmasked_G103
                 _0x206006B:
                 _0x2060061:
000ad1 cfc3      	RJMP _0x206005D
                 _0x206005F:
000ad2 85ef      	LDD  R30,Y+15
000ad3 5fe8      	SUBI R30,-LOW(8)
000ad4 87ef      	STD  Y+15,R30
000ad5 85ed      	LDD  R30,Y+13
000ad6 50e8      	SUBI R30,LOW(8)
000ad7 87ed      	STD  Y+13,R30
000ad8 c0df      	RJMP _0x2060075
                 _0x206004D:
000ad9 855d      	LDD  R21,Y+13
000ada e020      	LDI  R18,LOW(0)
000adb e0e0      	LDI  R30,LOW(0)
000adc 87ed      	STD  Y+13,R30
000add c081      	RJMP _0x2060076
                 _0x206004C:
000ade 2fe3      	MOV  R30,R19
000adf 85ad      	LDD  R26,Y+13
000ae0 0fae      	ADD  R26,R30
000ae1 30a9      	CPI  R26,LOW(0x9)
000ae2 f420      	BRSH _0x2060077
000ae3 852d      	LDD  R18,Y+13
000ae4 e0e0      	LDI  R30,LOW(0)
000ae5 87ed      	STD  Y+13,R30
000ae6 c003      	RJMP _0x2060078
                 _0x2060077:
000ae7 e0e8      	LDI  R30,LOW(8)
000ae8 1be3      	SUB  R30,R19
000ae9 2f2e      	MOV  R18,R30
                 _0x2060078:
000aea 933a      	ST   -Y,R19
000aeb 2fa2      	MOV  R26,R18
000aec 940e 0fa4 	CALL _glcd_getmask
000aee 2f4e      	MOV  R20,R30
000aef 85e9      	LDD  R30,Y+9
000af0 30e6      	CPI  R30,LOW(0x6)
000af1 f529      	BRNE _0x206007C
000af2 940e 1160 	CALL SUBOPT_0x31
                 _0x206007D:
000af4 931f      	PUSH R17
000af5 5f1f      	SUBI R17,-1
000af6 85ee      	LDD  R30,Y+14
000af7 91af      	POP  R26
000af8 17ae      	CP   R26,R30
000af9 f4e0      	BRSH _0x206007F
000afa 940e 114b 	CALL SUBOPT_0x2E
000afc 9731      	SBIW R30,1
000afd 58e4      	SUBI R30,LOW(-_gfx_buffer_G103)
000afe 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000aff 81e0      	LD   R30,Z
000b00 23e4      	AND  R30,R20
000b01 2fae      	MOV  R26,R30
000b02 2fe3      	MOV  R30,R19
000b03 940e 1263 	CALL __LSRB12
000b05 940e 117d 	CALL SUBOPT_0x36
000b07 2fe3      	MOV  R30,R19
000b08 2fa4      	MOV  R26,R20
000b09 940e 1263 	CALL __LSRB12
000b0b 95e0      	COM  R30
000b0c 21e1      	AND  R30,R1
000b0d 2b5e      	OR   R21,R30
000b0e 940e 1164 	CALL SUBOPT_0x32
000b10 93fa      	ST   -Y,R31
000b11 93ea      	ST   -Y,R30
000b12 2fa5      	MOV  R26,R21
000b13 940e 0ff6 	CALL _glcd_writemem
000b15 cfde      	RJMP _0x206007D
                 _0x206007F:
000b16 c02c      	RJMP _0x206007B
                 _0x206007C:
000b17 30e9      	CPI  R30,LOW(0x9)
000b18 f411      	BRNE _0x2060080
000b19 e050      	LDI  R21,LOW(0)
000b1a c003      	RJMP _0x2060081
                 _0x2060080:
000b1b 30ea      	CPI  R30,LOW(0xA)
000b1c f4a9      	BRNE _0x2060087
000b1d ef5f      	LDI  R21,LOW(255)
                 _0x2060081:
000b1e 940e 1173 	CALL SUBOPT_0x34
000b20 2fae      	MOV  R26,R30
000b21 2fe3      	MOV  R30,R19
000b22 940e 125b 	CALL __LSLB12
000b24 2f5e      	MOV  R21,R30
                 _0x2060084:
000b25 931f      	PUSH R17
000b26 5f1f      	SUBI R17,-1
000b27 85ee      	LDD  R30,Y+14
000b28 91af      	POP  R26
000b29 17ae      	CP   R26,R30
000b2a f430      	BRSH _0x2060086
000b2b 940e 1177 	CALL SUBOPT_0x35
000b2d 934a      	ST   -Y,R20
000b2e e0a0      	LDI  R26,LOW(0)
000b2f de72      	RCALL _pcd8544_wrmasked_G103
000b30 cff4      	RJMP _0x2060084
                 _0x2060086:
000b31 c011      	RJMP _0x206007B
                 _0x2060087:
                 _0x2060088:
000b32 931f      	PUSH R17
000b33 5f1f      	SUBI R17,-1
000b34 85ee      	LDD  R30,Y+14
000b35 91af      	POP  R26
000b36 17ae      	CP   R26,R30
000b37 f458      	BRSH _0x206008A
000b38 940e 1188 	CALL SUBOPT_0x37
000b3a 2fae      	MOV  R26,R30
000b3b 2fe3      	MOV  R30,R19
000b3c 940e 125b 	CALL __LSLB12
000b3e 93ea      	ST   -Y,R30
000b3f 934a      	ST   -Y,R20
000b40 85ad      	LDD  R26,Y+13
000b41 de60      	RCALL _pcd8544_wrmasked_G103
000b42 cfef      	RJMP _0x2060088
                 _0x206008A:
                 _0x206007B:
000b43 85ed      	LDD  R30,Y+13
000b44 30e0      	CPI  R30,0
000b45 f409      	BRNE _0x206008B
000b46 c07a      	RJMP _0x206004B
                 _0x206008B:
000b47 85ad      	LDD  R26,Y+13
000b48 30a8      	CPI  R26,LOW(0x8)
000b49 f428      	BRSH _0x206008C
000b4a 85ed      	LDD  R30,Y+13
000b4b 1be2      	SUB  R30,R18
000b4c 2f5e      	MOV  R21,R30
000b4d e0e0      	LDI  R30,LOW(0)
000b4e c003      	RJMP _0x20600A1
                 _0x206008C:
000b4f 2f53      	MOV  R21,R19
000b50 85ed      	LDD  R30,Y+13
000b51 50e8      	SUBI R30,LOW(8)
                 _0x20600A1:
000b52 87ed      	STD  Y+13,R30
000b53 e010      	LDI  R17,LOW(0)
000b54 85ef      	LDD  R30,Y+15
000b55 5fe8      	SUBI R30,-LOW(8)
000b56 87ef      	STD  Y+15,R30
000b57 e0e8      	LDI  R30,LOW(8)
000b58 1be3      	SUB  R30,R19
000b59 2f2e      	MOV  R18,R30
000b5a 8908      	LDD  R16,Y+16
000b5b 85ea      	LDD  R30,Y+10
000b5c 85fb      	LDD  R31,Y+10+1
000b5d 83ee      	STD  Y+6,R30
000b5e 83ff      	STD  Y+6+1,R31
                 _0x2060076:
000b5f 2fe5      	MOV  R30,R21
000b60 e0f0      	LDI  R31,0
000b61 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000b62 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000b63 9144      	LPM  R20,Z
000b64 85e9      	LDD  R30,Y+9
000b65 30e6      	CPI  R30,LOW(0x6)
000b66 f529      	BRNE _0x2060091
000b67 940e 1160 	CALL SUBOPT_0x31
                 _0x2060092:
000b69 931f      	PUSH R17
000b6a 5f1f      	SUBI R17,-1
000b6b 85ee      	LDD  R30,Y+14
000b6c 91af      	POP  R26
000b6d 17ae      	CP   R26,R30
000b6e f4e0      	BRSH _0x2060094
000b6f 940e 114b 	CALL SUBOPT_0x2E
000b71 9731      	SBIW R30,1
000b72 58e4      	SUBI R30,LOW(-_gfx_buffer_G103)
000b73 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000b74 81e0      	LD   R30,Z
000b75 23e4      	AND  R30,R20
000b76 2fae      	MOV  R26,R30
000b77 2fe2      	MOV  R30,R18
000b78 940e 125b 	CALL __LSLB12
000b7a 940e 117d 	CALL SUBOPT_0x36
000b7c 2fe2      	MOV  R30,R18
000b7d 2fa4      	MOV  R26,R20
000b7e 940e 125b 	CALL __LSLB12
000b80 95e0      	COM  R30
000b81 21e1      	AND  R30,R1
000b82 2b5e      	OR   R21,R30
000b83 940e 1164 	CALL SUBOPT_0x32
000b85 93fa      	ST   -Y,R31
000b86 93ea      	ST   -Y,R30
000b87 2fa5      	MOV  R26,R21
000b88 940e 0ff6 	CALL _glcd_writemem
000b8a cfde      	RJMP _0x2060092
                 _0x2060094:
000b8b c02c      	RJMP _0x2060090
                 _0x2060091:
000b8c 30e9      	CPI  R30,LOW(0x9)
000b8d f411      	BRNE _0x2060095
000b8e e050      	LDI  R21,LOW(0)
000b8f c003      	RJMP _0x2060096
                 _0x2060095:
000b90 30ea      	CPI  R30,LOW(0xA)
000b91 f4a9      	BRNE _0x206009C
000b92 ef5f      	LDI  R21,LOW(255)
                 _0x2060096:
000b93 940e 1173 	CALL SUBOPT_0x34
000b95 2fae      	MOV  R26,R30
000b96 2fe2      	MOV  R30,R18
000b97 940e 1263 	CALL __LSRB12
000b99 2f5e      	MOV  R21,R30
                 _0x2060099:
000b9a 931f      	PUSH R17
000b9b 5f1f      	SUBI R17,-1
000b9c 85ee      	LDD  R30,Y+14
000b9d 91af      	POP  R26
000b9e 17ae      	CP   R26,R30
000b9f f430      	BRSH _0x206009B
000ba0 940e 1177 	CALL SUBOPT_0x35
000ba2 934a      	ST   -Y,R20
000ba3 e0a0      	LDI  R26,LOW(0)
000ba4 ddfd      	RCALL _pcd8544_wrmasked_G103
000ba5 cff4      	RJMP _0x2060099
                 _0x206009B:
000ba6 c011      	RJMP _0x2060090
                 _0x206009C:
                 _0x206009D:
000ba7 931f      	PUSH R17
000ba8 5f1f      	SUBI R17,-1
000ba9 85ee      	LDD  R30,Y+14
000baa 91af      	POP  R26
000bab 17ae      	CP   R26,R30
000bac f458      	BRSH _0x206009F
000bad 940e 1188 	CALL SUBOPT_0x37
000baf 2fae      	MOV  R26,R30
000bb0 2fe2      	MOV  R30,R18
000bb1 940e 1263 	CALL __LSRB12
000bb3 93ea      	ST   -Y,R30
000bb4 934a      	ST   -Y,R20
000bb5 85ad      	LDD  R26,Y+13
000bb6 ddeb      	RCALL _pcd8544_wrmasked_G103
000bb7 cfef      	RJMP _0x206009D
                 _0x206009F:
                 _0x2060090:
                 _0x2060075:
000bb8 85e8      	LDD  R30,Y+8
000bb9 85aa      	LDD  R26,Y+10
000bba 85bb      	LDD  R27,Y+10+1
000bbb e0f0      	LDI  R31,0
000bbc 0fea      	ADD  R30,R26
000bbd 1ffb      	ADC  R31,R27
000bbe 87ea      	STD  Y+10,R30
000bbf 87fb      	STD  Y+10+1,R31
000bc0 ceaa      	RJMP _0x2060049
                 _0x206004B:
                 _0x2160009:
000bc1 940e 12dd 	CALL __LOADLOCR6
000bc3 9661      	ADIW R28,17
000bc4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000bc5 940e 1029 	CALL SUBOPT_0x4
000bc7 940e 12d2 	CALL __CPW02
000bc9 f024      	BRLT _0x2080003
000bca e0e0      	LDI  R30,LOW(0)
000bcb e0f0      	LDI  R31,HIGH(0)
000bcc 940c 0fad 	JMP  _0x2160002
                 _0x2080003:
000bce 81a8      	LD   R26,Y
000bcf 81b9      	LDD  R27,Y+1
000bd0 35a4      	CPI  R26,LOW(0x54)
000bd1 e0e0      	LDI  R30,HIGH(0x54)
000bd2 07be      	CPC  R27,R30
000bd3 f024      	BRLT _0x2080004
000bd4 e5e3      	LDI  R30,LOW(83)
000bd5 e0f0      	LDI  R31,HIGH(83)
000bd6 940c 0fad 	JMP  _0x2160002
                 _0x2080004:
000bd8 81e8      	LD   R30,Y
000bd9 81f9      	LDD  R31,Y+1
000bda 940c 0fad 	JMP  _0x2160002
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000bdc 940e 1029 	CALL SUBOPT_0x4
000bde 940e 12d2 	CALL __CPW02
000be0 f024      	BRLT _0x2080005
000be1 e0e0      	LDI  R30,LOW(0)
000be2 e0f0      	LDI  R31,HIGH(0)
000be3 940c 0fad 	JMP  _0x2160002
                 _0x2080005:
000be5 81a8      	LD   R26,Y
000be6 81b9      	LDD  R27,Y+1
000be7 97d0      	SBIW R26,48
000be8 f024      	BRLT _0x2080006
000be9 e2ef      	LDI  R30,LOW(47)
000bea e0f0      	LDI  R31,HIGH(47)
000beb 940c 0fad 	JMP  _0x2160002
                 _0x2080006:
000bed 81e8      	LD   R30,Y
000bee 81f9      	LDD  R31,Y+1
000bef 940c 0fad 	JMP  _0x2160002
                 ; .FEND
                 _glcd_getcharw_G104:
                 ; .FSTART _glcd_getcharw_G104
000bf1 93ba      	ST   -Y,R27
000bf2 93aa      	ST   -Y,R26
000bf3 9723      	SBIW R28,3
000bf4 940e 1195 	CALL SUBOPT_0x38
000bf6 018f      	MOVW R16,R30
000bf7 2e00      	MOV  R0,R16
000bf8 2a01      	OR   R0,R17
000bf9 f419      	BRNE _0x208000B
000bfa e0e0      	LDI  R30,LOW(0)
000bfb e0f0      	LDI  R31,HIGH(0)
000bfc c05f      	RJMP _0x2160008
                 _0x208000B:
000bfd 940e 119c 	CALL SUBOPT_0x39
000bff 820f      	STD  Y+7,R0
000c00 940e 119c 	CALL SUBOPT_0x39
000c02 820e      	STD  Y+6,R0
000c03 940e 119c 	CALL SUBOPT_0x39
000c05 8608      	STD  Y+8,R0
000c06 85eb      	LDD  R30,Y+11
000c07 85a8      	LDD  R26,Y+8
000c08 17ea      	CP   R30,R26
000c09 f418      	BRSH _0x208000C
000c0a e0e0      	LDI  R30,LOW(0)
000c0b e0f0      	LDI  R31,HIGH(0)
000c0c c04f      	RJMP _0x2160008
                 _0x208000C:
000c0d 01f8      	MOVW R30,R16
                +
000c0e 5f0f     +SUBI R16 , LOW ( - 1 )
000c0f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c10 9154      	LPM  R21,Z
000c11 85a8      	LDD  R26,Y+8
000c12 27bb      	CLR  R27
000c13 27ee      	CLR  R30
000c14 0fa5      	ADD  R26,R21
000c15 1fbe      	ADC  R27,R30
000c16 85eb      	LDD  R30,Y+11
000c17 e0f0      	LDI  R31,0
000c18 17ea      	CP   R30,R26
000c19 07fb      	CPC  R31,R27
000c1a f018      	BRLO _0x208000D
000c1b e0e0      	LDI  R30,LOW(0)
000c1c e0f0      	LDI  R31,HIGH(0)
000c1d c03e      	RJMP _0x2160008
                 _0x208000D:
000c1e 81ee      	LDD  R30,Y+6
000c1f 95e6      	LSR  R30
000c20 95e6      	LSR  R30
000c21 95e6      	LSR  R30
000c22 2f4e      	MOV  R20,R30
000c23 81ee      	LDD  R30,Y+6
000c24 70e7      	ANDI R30,LOW(0x7)
000c25 f009      	BREQ _0x208000E
000c26 5f4f      	SUBI R20,-LOW(1)
                 _0x208000E:
000c27 81ef      	LDD  R30,Y+7
000c28 30e0      	CPI  R30,0
000c29 f0a1      	BREQ _0x208000F
000c2a 85a9      	LDD  R26,Y+9
000c2b 85ba      	LDD  R27,Y+9+1
000c2c 93ec      	ST   X,R30
000c2d 85a8      	LDD  R26,Y+8
000c2e 85eb      	LDD  R30,Y+11
000c2f 1bea      	SUB  R30,R26
000c30 e0f0      	LDI  R31,0
000c31 01df      	MOVW R26,R30
000c32 81ef      	LDD  R30,Y+7
000c33 e0f0      	LDI  R31,0
000c34 940e 1270 	CALL __MULW12U
000c36 01df      	MOVW R26,R30
000c37 2fe4      	MOV  R30,R20
000c38 e0f0      	LDI  R31,0
000c39 940e 1270 	CALL __MULW12U
000c3b 0fe0      	ADD  R30,R16
000c3c 1ff1      	ADC  R31,R17
000c3d c01e      	RJMP _0x2160008
                 _0x208000F:
000c3e 0198      	MOVW R18,R16
000c3f 2fe5      	MOV  R30,R21
000c40 e0f0      	LDI  R31,0
                +
000c41 0f0e     +ADD R16 , R30
000c42 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2080010:
000c43 85a8      	LDD  R26,Y+8
000c44 5faf      	SUBI R26,-LOW(1)
000c45 87a8      	STD  Y+8,R26
000c46 50a1      	SUBI R26,LOW(1)
000c47 85eb      	LDD  R30,Y+11
000c48 17ae      	CP   R26,R30
000c49 f460      	BRSH _0x2080012
000c4a 01f9      	MOVW R30,R18
                +
000c4b 5f2f     +SUBI R18 , LOW ( - 1 )
000c4c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000c4d 91a4      	LPM  R26,Z
000c4e e0b0      	LDI  R27,0
000c4f 2fe4      	MOV  R30,R20
000c50 e0f0      	LDI  R31,0
000c51 940e 1270 	CALL __MULW12U
                +
000c53 0f0e     +ADD R16 , R30
000c54 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000c55 cfed      	RJMP _0x2080010
                 _0x2080012:
000c56 01f9      	MOVW R30,R18
000c57 91e4      	LPM  R30,Z
000c58 85a9      	LDD  R26,Y+9
000c59 85ba      	LDD  R27,Y+9+1
000c5a 93ec      	ST   X,R30
000c5b 01f8      	MOVW R30,R16
                 _0x2160008:
000c5c 940e 12dd 	CALL __LOADLOCR6
000c5e 962c      	ADIW R28,12
000c5f 9508      	RET
                 ; .FEND
                 _glcd_new_line_G104:
                 ; .FSTART _glcd_new_line_G104
000c60 e0e0      	LDI  R30,LOW(0)
                +
000c61 93e0 068d+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000c63 91a0 068e+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000c65 27bb      	CLR  R27
000c66 940e 11a1 	CALL SUBOPT_0x3A
000c68 e0f0      	LDI  R31,0
000c69 0fae      	ADD  R26,R30
000c6a 1fbf      	ADC  R27,R31
                +
000c6b 91e0 0692+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000c6d e0f0      	LDI  R31,0
000c6e 0fae      	ADD  R26,R30
000c6f 1fbf      	ADC  R27,R31
000c70 df6b      	RCALL _glcd_clipy
                +
000c71 93e0 068e+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000c73 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000c74 93aa      	ST   -Y,R26
000c75 9721      	SBIW R28,1
000c76 940e 1195 	CALL SUBOPT_0x38
000c78 9730      	SBIW R30,0
000c79 f409      	BRNE PC+2
000c7a c055      	RJMP _0x208001F
000c7b 81af      	LDD  R26,Y+7
000c7c 30aa      	CPI  R26,LOW(0xA)
000c7d f409      	BRNE _0x2080020
000c7e c04f      	RJMP _0x2080021
                 _0x2080020:
000c7f 81ef      	LDD  R30,Y+7
000c80 93ea      	ST   -Y,R30
000c81 01de      	MOVW R26,R28
000c82 9617      	ADIW R26,7
000c83 df6d      	RCALL _glcd_getcharw_G104
000c84 01af      	MOVW R20,R30
000c85 9730      	SBIW R30,0
000c86 f409      	BRNE _0x2080022
000c87 c04a      	RJMP _0x2160007
                 _0x2080022:
                +
000c88 91e0 0691+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000c8a 81ae      	LDD  R26,Y+6
000c8b 0fea      	ADD  R30,R26
000c8c 2f3e      	MOV  R19,R30
                +
000c8d 91a0 068d+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000c8f 27bb      	CLR  R27
000c90 e0f0      	LDI  R31,0
000c91 0fea      	ADD  R30,R26
000c92 1ffb      	ADC  R31,R27
000c93 018f      	MOVW R16,R30
                +
000c94 3505     +CPI R16 , LOW ( 85 )
000c95 e0e0     +LDI R30 , HIGH ( 85 )
000c96 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
000c97 f018      	BRLO _0x2080023
000c98 2f03      	MOV  R16,R19
000c99 2711      	CLR  R17
000c9a dfc5      	RCALL _glcd_new_line_G104
                 _0x2080023:
                +
000c9b 91e0 068d+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000c9d 93ea      	ST   -Y,R30
                +
000c9e 91e0 068e+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000ca0 93ea      	ST   -Y,R30
000ca1 85e8      	LDD  R30,Y+8
000ca2 93ea      	ST   -Y,R30
000ca3 940e 11a1 	CALL SUBOPT_0x3A
000ca5 93ea      	ST   -Y,R30
000ca6 e0e1      	LDI  R30,LOW(1)
000ca7 93ea      	ST   -Y,R30
000ca8 935a      	ST   -Y,R21
000ca9 934a      	ST   -Y,R20
000caa e0a7      	LDI  R26,LOW(7)
000cab dd2f      	RCALL _glcd_block
                +
000cac 91e0 068d+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000cae 81ae      	LDD  R26,Y+6
000caf 0fea      	ADD  R30,R26
000cb0 93ea      	ST   -Y,R30
                +
000cb1 91e0 068e+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000cb3 93ea      	ST   -Y,R30
                +
000cb4 91e0 0691+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000cb6 93ea      	ST   -Y,R30
000cb7 940e 11a1 	CALL SUBOPT_0x3A
000cb9 940e 11a8 	CALL SUBOPT_0x3B
                +
000cbb 91e0 068d+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000cbd 93ea      	ST   -Y,R30
                +
000cbe 91a0 068e+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000cc0 940e 11a1 	CALL SUBOPT_0x3A
000cc2 0fea      	ADD  R30,R26
000cc3 93ea      	ST   -Y,R30
000cc4 933a      	ST   -Y,R19
                +
000cc5 91e0 0692+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000cc7 940e 11a8 	CALL SUBOPT_0x3B
000cc9 e5e4      	LDI  R30,LOW(84)
000cca e0f0      	LDI  R31,HIGH(84)
000ccb 17e0      	CP   R30,R16
000ccc 07f1      	CPC  R31,R17
000ccd f411      	BRNE _0x2080024
                 _0x2080021:
000cce df91      	RCALL _glcd_new_line_G104
000ccf c002      	RJMP _0x2160007
                 _0x2080024:
                 _0x208001F:
                +
000cd0 9300 068d+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2160007:
000cd2 940e 12dd 	CALL __LOADLOCR6
000cd4 9628      	ADIW R28,8
000cd5 9508      	RET
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000cd6 93ba      	ST   -Y,R27
000cd7 93aa      	ST   -Y,R26
000cd8 931a      	ST   -Y,R17
                 _0x208002E:
000cd9 81a9      	LDD  R26,Y+1
000cda 81ba      	LDD  R27,Y+1+1
000cdb 91ed      	LD   R30,X+
000cdc 83a9      	STD  Y+1,R26
000cdd 83ba      	STD  Y+1+1,R27
000cde 2f1e      	MOV  R17,R30
000cdf 30e0      	CPI  R30,0
000ce0 f019      	BREQ _0x2080030
000ce1 2fa1      	MOV  R26,R17
000ce2 df91      	RCALL _glcd_putchar
000ce3 cff5      	RJMP _0x208002E
                 _0x2080030:
000ce4 8118      	LDD  R17,Y+0
000ce5 c30e      	RJMP _0x2160001
                 ; .FEND
                 _glcd_putpixelm_G104:
                 ; .FSTART _glcd_putpixelm_G104
000ce6 93aa      	ST   -Y,R26
000ce7 81ea      	LDD  R30,Y+2
000ce8 93ea      	ST   -Y,R30
000ce9 81ea      	LDD  R30,Y+2
000cea 93ea      	ST   -Y,R30
                +
000ceb 91e0 0694+LDS R30 , _glcd_state + ( 9 )
                 	__GETB1MN _glcd_state,9
000ced 81aa      	LDD  R26,Y+2
000cee 23ea      	AND  R30,R26
000cef f019      	BREQ _0x208003E
000cf0 91e0 068b 	LDS  R30,_glcd_state
000cf2 c002      	RJMP _0x208003F
                 _0x208003E:
                +
000cf3 91e0 068c+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
                 _0x208003F:
000cf5 2fae      	MOV  R26,R30
000cf6 dc89      	RCALL _glcd_putpixel
000cf7 81e8      	LD   R30,Y
000cf8 0fee      	LSL  R30
000cf9 83e8      	ST   Y,R30
000cfa 30e0      	CPI  R30,0
000cfb f411      	BRNE _0x2080041
000cfc e0e1      	LDI  R30,LOW(1)
000cfd 83e8      	ST   Y,R30
                 _0x2080041:
000cfe 81e8      	LD   R30,Y
000cff c2f4      	RJMP _0x2160001
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000d00 93aa      	ST   -Y,R26
000d01 81a9      	LDD  R26,Y+1
000d02 27bb      	CLR  R27
000d03 dec1      	RCALL _glcd_clipx
                +
000d04 93e0 068d+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000d06 81a8      	LD   R26,Y
000d07 27bb      	CLR  R27
000d08 ded3      	RCALL _glcd_clipy
                +
000d09 93e0 068e+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000d0b c2a1      	RJMP _0x2160002
                 ; .FEND
                 _glcd_line:
                 ; .FSTART _glcd_line
000d0c 93aa      	ST   -Y,R26
000d0d 972b      	SBIW R28,11
000d0e 940e 12d6 	CALL __SAVELOCR6
000d10 89ac      	LDD  R26,Y+20
000d11 27bb      	CLR  R27
000d12 deb2      	RCALL _glcd_clipx
000d13 8bec      	STD  Y+20,R30
000d14 89aa      	LDD  R26,Y+18
000d15 27bb      	CLR  R27
000d16 deae      	RCALL _glcd_clipx
000d17 8bea      	STD  Y+18,R30
000d18 89ab      	LDD  R26,Y+19
000d19 27bb      	CLR  R27
000d1a dec1      	RCALL _glcd_clipy
000d1b 8beb      	STD  Y+19,R30
000d1c 89a9      	LDD  R26,Y+17
000d1d 27bb      	CLR  R27
000d1e debd      	RCALL _glcd_clipy
000d1f 8be9      	STD  Y+17,R30
000d20 89ea      	LDD  R30,Y+18
                +
000d21 93e0 068d+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000d23 89e9      	LDD  R30,Y+17
                +
000d24 93e0 068e+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000d26 e0e1      	LDI  R30,LOW(1)
000d27 87e8      	STD  Y+8,R30
000d28 89e9      	LDD  R30,Y+17
000d29 89ab      	LDD  R26,Y+19
000d2a 17ea      	CP   R30,R26
000d2b f571      	BRNE _0x2080042
000d2c 891c      	LDD  R17,Y+20
000d2d 89aa      	LDD  R26,Y+18
000d2e 171a      	CP   R17,R26
000d2f f431      	BRNE _0x2080043
000d30 931a      	ST   -Y,R17
000d31 89ec      	LDD  R30,Y+20
000d32 93ea      	ST   -Y,R30
000d33 e0a1      	LDI  R26,LOW(1)
000d34 dfb1      	RCALL _glcd_putpixelm_G104
000d35 c0c8      	RJMP _0x2160006
                 _0x2080043:
000d36 89aa      	LDD  R26,Y+18
000d37 171a      	CP   R17,R26
000d38 f430      	BRSH _0x2080044
000d39 89ea      	LDD  R30,Y+18
000d3a 1be1      	SUB  R30,R17
000d3b 2f0e      	MOV  R16,R30
                +
000d3c e041     +LDI R20 , LOW ( 1 )
000d3d e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000d3e c006      	RJMP _0x2080045
                 _0x2080044:
000d3f 89aa      	LDD  R26,Y+18
000d40 2fe1      	MOV  R30,R17
000d41 1bea      	SUB  R30,R26
000d42 2f0e      	MOV  R16,R30
                +
000d43 ef4f     +LDI R20 , LOW ( - 1 )
000d44 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
                 _0x2080045:
                 _0x2080047:
000d45 893b      	LDD  R19,Y+19
000d46 e0e0      	LDI  R30,LOW(0)
000d47 83ee      	STD  Y+6,R30
                 _0x2080049:
000d48 940e 11b2 	CALL SUBOPT_0x3C
000d4a f438      	BRSH _0x208004B
000d4b 931a      	ST   -Y,R17
000d4c 933a      	ST   -Y,R19
000d4d 9533      	INC  R19
000d4e 85aa      	LDD  R26,Y+10
000d4f df96      	RCALL _glcd_putpixelm_G104
000d50 83ef      	STD  Y+7,R30
000d51 cff6      	RJMP _0x2080049
                 _0x208004B:
000d52 81ef      	LDD  R30,Y+7
000d53 87e8      	STD  Y+8,R30
000d54 0f14      	ADD  R17,R20
000d55 2fe0      	MOV  R30,R16
000d56 5001      	SUBI R16,1
000d57 30e0      	CPI  R30,0
000d58 f761      	BRNE _0x2080047
000d59 c0a4      	RJMP _0x208004C
                 _0x2080042:
000d5a 89ea      	LDD  R30,Y+18
000d5b 89ac      	LDD  R26,Y+20
000d5c 17ea      	CP   R30,R26
000d5d f539      	BRNE _0x208004D
000d5e 893b      	LDD  R19,Y+19
000d5f 89a9      	LDD  R26,Y+17
000d60 173a      	CP   R19,R26
000d61 f430      	BRSH _0x208004E
000d62 89e9      	LDD  R30,Y+17
000d63 1be3      	SUB  R30,R19
000d64 2f2e      	MOV  R18,R30
000d65 e0e1      	LDI  R30,LOW(1)
000d66 e0f0      	LDI  R31,HIGH(1)
000d67 c006      	RJMP _0x208011B
                 _0x208004E:
000d68 89a9      	LDD  R26,Y+17
000d69 2fe3      	MOV  R30,R19
000d6a 1bea      	SUB  R30,R26
000d6b 2f2e      	MOV  R18,R30
000d6c efef      	LDI  R30,LOW(65535)
000d6d efff      	LDI  R31,HIGH(65535)
                 _0x208011B:
000d6e 87ed      	STD  Y+13,R30
000d6f 87fe      	STD  Y+13+1,R31
                 _0x2080051:
000d70 891c      	LDD  R17,Y+20
000d71 e0e0      	LDI  R30,LOW(0)
000d72 83ee      	STD  Y+6,R30
                 _0x2080053:
000d73 940e 11b2 	CALL SUBOPT_0x3C
000d75 f430      	BRSH _0x2080055
000d76 931a      	ST   -Y,R17
000d77 9513      	INC  R17
000d78 940e 11ba 	CALL SUBOPT_0x3D
000d7a 83ef      	STD  Y+7,R30
000d7b cff7      	RJMP _0x2080053
                 _0x2080055:
000d7c 81ef      	LDD  R30,Y+7
000d7d 87e8      	STD  Y+8,R30
000d7e 85ed      	LDD  R30,Y+13
000d7f 0f3e      	ADD  R19,R30
000d80 2fe2      	MOV  R30,R18
000d81 5021      	SUBI R18,1
000d82 30e0      	CPI  R30,0
000d83 f761      	BRNE _0x2080051
000d84 c079      	RJMP _0x2080056
                 _0x208004D:
000d85 e0e0      	LDI  R30,LOW(0)
000d86 83ee      	STD  Y+6,R30
                 _0x2080057:
000d87 940e 11b2 	CALL SUBOPT_0x3C
000d89 f008      	BRLO PC+2
000d8a c073      	RJMP _0x2080059
000d8b 891c      	LDD  R17,Y+20
000d8c 893b      	LDD  R19,Y+19
000d8d e0e1      	LDI  R30,LOW(1)
000d8e 2f2e      	MOV  R18,R30
000d8f 2f0e      	MOV  R16,R30
000d90 89aa      	LDD  R26,Y+18
000d91 27bb      	CLR  R27
000d92 89ec      	LDD  R30,Y+20
000d93 e0f0      	LDI  R31,0
000d94 1bae      	SUB  R26,R30
000d95 0bbf      	SBC  R27,R31
000d96 01ad      	MOVW R20,R26
000d97 2355      	TST  R21
000d98 f42a      	BRPL _0x208005A
000d99 ef0f      	LDI  R16,LOW(255)
000d9a 01fa      	MOVW R30,R20
000d9b 940e 1257 	CALL __ANEGW1
000d9d 01af      	MOVW R20,R30
                 _0x208005A:
000d9e 01fa      	MOVW R30,R20
000d9f 0fee      	LSL  R30
000da0 1fff      	ROL  R31
000da1 87ef      	STD  Y+15,R30
000da2 8bf8      	STD  Y+15+1,R31
000da3 89a9      	LDD  R26,Y+17
000da4 27bb      	CLR  R27
000da5 89eb      	LDD  R30,Y+19
000da6 e0f0      	LDI  R31,0
000da7 1bae      	SUB  R26,R30
000da8 0bbf      	SBC  R27,R31
000da9 87ad      	STD  Y+13,R26
000daa 87be      	STD  Y+13+1,R27
000dab 85ae      	LDD  R26,Y+14
000dac 23aa      	TST  R26
000dad f43a      	BRPL _0x208005B
000dae ef2f      	LDI  R18,LOW(255)
000daf 85ed      	LDD  R30,Y+13
000db0 85fe      	LDD  R31,Y+13+1
000db1 940e 1257 	CALL __ANEGW1
000db3 87ed      	STD  Y+13,R30
000db4 87fe      	STD  Y+13+1,R31
                 _0x208005B:
000db5 85ed      	LDD  R30,Y+13
000db6 85fe      	LDD  R31,Y+13+1
000db7 0fee      	LSL  R30
000db8 1fff      	ROL  R31
000db9 87eb      	STD  Y+11,R30
000dba 87fc      	STD  Y+11+1,R31
000dbb 931a      	ST   -Y,R17
000dbc 933a      	ST   -Y,R19
000dbd e0a1      	LDI  R26,LOW(1)
000dbe df27      	RCALL _glcd_putpixelm_G104
000dbf 87e8      	STD  Y+8,R30
000dc0 e0e0      	LDI  R30,LOW(0)
000dc1 87e9      	STD  Y+9,R30
000dc2 87ea      	STD  Y+9+1,R30
000dc3 85ad      	LDD  R26,Y+13
000dc4 85be      	LDD  R27,Y+13+1
000dc5 174a      	CP   R20,R26
000dc6 075b      	CPC  R21,R27
000dc7 f0bc      	BRLT _0x208005C
                 _0x208005E:
000dc8 0f10      	ADD  R17,R16
000dc9 85eb      	LDD  R30,Y+11
000dca 85fc      	LDD  R31,Y+11+1
000dcb 940e 11be 	CALL SUBOPT_0x3E
000dcd 85a9      	LDD  R26,Y+9
000dce 85ba      	LDD  R27,Y+9+1
000dcf 174a      	CP   R20,R26
000dd0 075b      	CPC  R21,R27
000dd1 f42c      	BRGE _0x2080060
000dd2 0f32      	ADD  R19,R18
000dd3 85af      	LDD  R26,Y+15
000dd4 89b8      	LDD  R27,Y+15+1
000dd5 940e 11c5 	CALL SUBOPT_0x3F
                 _0x2080060:
000dd7 931a      	ST   -Y,R17
000dd8 940e 11ba 	CALL SUBOPT_0x3D
000dda 87e8      	STD  Y+8,R30
000ddb 89ea      	LDD  R30,Y+18
000ddc 17e1      	CP   R30,R17
000ddd f751      	BRNE _0x208005E
000dde c018      	RJMP _0x2080061
                 _0x208005C:
                 _0x2080063:
000ddf 0f32      	ADD  R19,R18
000de0 85ef      	LDD  R30,Y+15
000de1 89f8      	LDD  R31,Y+15+1
000de2 940e 11be 	CALL SUBOPT_0x3E
000de4 85ed      	LDD  R30,Y+13
000de5 85fe      	LDD  R31,Y+13+1
000de6 85a9      	LDD  R26,Y+9
000de7 85ba      	LDD  R27,Y+9+1
000de8 17ea      	CP   R30,R26
000de9 07fb      	CPC  R31,R27
000dea f42c      	BRGE _0x2080065
000deb 0f10      	ADD  R17,R16
000dec 85ab      	LDD  R26,Y+11
000ded 85bc      	LDD  R27,Y+11+1
000dee 940e 11c5 	CALL SUBOPT_0x3F
                 _0x2080065:
000df0 931a      	ST   -Y,R17
000df1 940e 11ba 	CALL SUBOPT_0x3D
000df3 87e8      	STD  Y+8,R30
000df4 89e9      	LDD  R30,Y+17
000df5 17e3      	CP   R30,R19
000df6 f741      	BRNE _0x2080063
                 _0x2080061:
000df7 89eb      	LDD  R30,Y+19
000df8 5fef      	SUBI R30,-LOW(1)
000df9 8beb      	STD  Y+19,R30
000dfa 89e9      	LDD  R30,Y+17
000dfb 5fef      	SUBI R30,-LOW(1)
000dfc 8be9      	STD  Y+17,R30
000dfd cf89      	RJMP _0x2080057
                 _0x2080059:
                 _0x2080056:
                 _0x208004C:
                 _0x2160006:
000dfe 940e 12dd 	CALL __LOADLOCR6
000e00 9665      	ADIW R28,21
000e01 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G106:
                 ; .FSTART _put_buff_G106
000e02 93ba      	ST   -Y,R27
000e03 93aa      	ST   -Y,R26
000e04 931a      	ST   -Y,R17
000e05 930a      	ST   -Y,R16
000e06 81aa      	LDD  R26,Y+2
000e07 81bb      	LDD  R27,Y+2+1
000e08 9612      	ADIW R26,2
000e09 940e 129e 	CALL __GETW1P
000e0b 9730      	SBIW R30,0
000e0c f129      	BREQ _0x20C0010
000e0d 81aa      	LDD  R26,Y+2
000e0e 81bb      	LDD  R27,Y+2+1
000e0f 9614      	ADIW R26,4
000e10 940e 129e 	CALL __GETW1P
000e12 018f      	MOVW R16,R30
000e13 9730      	SBIW R30,0
000e14 f061      	BREQ _0x20C0012
                +
000e15 3002     +CPI R16 , LOW ( 2 )
000e16 e0e0     +LDI R30 , HIGH ( 2 )
000e17 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000e18 f080      	BRLO _0x20C0013
000e19 01f8      	MOVW R30,R16
000e1a 9731      	SBIW R30,1
000e1b 018f      	MOVW R16,R30
                +
000e1c 81aa     +LDD R26 , Y + 2
000e1d 81bb     +LDD R27 , Y + 2 + 1
000e1e 9614     +ADIW R26 , 4
000e1f 93ed     +ST X + , R30
000e20 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x20C0012:
000e21 81aa      	LDD  R26,Y+2
000e22 81bb      	LDD  R27,Y+2+1
000e23 9612      	ADIW R26,2
000e24 940e 1015 	CALL SUBOPT_0x0
000e26 9731      	SBIW R30,1
000e27 81ac      	LDD  R26,Y+4
000e28 83a0      	STD  Z+0,R26
                 _0x20C0013:
000e29 81aa      	LDD  R26,Y+2
000e2a 81bb      	LDD  R27,Y+2+1
000e2b 940e 129e 	CALL __GETW1P
000e2d 23ff      	TST  R31
000e2e f012      	BRMI _0x20C0014
000e2f 940e 1015 	CALL SUBOPT_0x0
                 _0x20C0014:
000e31 c006      	RJMP _0x20C0015
                 _0x20C0010:
000e32 81aa      	LDD  R26,Y+2
000e33 81bb      	LDD  R27,Y+2+1
000e34 efef      	LDI  R30,LOW(65535)
000e35 efff      	LDI  R31,HIGH(65535)
000e36 93ed      	ST   X+,R30
000e37 93fc      	ST   X,R31
                 _0x20C0015:
                 _0x2160004:
000e38 8119      	LDD  R17,Y+1
000e39 8108      	LDD  R16,Y+0
                 _0x2160005:
000e3a 9625      	ADIW R28,5
000e3b 9508      	RET
                 ; .FEND
                 __print_G106:
                 ; .FSTART __print_G106
000e3c 93ba      	ST   -Y,R27
000e3d 93aa      	ST   -Y,R26
000e3e 9726      	SBIW R28,6
000e3f 940e 12d6 	CALL __SAVELOCR6
000e41 e010      	LDI  R17,0
000e42 85ac      	LDD  R26,Y+12
000e43 85bd      	LDD  R27,Y+12+1
000e44 e0e0      	LDI  R30,LOW(0)
000e45 e0f0      	LDI  R31,HIGH(0)
000e46 93ed      	ST   X+,R30
000e47 93fc      	ST   X,R31
                 _0x20C0016:
000e48 89ea      	LDD  R30,Y+18
000e49 89fb      	LDD  R31,Y+18+1
000e4a 9631      	ADIW R30,1
000e4b 8bea      	STD  Y+18,R30
000e4c 8bfb      	STD  Y+18+1,R31
000e4d 9731      	SBIW R30,1
000e4e 91e4      	LPM  R30,Z
000e4f 2f2e      	MOV  R18,R30
000e50 30e0      	CPI  R30,0
000e51 f409      	BRNE PC+2
000e52 c115      	RJMP _0x20C0018
000e53 2fe1      	MOV  R30,R17
000e54 30e0      	CPI  R30,0
000e55 f439      	BRNE _0x20C001C
000e56 3225      	CPI  R18,37
000e57 f411      	BRNE _0x20C001D
000e58 e011      	LDI  R17,LOW(1)
000e59 c002      	RJMP _0x20C001E
                 _0x20C001D:
000e5a 940e 11cc 	CALL SUBOPT_0x40
                 _0x20C001E:
000e5c c10a      	RJMP _0x20C001B
                 _0x20C001C:
000e5d 30e1      	CPI  R30,LOW(0x1)
000e5e f4a9      	BRNE _0x20C001F
000e5f 3225      	CPI  R18,37
000e60 f419      	BRNE _0x20C0020
000e61 940e 11cc 	CALL SUBOPT_0x40
000e63 c102      	RJMP _0x20C00CC
                 _0x20C0020:
000e64 e012      	LDI  R17,LOW(2)
000e65 e040      	LDI  R20,LOW(0)
000e66 e000      	LDI  R16,LOW(0)
000e67 322d      	CPI  R18,45
000e68 f411      	BRNE _0x20C0021
000e69 e001      	LDI  R16,LOW(1)
000e6a c0fc      	RJMP _0x20C001B
                 _0x20C0021:
000e6b 322b      	CPI  R18,43
000e6c f411      	BRNE _0x20C0022
000e6d e24b      	LDI  R20,LOW(43)
000e6e c0f8      	RJMP _0x20C001B
                 _0x20C0022:
000e6f 3220      	CPI  R18,32
000e70 f411      	BRNE _0x20C0023
000e71 e240      	LDI  R20,LOW(32)
000e72 c0f4      	RJMP _0x20C001B
                 _0x20C0023:
000e73 c002      	RJMP _0x20C0024
                 _0x20C001F:
000e74 30e2      	CPI  R30,LOW(0x2)
000e75 f439      	BRNE _0x20C0025
                 _0x20C0024:
000e76 e050      	LDI  R21,LOW(0)
000e77 e013      	LDI  R17,LOW(3)
000e78 3320      	CPI  R18,48
000e79 f411      	BRNE _0x20C0026
000e7a 6800      	ORI  R16,LOW(128)
000e7b c0eb      	RJMP _0x20C001B
                 _0x20C0026:
000e7c c003      	RJMP _0x20C0027
                 _0x20C0025:
000e7d 30e3      	CPI  R30,LOW(0x3)
000e7e f009      	BREQ PC+2
000e7f c0e7      	RJMP _0x20C001B
                 _0x20C0027:
000e80 3320      	CPI  R18,48
000e81 f010      	BRLO _0x20C002A
000e82 332a      	CPI  R18,58
000e83 f008      	BRLO _0x20C002B
                 _0x20C002A:
000e84 c007      	RJMP _0x20C0029
                 _0x20C002B:
000e85 e0aa      	LDI  R26,LOW(10)
000e86 9f5a      	MUL  R21,R26
000e87 2d50      	MOV  R21,R0
000e88 2fe2      	MOV  R30,R18
000e89 53e0      	SUBI R30,LOW(48)
000e8a 0f5e      	ADD  R21,R30
000e8b c0db      	RJMP _0x20C001B
                 _0x20C0029:
000e8c 2fe2      	MOV  R30,R18
000e8d 36e3      	CPI  R30,LOW(0x63)
000e8e f449      	BRNE _0x20C002F
000e8f 940e 11d3 	CALL SUBOPT_0x41
000e91 89e8      	LDD  R30,Y+16
000e92 89f9      	LDD  R31,Y+16+1
000e93 81a4      	LDD  R26,Z+4
000e94 93aa      	ST   -Y,R26
000e95 940e 11d9 	CALL SUBOPT_0x42
000e97 c0ce      	RJMP _0x20C0030
                 _0x20C002F:
000e98 37e3      	CPI  R30,LOW(0x73)
000e99 f441      	BRNE _0x20C0032
000e9a 940e 11d3 	CALL SUBOPT_0x41
000e9c 940e 11df 	CALL SUBOPT_0x43
000e9e 940e 081f 	CALL _strlen
000ea0 2f1e      	MOV  R17,R30
000ea1 c00a      	RJMP _0x20C0033
                 _0x20C0032:
000ea2 37e0      	CPI  R30,LOW(0x70)
000ea3 f461      	BRNE _0x20C0035
000ea4 940e 11d3 	CALL SUBOPT_0x41
000ea6 940e 11df 	CALL SUBOPT_0x43
000ea8 940e 082b 	CALL _strlenf
000eaa 2f1e      	MOV  R17,R30
000eab 6008      	ORI  R16,LOW(8)
                 _0x20C0033:
000eac 6002      	ORI  R16,LOW(2)
000ead 770f      	ANDI R16,LOW(127)
000eae e030      	LDI  R19,LOW(0)
000eaf c034      	RJMP _0x20C0036
                 _0x20C0035:
000eb0 36e4      	CPI  R30,LOW(0x64)
000eb1 f011      	BREQ _0x20C0039
000eb2 36e9      	CPI  R30,LOW(0x69)
000eb3 f411      	BRNE _0x20C003A
                 _0x20C0039:
000eb4 6004      	ORI  R16,LOW(4)
000eb5 c002      	RJMP _0x20C003B
                 _0x20C003A:
000eb6 37e5      	CPI  R30,LOW(0x75)
000eb7 f431      	BRNE _0x20C003C
                 _0x20C003B:
000eb8 e7ea      	LDI  R30,LOW(_tbl10_G106*2)
000eb9 e0f2      	LDI  R31,HIGH(_tbl10_G106*2)
000eba 83ee      	STD  Y+6,R30
000ebb 83ff      	STD  Y+6+1,R31
000ebc e015      	LDI  R17,LOW(5)
000ebd c00c      	RJMP _0x20C003D
                 _0x20C003C:
000ebe 35e8      	CPI  R30,LOW(0x58)
000ebf f411      	BRNE _0x20C003F
000ec0 6008      	ORI  R16,LOW(8)
000ec1 c003      	RJMP _0x20C0040
                 _0x20C003F:
000ec2 37e8      	CPI  R30,LOW(0x78)
000ec3 f009      	BREQ PC+2
000ec4 c0a1      	RJMP _0x20C0071
                 _0x20C0040:
000ec5 e8e4      	LDI  R30,LOW(_tbl16_G106*2)
000ec6 e0f2      	LDI  R31,HIGH(_tbl16_G106*2)
000ec7 83ee      	STD  Y+6,R30
000ec8 83ff      	STD  Y+6+1,R31
000ec9 e014      	LDI  R17,LOW(4)
                 _0x20C003D:
000eca ff02      	SBRS R16,2
000ecb c014      	RJMP _0x20C0042
000ecc 940e 11d3 	CALL SUBOPT_0x41
000ece 940e 11e9 	CALL SUBOPT_0x44
000ed0 85ab      	LDD  R26,Y+11
000ed1 23aa      	TST  R26
000ed2 f43a      	BRPL _0x20C0043
000ed3 85ea      	LDD  R30,Y+10
000ed4 85fb      	LDD  R31,Y+10+1
000ed5 940e 1257 	CALL __ANEGW1
000ed7 87ea      	STD  Y+10,R30
000ed8 87fb      	STD  Y+10+1,R31
000ed9 e24d      	LDI  R20,LOW(45)
                 _0x20C0043:
000eda 3040      	CPI  R20,0
000edb f011      	BREQ _0x20C0044
000edc 5f1f      	SUBI R17,-LOW(1)
000edd c001      	RJMP _0x20C0045
                 _0x20C0044:
000ede 7f0b      	ANDI R16,LOW(251)
                 _0x20C0045:
000edf c004      	RJMP _0x20C0046
                 _0x20C0042:
000ee0 940e 11d3 	CALL SUBOPT_0x41
000ee2 940e 11e9 	CALL SUBOPT_0x44
                 _0x20C0046:
                 _0x20C0036:
000ee4 fd00      	SBRC R16,0
000ee5 c011      	RJMP _0x20C0047
                 _0x20C0048:
000ee6 1715      	CP   R17,R21
000ee7 f478      	BRSH _0x20C004A
000ee8 ff07      	SBRS R16,7
000ee9 c008      	RJMP _0x20C004B
000eea ff02      	SBRS R16,2
000eeb c004      	RJMP _0x20C004C
000eec 7f0b      	ANDI R16,LOW(251)
000eed 2f24      	MOV  R18,R20
000eee 5011      	SUBI R17,LOW(1)
000eef c001      	RJMP _0x20C004D
                 _0x20C004C:
000ef0 e320      	LDI  R18,LOW(48)
                 _0x20C004D:
000ef1 c001      	RJMP _0x20C004E
                 _0x20C004B:
000ef2 e220      	LDI  R18,LOW(32)
                 _0x20C004E:
000ef3 940e 11cc 	CALL SUBOPT_0x40
000ef5 5051      	SUBI R21,LOW(1)
000ef6 cfef      	RJMP _0x20C0048
                 _0x20C004A:
                 _0x20C0047:
000ef7 2f31      	MOV  R19,R17
000ef8 ff01      	SBRS R16,1
000ef9 c017      	RJMP _0x20C004F
                 _0x20C0050:
000efa 3030      	CPI  R19,0
000efb f0a1      	BREQ _0x20C0052
000efc ff03      	SBRS R16,3
000efd c006      	RJMP _0x20C0053
000efe 81ee      	LDD  R30,Y+6
000eff 81ff      	LDD  R31,Y+6+1
000f00 9125      	LPM  R18,Z+
000f01 83ee      	STD  Y+6,R30
000f02 83ff      	STD  Y+6+1,R31
000f03 c005      	RJMP _0x20C0054
                 _0x20C0053:
000f04 81ae      	LDD  R26,Y+6
000f05 81bf      	LDD  R27,Y+6+1
000f06 912d      	LD   R18,X+
000f07 83ae      	STD  Y+6,R26
000f08 83bf      	STD  Y+6+1,R27
                 _0x20C0054:
000f09 940e 11cc 	CALL SUBOPT_0x40
000f0b 3050      	CPI  R21,0
000f0c f009      	BREQ _0x20C0055
000f0d 5051      	SUBI R21,LOW(1)
                 _0x20C0055:
000f0e 5031      	SUBI R19,LOW(1)
000f0f cfea      	RJMP _0x20C0050
                 _0x20C0052:
000f10 c04b      	RJMP _0x20C0056
                 _0x20C004F:
                 _0x20C0058:
000f11 e320      	LDI  R18,LOW(48)
000f12 81ee      	LDD  R30,Y+6
000f13 81ff      	LDD  R31,Y+6+1
000f14 940e 12ac 	CALL __GETW1PF
000f16 87e8      	STD  Y+8,R30
000f17 87f9      	STD  Y+8+1,R31
000f18 81ee      	LDD  R30,Y+6
000f19 81ff      	LDD  R31,Y+6+1
000f1a 9632      	ADIW R30,2
000f1b 83ee      	STD  Y+6,R30
000f1c 83ff      	STD  Y+6+1,R31
                 _0x20C005A:
000f1d 85e8      	LDD  R30,Y+8
000f1e 85f9      	LDD  R31,Y+8+1
000f1f 85aa      	LDD  R26,Y+10
000f20 85bb      	LDD  R27,Y+10+1
000f21 17ae      	CP   R26,R30
000f22 07bf      	CPC  R27,R31
000f23 f050      	BRLO _0x20C005C
000f24 5f2f      	SUBI R18,-LOW(1)
000f25 85a8      	LDD  R26,Y+8
000f26 85b9      	LDD  R27,Y+8+1
000f27 85ea      	LDD  R30,Y+10
000f28 85fb      	LDD  R31,Y+10+1
000f29 1bea      	SUB  R30,R26
000f2a 0bfb      	SBC  R31,R27
000f2b 87ea      	STD  Y+10,R30
000f2c 87fb      	STD  Y+10+1,R31
000f2d cfef      	RJMP _0x20C005A
                 _0x20C005C:
000f2e 332a      	CPI  R18,58
000f2f f028      	BRLO _0x20C005D
000f30 ff03      	SBRS R16,3
000f31 c002      	RJMP _0x20C005E
000f32 5f29      	SUBI R18,-LOW(7)
000f33 c001      	RJMP _0x20C005F
                 _0x20C005E:
000f34 5d29      	SUBI R18,-LOW(39)
                 _0x20C005F:
                 _0x20C005D:
000f35 fd04      	SBRC R16,4
000f36 c01a      	RJMP _0x20C0061
000f37 3321      	CPI  R18,49
000f38 f420      	BRSH _0x20C0063
000f39 85a8      	LDD  R26,Y+8
000f3a 85b9      	LDD  R27,Y+8+1
000f3b 9711      	SBIW R26,1
000f3c f409      	BRNE _0x20C0062
                 _0x20C0063:
000f3d c009      	RJMP _0x20C00CD
                 _0x20C0062:
000f3e 1753      	CP   R21,R19
000f3f f010      	BRLO _0x20C0067
000f40 ff00      	SBRS R16,0
000f41 c001      	RJMP _0x20C0068
                 _0x20C0067:
000f42 c013      	RJMP _0x20C0066
                 _0x20C0068:
000f43 e220      	LDI  R18,LOW(32)
000f44 ff07      	SBRS R16,7
000f45 c00b      	RJMP _0x20C0069
000f46 e320      	LDI  R18,LOW(48)
                 _0x20C00CD:
000f47 6100      	ORI  R16,LOW(16)
000f48 ff02      	SBRS R16,2
000f49 c007      	RJMP _0x20C006A
000f4a 7f0b      	ANDI R16,LOW(251)
000f4b 934a      	ST   -Y,R20
000f4c 940e 11d9 	CALL SUBOPT_0x42
000f4e 3050      	CPI  R21,0
000f4f f009      	BREQ _0x20C006B
000f50 5051      	SUBI R21,LOW(1)
                 _0x20C006B:
                 _0x20C006A:
                 _0x20C0069:
                 _0x20C0061:
000f51 940e 11cc 	CALL SUBOPT_0x40
000f53 3050      	CPI  R21,0
000f54 f009      	BREQ _0x20C006C
000f55 5051      	SUBI R21,LOW(1)
                 _0x20C006C:
                 _0x20C0066:
000f56 5031      	SUBI R19,LOW(1)
000f57 85a8      	LDD  R26,Y+8
000f58 85b9      	LDD  R27,Y+8+1
000f59 9712      	SBIW R26,2
000f5a f008      	BRLO _0x20C0059
000f5b cfb5      	RJMP _0x20C0058
                 _0x20C0059:
                 _0x20C0056:
000f5c ff00      	SBRS R16,0
000f5d c008      	RJMP _0x20C006D
                 _0x20C006E:
000f5e 3050      	CPI  R21,0
000f5f f031      	BREQ _0x20C0070
000f60 5051      	SUBI R21,LOW(1)
000f61 e2e0      	LDI  R30,LOW(32)
000f62 93ea      	ST   -Y,R30
000f63 940e 11d9 	CALL SUBOPT_0x42
000f65 cff8      	RJMP _0x20C006E
                 _0x20C0070:
                 _0x20C006D:
                 _0x20C0071:
                 _0x20C0030:
                 _0x20C00CC:
000f66 e010      	LDI  R17,LOW(0)
                 _0x20C001B:
000f67 cee0      	RJMP _0x20C0016
                 _0x20C0018:
000f68 85ac      	LDD  R26,Y+12
000f69 85bd      	LDD  R27,Y+12+1
000f6a 940e 129e 	CALL __GETW1P
000f6c 940e 12dd 	CALL __LOADLOCR6
000f6e 9664      	ADIW R28,20
000f6f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000f70 92ff      	PUSH R15
000f71 2ef8      	MOV  R15,R24
000f72 9726      	SBIW R28,6
000f73 940e 12d8 	CALL __SAVELOCR4
000f75 940e 11f1 	CALL SUBOPT_0x45
000f77 9730      	SBIW R30,0
000f78 f419      	BRNE _0x20C0072
000f79 efef      	LDI  R30,LOW(65535)
000f7a efff      	LDI  R31,HIGH(65535)
000f7b c023      	RJMP _0x2160003
                 _0x20C0072:
000f7c 01de      	MOVW R26,R28
000f7d 9616      	ADIW R26,6
000f7e 940e 1253 	CALL __ADDW2R15
000f80 018d      	MOVW R16,R26
000f81 940e 11f1 	CALL SUBOPT_0x45
000f83 83ee      	STD  Y+6,R30
000f84 83ff      	STD  Y+6+1,R31
000f85 e0e0      	LDI  R30,LOW(0)
000f86 87e8      	STD  Y+8,R30
000f87 87e9      	STD  Y+8+1,R30
000f88 01de      	MOVW R26,R28
000f89 961a      	ADIW R26,10
000f8a 940e 1253 	CALL __ADDW2R15
000f8c 940e 129e 	CALL __GETW1P
000f8e 93fa      	ST   -Y,R31
000f8f 93ea      	ST   -Y,R30
000f90 931a      	ST   -Y,R17
000f91 930a      	ST   -Y,R16
000f92 e0e2      	LDI  R30,LOW(_put_buff_G106)
000f93 e0fe      	LDI  R31,HIGH(_put_buff_G106)
000f94 93fa      	ST   -Y,R31
000f95 93ea      	ST   -Y,R30
000f96 01de      	MOVW R26,R28
000f97 961a      	ADIW R26,10
000f98 dea3      	RCALL __print_G106
000f99 019f      	MOVW R18,R30
000f9a 81ae      	LDD  R26,Y+6
000f9b 81bf      	LDD  R27,Y+6+1
000f9c e0e0      	LDI  R30,LOW(0)
000f9d 93ec      	ST   X,R30
000f9e 01f9      	MOVW R30,R18
                 _0x2160003:
000f9f 940e 12df 	CALL __LOADLOCR4
000fa1 962a      	ADIW R28,10
000fa2 90ff      	POP  R15
000fa3 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000fa4 93aa      	ST   -Y,R26
000fa5 81e8      	LD   R30,Y
000fa6 e0f0      	LDI  R31,0
000fa7 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000fa8 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000fa9 91a4      	LPM  R26,Z
000faa 81e9      	LDD  R30,Y+1
000fab 940e 125b 	CALL __LSLB12
                 _0x2160002:
000fad 9622      	ADIW R28,2
000fae 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000faf 93aa      	ST   -Y,R26
000fb0 931a      	ST   -Y,R17
000fb1 81e9      	LDD  R30,Y+1
000fb2 30e7      	CPI  R30,LOW(0x7)
000fb3 f011      	BREQ _0x2140007
000fb4 30ea      	CPI  R30,LOW(0xA)
000fb5 f419      	BRNE _0x2140008
                 _0x2140007:
000fb6 9110 068b 	LDS  R17,_glcd_state
000fb8 c009      	RJMP _0x2140009
                 _0x2140008:
000fb9 30e9      	CPI  R30,LOW(0x9)
000fba f419      	BRNE _0x214000B
                +
000fbb 9110 068c+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000fbd c004      	RJMP _0x2140009
                 _0x214000B:
000fbe 30e8      	CPI  R30,LOW(0x8)
000fbf f4a1      	BRNE _0x2140005
                +
000fc0 9110 069b+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2140009:
                +
000fc2 91e0 068c+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000fc4 30e0      	CPI  R30,0
000fc5 f049      	BREQ _0x214000E
000fc6 3010      	CPI  R17,0
000fc7 f019      	BREQ _0x214000F
000fc8 efef      	LDI  R30,LOW(255)
000fc9 8118      	LDD  R17,Y+0
000fca c029      	RJMP _0x2160001
                 _0x214000F:
000fcb 81ea      	LDD  R30,Y+2
000fcc 95e0      	COM  R30
000fcd 8118      	LDD  R17,Y+0
000fce c025      	RJMP _0x2160001
                 _0x214000E:
000fcf 3010      	CPI  R17,0
000fd0 f419      	BRNE _0x2140011
000fd1 e0e0      	LDI  R30,LOW(0)
000fd2 8118      	LDD  R17,Y+0
000fd3 c020      	RJMP _0x2160001
                 _0x2140011:
                 _0x2140005:
000fd4 81ea      	LDD  R30,Y+2
000fd5 8118      	LDD  R17,Y+0
000fd6 c01d      	RJMP _0x2160001
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000fd7 93ba      	ST   -Y,R27
000fd8 93aa      	ST   -Y,R26
000fd9 81ea      	LDD  R30,Y+2
000fda 30e1      	CPI  R30,LOW(0x1)
000fdb f421      	BRNE _0x2140015
000fdc 81e8      	LD   R30,Y
000fdd 81f9      	LDD  R31,Y+1
000fde 91e4      	LPM  R30,Z
000fdf c014      	RJMP _0x2160001
                 _0x2140015:
000fe0 30e2      	CPI  R30,LOW(0x2)
000fe1 f429      	BRNE _0x2140016
000fe2 81a8      	LD   R26,Y
000fe3 81b9      	LDD  R27,Y+1
000fe4 940e 12b5 	CALL __EEPROMRDB
000fe6 c00d      	RJMP _0x2160001
                 _0x2140016:
000fe7 30e3      	CPI  R30,LOW(0x3)
000fe8 f441      	BRNE _0x2140018
000fe9 81a8      	LD   R26,Y
000fea 81b9      	LDD  R27,Y+1
                +
000feb 91e0 06a4+LDS R30 , _glcd_state + ( 25 )
000fed 91f0 06a5+LDS R31 , _glcd_state + ( 25 ) + 1
000fef 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000ff0 c003      	RJMP _0x2160001
                 _0x2140018:
000ff1 81a8      	LD   R26,Y
000ff2 81b9      	LDD  R27,Y+1
000ff3 91ec      	LD   R30,X
                 _0x2160001:
000ff4 9623      	ADIW R28,3
000ff5 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000ff6 93aa      	ST   -Y,R26
000ff7 81eb      	LDD  R30,Y+3
000ff8 30e0      	CPI  R30,0
000ff9 f429      	BRNE _0x214001C
000ffa 81e8      	LD   R30,Y
000ffb 81a9      	LDD  R26,Y+1
000ffc 81ba      	LDD  R27,Y+1+1
000ffd 93ec      	ST   X,R30
000ffe c014      	RJMP _0x214001B
                 _0x214001C:
000fff 30e2      	CPI  R30,LOW(0x2)
001000 f431      	BRNE _0x214001D
001001 81e8      	LD   R30,Y
001002 81a9      	LDD  R26,Y+1
001003 81ba      	LDD  R27,Y+1+1
001004 940e 12c1 	CALL __EEPROMWRB
001006 c00c      	RJMP _0x214001B
                 _0x214001D:
001007 30e3      	CPI  R30,LOW(0x3)
001008 f451      	BRNE _0x214001B
001009 81e9      	LDD  R30,Y+1
00100a 81fa      	LDD  R31,Y+1+1
00100b 93fa      	ST   -Y,R31
00100c 93ea      	ST   -Y,R30
00100d 81aa      	LDD  R26,Y+2
                +
00100e 91e0 06a6+LDS R30 , _glcd_state + ( 27 )
001010 91f0 06a7+LDS R31 , _glcd_state + ( 27 ) + 1
001012 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x214001B:
001013 9624      	ADIW R28,4
001014 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _glcd_state:
00068b           	.BYTE 0x1D
                 _rx_buffer0:
0006a8           	.BYTE 0x40
                 _buff:
0006e8           	.BYTE 0x104
                 _dem:
0007ec           	.BYTE 0x2
                 _count:
0007ee           	.BYTE 0x2
                 _rain_state:
0007f0           	.BYTE 0xA
                 _rain_count:
0007fa           	.BYTE 0x4
                 _start_rain:
0007fe           	.BYTE 0x1
                 _tx_buffer0:
0007ff           	.BYTE 0x40
                 _tx_wr_index0:
00083f           	.BYTE 0x1
                 _tx_rd_index0:
000840           	.BYTE 0x1
                 _tx_counter0:
000841           	.BYTE 0x1
                 _P_Add:
000842           	.BYTE 0x1
                 _Code_tay_cam1:
000843           	.BYTE 0x1
                 _Code_tay_cam2:
000844           	.BYTE 0x1
                 _Code_tay_cam3:
000845           	.BYTE 0x1
                 _Code_tay_cam4:
000846           	.BYTE 0x1
                 _station_receive:
000847           	.BYTE 0xA
                 _tay_cam_receive:
000851           	.BYTE 0x8
                 _data_receive:
000859           	.BYTE 0x12
                 _result:
00086b           	.BYTE 0x1
                 _key:
00086c           	.BYTE 0xA
                 __seed_G102:
000876           	.BYTE 0x4
                 _gfx_addr_G103:
00087a           	.BYTE 0x2
                 _gfx_buffer_G103:
00087c           	.BYTE 0x1F8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x0:
001015 91ed      	LD   R30,X+
001016 91fd      	LD   R31,X+
001017 9631      	ADIW R30,1
001018 93fe      	ST   -X,R31
001019 93ee      	ST   -X,R30
00101a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00101b 91e0 07ee 	LDS  R30,_count
00101d 91f0 07ef 	LDS  R31,_count+1
00101f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
001020 eeae      	LDI  R26,LOW(_count)
001021 e0b7      	LDI  R27,HIGH(_count)
001022 cff2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
001023 e0e0      	LDI  R30,LOW(0)
001024 93e0 07ec 	STS  _dem,R30
001026 93e0 07ed 	STS  _dem+1,R30
001028 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
001029 93ba      	ST   -Y,R27
00102a 93aa      	ST   -Y,R26
00102b 81a8      	LD   R26,Y
00102c 81b9      	LDD  R27,Y+1
00102d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00102e 1ba2      	SUB  R26,R18
00102f 0bb3      	SBC  R27,R19
001030 a5ee      	LDD  R30,Y+46
001031 a5ff      	LDD  R31,Y+46+1
001032 17ea      	CP   R30,R26
001033 07fb      	CPC  R31,R27
001034 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
001035 eee8      	LDI  R30,LOW(_buff)
001036 e0f6      	LDI  R31,HIGH(_buff)
001037 93fa      	ST   -Y,R31
001038 93ea      	ST   -Y,R30
001039 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
00103a e0e7      	LDI  R30,LOW(7)
00103b 93ea      	ST   -Y,R30
00103c e7ae      	LDI  R26,LOW(126)
00103d 940e 04a1 	CALL _RF_Write_RX
00103f eea2      	LDI  R26,LOW(226)
001040 940c 04c7 	JMP  _RF_Command_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
                +
001042 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
001043 958a     +DEC R24
001044 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
001045 81e9      	LDD  R30,Y+1
001046 0fee      	LSL  R30
001047 83e9      	STD  Y+1,R30
001048 9adc      	SBI  0x1B,4
                +
001049 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00104a 958a     +DEC R24
00104b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00104c e0e0      	LDI  R30,0
00104d 99cd      	SBIC 0x19,5
00104e e0e1      	LDI  R30,1
00104f 81a9      	LDD  R26,Y+1
001050 2bea      	OR   R30,R26
001051 83e9      	STD  Y+1,R30
001052 98dc      	CBI  0x1B,4
001053 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
001054 93aa      	ST   -Y,R26
001055 98da      	CBI  0x1B,2
001056 81e9      	LDD  R30,Y+1
001057 62e0      	ORI  R30,0x20
001058 2fae      	MOV  R26,R30
001059 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
00105a 9ada      	SBI  0x1B,2
                +
00105b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00105c 958a     +DEC R24
00105d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00105e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00105f 940e 046d 	CALL _SPI_RW_RX
001061 81a8      	LD   R26,Y
001062 940c 046d 	JMP  _SPI_RW_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
001064 940e 046d 	CALL _SPI_RW_RX
001066 91a0 0844 	LDS  R26,_Code_tay_cam2
001068 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
001069 940e 04b7 	CALL _RF_Write3_RX
00106b e1e0      	LDI  R30,LOW(16)
00106c 93ea      	ST   -Y,R30
00106d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00106e 93ea      	ST   -Y,R30
00106f e0af      	LDI  R26,LOW(15)
001070 940c 04a1 	JMP  _RF_Write_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
001072 e0f0      	LDI  R31,0
001073 93ed      	ST   X+,R30
001074 93fc      	ST   X,R31
001075 940c 0480 	JMP  _SPI_Read_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
001077 93ea      	ST   -Y,R30
001078 e3e0      	LDI  R30,LOW(48)
001079 93ea      	ST   -Y,R30
00107a e0af      	LDI  R26,LOW(15)
00107b 940e 0d0c 	CALL _glcd_line
00107d e0e0      	LDI  R30,LOW(0)
00107e 93ea      	ST   -Y,R30
00107f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
001080 93ea      	ST   -Y,R30
001081 e5e4      	LDI  R30,LOW(84)
001082 93ea      	ST   -Y,R30
001083 e3a0      	LDI  R26,LOW(48)
001084 940e 0d0c 	CALL _glcd_line
001086 e0e0      	LDI  R30,LOW(0)
001087 93ea      	ST   -Y,R30
001088 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
001089 93ea      	ST   -Y,R30
00108a e0a3      	LDI  R26,LOW(3)
00108b 940c 0d00 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
00108d 940e 0cd6 	CALL _glcd_outtext
00108f e0e4      	LDI  R30,LOW(4)
001090 93ea      	ST   -Y,R30
001091 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
001092 93ea      	ST   -Y,R30
001093 e1a2      	LDI  R26,LOW(18)
001094 940c 0d00 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
001096 93ea      	ST   -Y,R30
001097 e1ac      	LDI  R26,LOW(28)
001098 940c 0d00 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00109a 93ea      	ST   -Y,R30
00109b e2a5      	LDI  R26,LOW(37)
00109c 940c 0d00 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
00109e 936a      	ST   -Y,R22
00109f 937a      	ST   -Y,R23
0010a0 93aa      	ST   -Y,R26
0010a1 93ba      	ST   -Y,R27
0010a2 93ea      	ST   -Y,R30
0010a3 93fa      	ST   -Y,R31
0010a4 b7ef      	IN   R30,SREG
0010a5 93ea      	ST   -Y,R30
0010a6 91a0 07fe 	LDS  R26,_start_rain
0010a8 30a1      	CPI  R26,LOW(0x1)
0010a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
0010aa efaa      	LDI  R26,LOW(_rain_count)
0010ab e0b7      	LDI  R27,HIGH(_rain_count)
0010ac 940e 12a2 	CALL __GETD1P_INC
                +
0010ae 5fef     +SUBI R30 , LOW ( - 1 )
0010af 4fff     +SBCI R31 , HIGH ( - 1 )
0010b0 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0010b1 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0010b2 940e 12a7 	CALL __PUTDP1_DEC
0010b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
0010b5 93fa      	ST   -Y,R31
0010b6 93ea      	ST   -Y,R30
0010b7 e0e0      	LDI  R30,LOW(0)
0010b8 93ea      	ST   -Y,R30
0010b9 e1a4      	LDI  R26,LOW(20)
0010ba e0b0      	LDI  R27,0
0010bb 940c 07fe 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
                +
0010bd 01de     +MOVW R26 , R28
0010be 5aaf     +SUBI R26 , LOW ( - 81 )
0010bf 4fbf     +SBCI R27 , HIGH ( - 81 )
0010c0 900d     +LD R0 , X +
0010c1 91bc     +LD R27 , X
0010c2 2da0     +MOV R26 , R0
                 	__GETW2SX 81
0010c3 91ec      	LD   R30,X
0010c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0010c5 940e 03b7 	CALL _put_string
0010c7 e2ac      	LDI  R26,LOW(300)
0010c8 e0b1      	LDI  R27,HIGH(300)
0010c9 940c 1249 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1C:
0010cb 01fe      	MOVW R30,R28
0010cc 96bc      	ADIW R30,44
0010cd 93fa      	ST   -Y,R31
0010ce 93ea      	ST   -Y,R30
0010cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
0010d0 940e 080e 	CALL _strcat
0010d2 cff8      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
                +
0010d3 91e0 084d+LDS R30 , _station_receive + ( 6 )
0010d5 91f0 084e+LDS R31 , _station_receive + ( 6 ) + 1
                 	__GETW1MN _station_receive,6
0010d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
0010d8 93fa      	ST   -Y,R31
0010d9 93ea      	ST   -Y,R30
0010da 01de      	MOVW R26,R28
0010db 965a      	ADIW R26,26
0010dc 940e 084f 	CALL _itoa
0010de cfec      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
0010df 01de      	MOVW R26,R28
0010e0 965a      	ADIW R26,26
0010e1 cfee      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
0010e2 91e0 084b+LDS R30 , _station_receive + ( 4 )
0010e4 91f0 084c+LDS R31 , _station_receive + ( 4 ) + 1
                 	__GETW1MN _station_receive,4
0010e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0010e7 93fa      	ST   -Y,R31
0010e8 93ea      	ST   -Y,R30
0010e9 e0a5      	LDI  R26,LOW(5)
0010ea e0b0      	LDI  R27,0
0010eb 940c 03d7 	JMP  _wait_until
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x23:
0010ed 93fa      	ST   -Y,R31
0010ee 93ea      	ST   -Y,R30
0010ef eea8      	LDI  R26,LOW(_buff)
0010f0 e0b6      	LDI  R27,HIGH(_buff)
0010f1 940e 084f 	CALL _itoa
0010f3 eea8      	LDI  R26,LOW(_buff)
0010f4 e0b6      	LDI  R27,HIGH(_buff)
0010f5 940c 0cd6 	JMP  _glcd_outtext
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
0010f7 e0e0      	LDI  R30,LOW(0)
0010f8 93ea      	ST   -Y,R30
0010f9 e0a0      	LDI  R26,LOW(0)
0010fa 940c 0d00 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
0010fc e0e0      	LDI  R30,LOW(0)
0010fd 93e0 07fe 	STS  _start_rain,R30
0010ff 940e 0673 	CALL _print_rain
001101 e2a0      	LDI  R26,LOW(800)
001102 e0b3      	LDI  R27,HIGH(800)
001103 940e 1249 	CALL _delay_ms
001105 940c 0964 	JMP  _glcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
001107 e0e1      	LDI  R30,LOW(1)
001108 e0f0      	LDI  R31,HIGH(1)
001109 93e0 07ee 	STS  _count,R30
00110b 93f0 07ef 	STS  _count+1,R31
00110d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
00110e 940e 0513 	CALL _RF_Read_RX_3
001110 df0a      	RCALL SUBOPT_0x1
001111 91a0 0847 	LDS  R26,_station_receive
001113 91b0 0848 	LDS  R27,_station_receive+1
001115 17ea      	CP   R30,R26
001116 07fb      	CPC  R31,R27
001117 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
001118 91e0 0847 	LDS  R30,_station_receive
00111a 91f0 0848 	LDS  R31,_station_receive+1
00111c cfd0      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x29:
                +
00111d e2ea     +LDI R30 , LOW ( 2 * _0x0 + ( 364 ) )
00111e e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 364 ) )
                 	__POINTW1FN _0x0,364
00111f 93fa      	ST   -Y,R31
001120 93ea      	ST   -Y,R30
001121 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x2A:
001122 940e 126b 	CALL __CWD1
001124 940e 12b0 	CALL __PUTPARD1
001126 e084      	LDI  R24,4
001127 940e 0f70 	CALL _sprintf
001129 9628      	ADIW R28,8
00112a eea8      	LDI  R26,LOW(_buff)
00112b e0b6      	LDI  R27,HIGH(_buff)
00112c 940e 0cd6 	CALL _glcd_outtext
00112e e2ee      	LDI  R30,LOW(46)
00112f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
                +
001130 91a0 084f+LDS R26 , _station_receive + ( 8 )
001132 91b0 0850+LDS R27 , _station_receive + ( 8 ) + 1
                 	__GETW2MN _station_receive,8
001134 e0ea      	LDI  R30,LOW(10)
001135 e0f0      	LDI  R31,HIGH(10)
001136 940e 128b 	CALL __DIVW21
001138 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001139 940e 126b 	CALL __CWD1
00113b 940e 12b0 	CALL __PUTPARD1
00113d e084      	LDI  R24,4
00113e 940e 0f70 	CALL _sprintf
001140 9628      	ADIW R28,8
001141 eea8      	LDI  R26,LOW(_buff)
001142 e0b6      	LDI  R27,HIGH(_buff)
001143 940e 0cd6 	CALL _glcd_outtext
001145 cfea      	RJMP SUBOPT_0x2B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
001146 e2a0      	LDI  R26,LOW(800)
001147 e0b3      	LDI  R27,HIGH(800)
001148 940e 1249 	CALL _delay_ms
00114a ced5      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
00114b e7aa      	LDI  R26,LOW(_gfx_addr_G103)
00114c e0b8      	LDI  R27,HIGH(_gfx_addr_G103)
00114d cec7      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
00114e 0fea      	ADD  R30,R26
00114f 1ffb      	ADC  R31,R27
001150 83ee      	STD  Y+6,R30
001151 83ff      	STD  Y+6+1,R31
001152 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x30:
001153 85ec      	LDD  R30,Y+12
001154 93ea      	ST   -Y,R30
001155 81ef      	LDD  R30,Y+7
001156 85f8      	LDD  R31,Y+7+1
001157 9631      	ADIW R30,1
001158 83ef      	STD  Y+7,R30
001159 87f8      	STD  Y+7+1,R31
00115a 9731      	SBIW R30,1
00115b 93fa      	ST   -Y,R31
00115c 93ea      	ST   -Y,R30
00115d e0a0      	LDI  R26,LOW(0)
00115e 940c 0ff6 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
001160 930a      	ST   -Y,R16
001161 89a8      	LDD  R26,Y+16
001162 940c 089f 	JMP  _pcd8544_setaddr_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x32:
001164 85ec      	LDD  R30,Y+12
001165 93ea      	ST   -Y,R30
001166 81ef      	LDD  R30,Y+7
001167 85f8      	LDD  R31,Y+7+1
001168 9631      	ADIW R30,1
001169 83ef      	STD  Y+7,R30
00116a 87f8      	STD  Y+7+1,R31
00116b 9731      	SBIW R30,1
00116c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
00116d 2766      	CLR  R22
00116e 2777      	CLR  R23
00116f 01df      	MOVW R26,R30
001170 01cb      	MOVW R24,R22
001171 940c 0fd7 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
001173 935a      	ST   -Y,R21
001174 85aa      	LDD  R26,Y+10
001175 940c 0faf 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x35:
001177 930a      	ST   -Y,R16
001178 9503      	INC  R16
001179 89e8      	LDD  R30,Y+16
00117a 93ea      	ST   -Y,R30
00117b 935a      	ST   -Y,R21
00117c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
00117d 2f5e      	MOV  R21,R30
00117e 85ec      	LDD  R30,Y+12
00117f 93ea      	ST   -Y,R30
001180 81af      	LDD  R26,Y+7
001181 85b8      	LDD  R27,Y+7+1
001182 2788      	CLR  R24
001183 2799      	CLR  R25
001184 940e 0fd7 	CALL _glcd_readmem
001186 2e1e      	MOV  R1,R30
001187 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
001188 930a      	ST   -Y,R16
001189 9503      	INC  R16
00118a 89e8      	LDD  R30,Y+16
00118b 93ea      	ST   -Y,R30
00118c 85ee      	LDD  R30,Y+14
00118d 93ea      	ST   -Y,R30
00118e 85e9      	LDD  R30,Y+9
00118f 85fa      	LDD  R31,Y+9+1
001190 9631      	ADIW R30,1
001191 87e9      	STD  Y+9,R30
001192 87fa      	STD  Y+9+1,R31
001193 9731      	SBIW R30,1
001194 cfd8      	RJMP SUBOPT_0x33
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
001195 940e 12d6 	CALL __SAVELOCR6
                +
001197 91e0 068f+LDS R30 , _glcd_state + ( 4 )
001199 91f0 0690+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
00119b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
00119c 01f8      	MOVW R30,R16
                +
00119d 5f0f     +SUBI R16 , LOW ( - 1 )
00119e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00119f 9004      	LPM  R0,Z
0011a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3A:
                +
0011a1 91e0 068f+LDS R30 , _glcd_state + ( 4 )
0011a3 91f0 0690+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
0011a5 9631      	ADIW R30,1
0011a6 91e4      	LPM  R30,Z
0011a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3B:
0011a8 93ea      	ST   -Y,R30
0011a9 e0e0      	LDI  R30,LOW(0)
0011aa 93ea      	ST   -Y,R30
0011ab e0e0      	LDI  R30,LOW(0)
0011ac e0f0      	LDI  R31,HIGH(0)
0011ad 93fa      	ST   -Y,R31
0011ae 93ea      	ST   -Y,R30
0011af e0a9      	LDI  R26,LOW(9)
0011b0 940c 09db 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3C:
0011b2 81ae      	LDD  R26,Y+6
0011b3 5faf      	SUBI R26,-LOW(1)
0011b4 83ae      	STD  Y+6,R26
0011b5 50a1      	SUBI R26,LOW(1)
                +
0011b6 91e0 0693+LDS R30 , _glcd_state + ( 8 )
                 	__GETB1MN _glcd_state,8
0011b8 17ae      	CP   R26,R30
0011b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
0011ba 933a      	ST   -Y,R19
0011bb 85aa      	LDD  R26,Y+10
0011bc 940c 0ce6 	JMP  _glcd_putpixelm_G104
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
0011be 85a9      	LDD  R26,Y+9
0011bf 85ba      	LDD  R27,Y+9+1
0011c0 0fea      	ADD  R30,R26
0011c1 1ffb      	ADC  R31,R27
0011c2 87e9      	STD  Y+9,R30
0011c3 87fa      	STD  Y+9+1,R31
0011c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
0011c5 85e9      	LDD  R30,Y+9
0011c6 85fa      	LDD  R31,Y+9+1
0011c7 1bea      	SUB  R30,R26
0011c8 0bfb      	SBC  R31,R27
0011c9 87e9      	STD  Y+9,R30
0011ca 87fa      	STD  Y+9+1,R31
0011cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x40:
0011cc 932a      	ST   -Y,R18
0011cd 85ad      	LDD  R26,Y+13
0011ce 85be      	LDD  R27,Y+13+1
0011cf 85ef      	LDD  R30,Y+15
0011d0 89f8      	LDD  R31,Y+15+1
0011d1 9509      	ICALL
0011d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
0011d3 89e8      	LDD  R30,Y+16
0011d4 89f9      	LDD  R31,Y+16+1
0011d5 9734      	SBIW R30,4
0011d6 8be8      	STD  Y+16,R30
0011d7 8bf9      	STD  Y+16+1,R31
0011d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
0011d9 85ad      	LDD  R26,Y+13
0011da 85be      	LDD  R27,Y+13+1
0011db 85ef      	LDD  R30,Y+15
0011dc 89f8      	LDD  R31,Y+15+1
0011dd 9509      	ICALL
0011de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
0011df 89a8      	LDD  R26,Y+16
0011e0 89b9      	LDD  R27,Y+16+1
0011e1 9614      	ADIW R26,4
0011e2 940e 129e 	CALL __GETW1P
0011e4 83ee      	STD  Y+6,R30
0011e5 83ff      	STD  Y+6+1,R31
0011e6 81ae      	LDD  R26,Y+6
0011e7 81bf      	LDD  R27,Y+6+1
0011e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x44:
0011e9 89a8      	LDD  R26,Y+16
0011ea 89b9      	LDD  R27,Y+16+1
0011eb 9614      	ADIW R26,4
0011ec 940e 129e 	CALL __GETW1P
0011ee 87ea      	STD  Y+10,R30
0011ef 87fb      	STD  Y+10+1,R31
0011f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x45:
0011f1 01de      	MOVW R26,R28
0011f2 961c      	ADIW R26,12
0011f3 940e 1253 	CALL __ADDW2R15
0011f5 940e 129e 	CALL __GETW1P
0011f7 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0011f8 9890      	cbi  __i2c_port,__scl_bit
0011f9 9891      	cbi  __i2c_port,__sda_bit
0011fa 9a88      	sbi  __i2c_dir,__scl_bit
0011fb 9889      	cbi  __i2c_dir,__sda_bit
0011fc c015      	rjmp __i2c_delay2
                 _i2c_start:
0011fd 9889      	cbi  __i2c_dir,__sda_bit
0011fe 9888      	cbi  __i2c_dir,__scl_bit
0011ff 27ee      	clr  r30
001200 0000      	nop
001201 9b81      	sbis __i2c_pin,__sda_bit
001202 9508      	ret
001203 9b80      	sbis __i2c_pin,__scl_bit
001204 9508      	ret
001205 d004      	rcall __i2c_delay1
001206 9a89      	sbi  __i2c_dir,__sda_bit
001207 d002      	rcall __i2c_delay1
001208 9a88      	sbi  __i2c_dir,__scl_bit
001209 e0e1      	ldi  r30,1
                 __i2c_delay1:
00120a e06d      	ldi  r22,13
00120b c007      	rjmp __i2c_delay2l
                 _i2c_stop:
00120c 9a89      	sbi  __i2c_dir,__sda_bit
00120d 9a88      	sbi  __i2c_dir,__scl_bit
00120e d003      	rcall __i2c_delay2
00120f 9888      	cbi  __i2c_dir,__scl_bit
001210 dff9      	rcall __i2c_delay1
001211 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
001212 e16b      	ldi  r22,27
                 __i2c_delay2l:
001213 956a      	dec  r22
001214 f7f1      	brne __i2c_delay2l
001215 9508      	ret
                 _i2c_read:
001216 e078      	ldi  r23,8
                 __i2c_read0:
001217 9888      	cbi  __i2c_dir,__scl_bit
001218 dff1      	rcall __i2c_delay1
                 __i2c_read3:
001219 9b80      	sbis __i2c_pin,__scl_bit
00121a cffe      	rjmp __i2c_read3
00121b dfee      	rcall __i2c_delay1
00121c 9488      	clc
00121d 9981      	sbic __i2c_pin,__sda_bit
00121e 9408      	sec
00121f 9a88      	sbi  __i2c_dir,__scl_bit
001220 dff1      	rcall __i2c_delay2
001221 1fee      	rol  r30
001222 957a      	dec  r23
001223 f799      	brne __i2c_read0
001224 2f7a      	mov  r23,r26
001225 2377      	tst  r23
001226 f411      	brne __i2c_read1
001227 9889      	cbi  __i2c_dir,__sda_bit
001228 c001      	rjmp __i2c_read2
                 __i2c_read1:
001229 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00122a dfdf      	rcall __i2c_delay1
00122b 9888      	cbi  __i2c_dir,__scl_bit
00122c dfe5      	rcall __i2c_delay2
00122d 9a88      	sbi  __i2c_dir,__scl_bit
00122e dfdb      	rcall __i2c_delay1
00122f 9889      	cbi  __i2c_dir,__sda_bit
001230 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
001231 e078      	ldi  r23,8
                 __i2c_write0:
001232 0faa      	lsl  r26
001233 f410      	brcc __i2c_write1
001234 9889      	cbi  __i2c_dir,__sda_bit
001235 c001      	rjmp __i2c_write2
                 __i2c_write1:
001236 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
001237 dfda      	rcall __i2c_delay2
001238 9888      	cbi  __i2c_dir,__scl_bit
001239 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
00123a 9b80      	sbis __i2c_pin,__scl_bit
00123b cffe      	rjmp __i2c_write3
00123c dfcd      	rcall __i2c_delay1
00123d 9a88      	sbi  __i2c_dir,__scl_bit
00123e 957a      	dec  r23
00123f f791      	brne __i2c_write0
001240 9889      	cbi  __i2c_dir,__sda_bit
001241 dfc8      	rcall __i2c_delay1
001242 9888      	cbi  __i2c_dir,__scl_bit
001243 dfce      	rcall __i2c_delay2
001244 e0e1      	ldi  r30,1
001245 9981      	sbic __i2c_pin,__sda_bit
001246 27ee      	clr  r30
001247 9a88      	sbi  __i2c_dir,__scl_bit
001248 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
001249 9610      	adiw r26,0
00124a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00124b ed80     +LDI R24 , LOW ( 0x7D0 )
00124c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00124d 9701     +SBIW R24 , 1
00124e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00124f 95a8      	wdr
001250 9711      	sbiw r26,1
001251 f7c9      	brne __delay_ms0
                 __delay_ms1:
001252 9508      	ret
                 
                 __ADDW2R15:
001253 2400      	CLR  R0
001254 0daf      	ADD  R26,R15
001255 1db0      	ADC  R27,R0
001256 9508      	RET
                 
                 __ANEGW1:
001257 95f1      	NEG  R31
001258 95e1      	NEG  R30
001259 40f0      	SBCI R31,0
00125a 9508      	RET
                 
                 __LSLB12:
00125b 23ee      	TST  R30
00125c 2e0e      	MOV  R0,R30
00125d 2fea      	MOV  R30,R26
00125e f019      	BREQ __LSLB12R
                 __LSLB12L:
00125f 0fee      	LSL  R30
001260 940a      	DEC  R0
001261 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001262 9508      	RET
                 
                 __LSRB12:
001263 23ee      	TST  R30
001264 2e0e      	MOV  R0,R30
001265 2fea      	MOV  R30,R26
001266 f019      	BREQ __LSRB12R
                 __LSRB12L:
001267 95e6      	LSR  R30
001268 940a      	DEC  R0
001269 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00126a 9508      	RET
                 
                 __CWD1:
00126b 2f6f      	MOV  R22,R31
00126c 0f66      	ADD  R22,R22
00126d 0b66      	SBC  R22,R22
00126e 2f76      	MOV  R23,R22
00126f 9508      	RET
                 
                 __MULW12U:
001270 9ffa      	MUL  R31,R26
001271 2df0      	MOV  R31,R0
001272 9feb      	MUL  R30,R27
001273 0df0      	ADD  R31,R0
001274 9fea      	MUL  R30,R26
001275 2de0      	MOV  R30,R0
001276 0df1      	ADD  R31,R1
001277 9508      	RET
                 
                 __DIVW21U:
001278 2400      	CLR  R0
001279 2411      	CLR  R1
00127a e190      	LDI  R25,16
                 __DIVW21U1:
00127b 0faa      	LSL  R26
00127c 1fbb      	ROL  R27
00127d 1c00      	ROL  R0
00127e 1c11      	ROL  R1
00127f 1a0e      	SUB  R0,R30
001280 0a1f      	SBC  R1,R31
001281 f418      	BRCC __DIVW21U2
001282 0e0e      	ADD  R0,R30
001283 1e1f      	ADC  R1,R31
001284 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001285 60a1      	SBR  R26,1
                 __DIVW21U3:
001286 959a      	DEC  R25
001287 f799      	BRNE __DIVW21U1
001288 01fd      	MOVW R30,R26
001289 01d0      	MOVW R26,R0
00128a 9508      	RET
                 
                 __DIVW21:
00128b d004      	RCALL __CHKSIGNW
00128c dfeb      	RCALL __DIVW21U
00128d f40e      	BRTC __DIVW211
00128e dfc8      	RCALL __ANEGW1
                 __DIVW211:
00128f 9508      	RET
                 
                 __CHKSIGNW:
001290 94e8      	CLT
001291 fff7      	SBRS R31,7
001292 c002      	RJMP __CHKSW1
001293 dfc3      	RCALL __ANEGW1
001294 9468      	SET
                 __CHKSW1:
001295 ffb7      	SBRS R27,7
001296 c006      	RJMP __CHKSW2
001297 95a0      	COM  R26
001298 95b0      	COM  R27
001299 9611      	ADIW R26,1
00129a f800      	BLD  R0,0
00129b 9403      	INC  R0
00129c fa00      	BST  R0,0
                 __CHKSW2:
00129d 9508      	RET
                 
                 __GETW1P:
00129e 91ed      	LD   R30,X+
00129f 91fc      	LD   R31,X
0012a0 9711      	SBIW R26,1
0012a1 9508      	RET
                 
                 __GETD1P_INC:
0012a2 91ed      	LD   R30,X+
0012a3 91fd      	LD   R31,X+
0012a4 916d      	LD   R22,X+
0012a5 917d      	LD   R23,X+
0012a6 9508      	RET
                 
                 __PUTDP1_DEC:
0012a7 937e      	ST   -X,R23
0012a8 936e      	ST   -X,R22
0012a9 93fe      	ST   -X,R31
0012aa 93ee      	ST   -X,R30
0012ab 9508      	RET
                 
                 __GETW1PF:
0012ac 9005      	LPM  R0,Z+
0012ad 91f4      	LPM  R31,Z
0012ae 2de0      	MOV  R30,R0
0012af 9508      	RET
                 
                 __PUTPARD1:
0012b0 937a      	ST   -Y,R23
0012b1 936a      	ST   -Y,R22
0012b2 93fa      	ST   -Y,R31
0012b3 93ea      	ST   -Y,R30
0012b4 9508      	RET
                 
                 __EEPROMRDB:
0012b5 99e1      	SBIC EECR,EEWE
0012b6 cffe      	RJMP __EEPROMRDB
0012b7 93ff      	PUSH R31
0012b8 b7ff      	IN   R31,SREG
0012b9 94f8      	CLI
0012ba bbae      	OUT  EEARL,R26
0012bb bbbf      	OUT  EEARH,R27
0012bc 9ae0      	SBI  EECR,EERE
0012bd b3ed      	IN   R30,EEDR
0012be bfff      	OUT  SREG,R31
0012bf 91ff      	POP  R31
0012c0 9508      	RET
                 
                 __EEPROMWRB:
0012c1 9be1      	SBIS EECR,EEWE
0012c2 c002      	RJMP __EEPROMWRB1
0012c3 95a8      	WDR
0012c4 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0012c5 b79f      	IN   R25,SREG
0012c6 94f8      	CLI
0012c7 bbae      	OUT  EEARL,R26
0012c8 bbbf      	OUT  EEARH,R27
0012c9 9ae0      	SBI  EECR,EERE
0012ca b38d      	IN   R24,EEDR
0012cb 17e8      	CP   R30,R24
0012cc f019      	BREQ __EEPROMWRB0
0012cd bbed      	OUT  EEDR,R30
0012ce 9ae2      	SBI  EECR,EEMWE
0012cf 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0012d0 bf9f      	OUT  SREG,R25
0012d1 9508      	RET
                 
                 __CPW02:
0012d2 2400      	CLR  R0
0012d3 160a      	CP   R0,R26
0012d4 060b      	CPC  R0,R27
0012d5 9508      	RET
                 
                 __SAVELOCR6:
0012d6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0012d7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0012d8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0012d9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0012da 931a      	ST   -Y,R17
0012db 930a      	ST   -Y,R16
0012dc 9508      	RET
                 
                 __LOADLOCR6:
0012dd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0012de 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0012df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0012e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0012e1 8119      	LDD  R17,Y+1
0012e2 8108      	LD   R16,Y
0012e3 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0012e4 0fac      	ADD  R26,R28
0012e5 1fbd      	ADC  R27,R29
                 __INITLOC0:
0012e6 9005      	LPM  R0,Z+
0012e7 920d      	ST   X+,R0
0012e8 958a      	DEC  R24
0012e9 f7e1      	BRNE __INITLOC0
0012ea 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  46 r1 :   9 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   4 r7 :   3 
r8 :   5 r9 :   2 r10:   4 r11:   2 r12:   6 r13:   1 r14:   0 r15:   4 
r16:  99 r17: 135 r18:  69 r19:  53 r20:  36 r21:  52 r22:  43 r23:  17 
r24:  49 r25:  14 r26: 540 r27: 198 r28:  62 r29:   2 r30:1139 r31: 257 
x  :  59 y  : 785 z  :  38 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  38 
adiw  :  77 and   :  10 andi  :  20 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  54 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   7 brmi  :   1 brne  : 119 brpl  :   4 brsh  :  27 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 327 
cbi   :  36 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  46 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :  12 
cp    :  41 cpc   :  19 cpi   : 116 cpse  :   0 dec   :  16 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 
ijmp  :   0 in    :  13 inc   :   8 jmp   :  78 ld    : 101 ldd   : 359 
ldi   : 462 lds   :  72 lpm   :  31 lsl   :  11 lsr   :  15 mov   : 113 
movw  :  91 mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   8 ori   :  16 out   :  62 pop   :  12 push  :  12 rcall : 119 
ret   : 101 reti  :   4 rjmp  : 203 rol   :   8 ror   :   0 sbc   :   8 
sbci  :  23 sbi   :  42 sbic  :  11 sbis  :   8 sbiw  :  49 sbr   :   1 
sbrc  :   2 sbrs  :  12 sec   :   1 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 287 std   : 114 sts   :  71 sub   :  17 subi  :  69 
swap  :   0 tst   :  14 wdr   :   2 
Instructions used: 75 out of 117 (64.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0025d6   8430   1256   9686  131072   7.4%
[.dseg] 0x000100 0x000a74      0   1396   1396    4096  34.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 20 warnings
