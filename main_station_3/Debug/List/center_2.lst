
AVRASM ver. 2.1.30  D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm Tue Sep 12 17:47:46 2017

D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1099): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R5
                 	.DEF _rx_rd_index0=R4
                 	.DEF _rx_counter0=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _time_flow=R10
                 	.DEF _time_flow_msb=R11
                 	.DEF _time_s=R12
                 	.DEF _time_s_msb=R13
                 	.DEF _flag=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02a8 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0661 	JMP  _ext_int6_isr
000010 940c 0661 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 034d 	JMP  _timer2_ovf
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0335 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 02eb 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0311 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 5f00
00004c 0000
00004d 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 _tbl10_G106:
00013d 2710
00013e 03e8
00013f 0064
000140 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000141 0001      	.DB  0x1,0x0
                 _tbl16_G106:
000142 1000
000143 0100
000144 0010
000145 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000146 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000147 0000
000148 0000      	.DB  0x0,0x0,0x0,0x0
000149 0000
00014a 0000      	.DB  0x0,0x0,0x0,0x0
00014b 0000      	.DB  0x0,0x0
                 
                 _0x2C:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1226): warning: .cseg .db misalignment - padding zero byte
00014c 00a1      	.DB  0xA1
                 _0x2D:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1228): warning: .cseg .db misalignment - padding zero byte
00014d 00a2      	.DB  0xA2
                 _0x2E:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1230): warning: .cseg .db misalignment - padding zero byte
00014e 00a3      	.DB  0xA3
                 _0x2F:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1232): warning: .cseg .db misalignment - padding zero byte
00014f 00a4      	.DB  0xA4
                 _0xD0:
000150 0506
000151 0507
000152 0518
000153 0529      	.DB  LOW(_0xCF),HIGH(_0xCF),LOW(_0xCF+1),HIGH(_0xCF+1),LOW(_0xCF+18),HIGH(_0xCF+18),LOW(_0xCF+35),HIGH(_0xCF+35)
000154 053a      	.DB  LOW(_0xCF+52),HIGH(_0xCF+52)
                 _0xD6:
000155 4547
000156 2054
000157 752f
000158 6470      	.DB  0x47,0x45,0x54,0x20,0x2F,0x75,0x70,0x64
000159 7461
00015a 3f65
00015b 656b
00015c 3d79      	.DB  0x61,0x74,0x65,0x3F,0x6B,0x65,0x79,0x3D
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1239): warning: .cseg .db misalignment - padding zero byte
00015d 0000      	.DB  0x0
                 _0x0:
00015e 5245
00015f 4f52
000160 0052
000161 5237      	.DB  0x45,0x52,0x52,0x4F,0x52,0x0,0x37,0x52
000162 4e36
000163 5953
000164 4846
000165 4642      	.DB  0x36,0x4E,0x53,0x59,0x46,0x48,0x42,0x46
000166 5552
000167 5241
000168 4b36
000169 3500      	.DB  0x52,0x55,0x41,0x52,0x36,0x4B,0x0,0x35
00016a 3049
00016b 3030
00016c 5257
00016d 584f      	.DB  0x49,0x30,0x30,0x30,0x57,0x52,0x4F,0x58
00016e 464f
00016f 3053
000170 3856
000171 0035      	.DB  0x4F,0x46,0x53,0x30,0x56,0x38,0x35,0x0
000172 4e36
000173 4648
000174 4858
000175 3730      	.DB  0x36,0x4E,0x48,0x46,0x58,0x48,0x30,0x37
000176 5336
000177 3043
000178 4432
000179 305a      	.DB  0x36,0x53,0x43,0x30,0x32,0x44,0x5A,0x30
00017a 5700
00017b 4955
00017c 3854
00017d 584c      	.DB  0x0,0x57,0x55,0x49,0x54,0x38,0x4C,0x58
00017e 4e37
00017f 3239
000180 3858
000181 344a      	.DB  0x37,0x4E,0x39,0x32,0x58,0x38,0x4A,0x34
000182 0057
000183 6f4e
000184 6564
000185 203a      	.DB  0x57,0x0,0x4E,0x6F,0x64,0x65,0x3A,0x20
000186 5400
000187 6d65
000188 3a70
000189 0020      	.DB  0x0,0x54,0x65,0x6D,0x70,0x3A,0x20,0x0
00018a 7548
00018b 696d
00018c 3a64
00018d 0020      	.DB  0x48,0x75,0x6D,0x69,0x64,0x3A,0x20,0x0
00018e 6157
00018f 6574
000190 3a72
000191 0020      	.DB  0x57,0x61,0x74,0x65,0x72,0x3A,0x20,0x0
000192 4321
000193 6300
000194 006d
000195 3132      	.DB  0x21,0x43,0x0,0x63,0x6D,0x0,0x32,0x31
000196 3700
000197 0035
000198 3534
000199 4200      	.DB  0x0,0x37,0x35,0x0,0x34,0x35,0x0,0x42
00019a 6f6f
00019b 6974
00019c 676e
00019d 4100      	.DB  0x6F,0x6F,0x74,0x69,0x6E,0x67,0x0,0x41
00019e 0d54
00019f 000a
0001a0 4b4f
0001a1 4100      	.DB  0x54,0xD,0xA,0x0,0x4F,0x4B,0x0,0x41
0001a2 2b54
0001a3 4943
0001a4 5350
0001a5 4154      	.DB  0x54,0x2B,0x43,0x49,0x50,0x53,0x54,0x41
0001a6 5554
0001a7 0d53
0001a8 000a
0001a9 5453      	.DB  0x54,0x55,0x53,0xD,0xA,0x0,0x53,0x54
0001aa 5441
0001ab 5355
0001ac 323a
0001ad 5700      	.DB  0x41,0x54,0x55,0x53,0x3A,0x32,0x0,0x57
0001ae 6669
0001af 2069
0001b0 6f43
0001b1 6e6e      	.DB  0x69,0x66,0x69,0x20,0x43,0x6F,0x6E,0x6E
0001b2 6365
0001b3 6574
0001b4 0d64
0001b5 000a      	.DB  0x65,0x63,0x74,0x65,0x64,0xD,0xA,0x0
0001b6 5441
0001b7 432b
0001b8 4d57
0001b9 444f      	.DB  0x41,0x54,0x2B,0x43,0x57,0x4D,0x4F,0x44
0001ba 3d45
0001bb 0d31
0001bc 000a
0001bd 5441      	.DB  0x45,0x3D,0x31,0xD,0xA,0x0,0x41,0x54
0001be 432b
0001bf 4a57
0001c0 5041
0001c1 223d      	.DB  0x2B,0x43,0x57,0x4A,0x41,0x50,0x3D,0x22
0001c2 6854
0001c3 7961
0001c4 545f
0001c5 6168      	.DB  0x54,0x68,0x61,0x79,0x5F,0x54,0x68,0x61
0001c6 5f6f
0001c7 6564
0001c8 5f6f
0001c9 6967      	.DB  0x6F,0x5F,0x64,0x65,0x6F,0x5F,0x67,0x69
0001ca 6961
0001cb 2c22
0001cc 6322
0001cd 6968      	.DB  0x61,0x69,0x22,0x2C,0x22,0x63,0x68,0x69
0001ce 686e
0001cf 6178
0001d0 2263
0001d1 0a0d      	.DB  0x6E,0x68,0x78,0x61,0x63,0x22,0xD,0xA
0001d2 4100
0001d3 2b54
0001d4 4943
0001d5 4d50      	.DB  0x0,0x41,0x54,0x2B,0x43,0x49,0x50,0x4D
0001d6 5855
0001d7 313d
0001d8 4100
0001d9 2b54      	.DB  0x55,0x58,0x3D,0x31,0x0,0x41,0x54,0x2B
0001da 4943
0001db 5350
0001dc 4154
0001dd 5452      	.DB  0x43,0x49,0x50,0x53,0x54,0x41,0x52,0x54
0001de 303d
0001df 222c
0001e0 4354
0001e1 2250      	.DB  0x3D,0x30,0x2C,0x22,0x54,0x43,0x50,0x22
0001e2 222c
0001e3 7061
0001e4 2e69
0001e5 6874      	.DB  0x2C,0x22,0x61,0x70,0x69,0x2E,0x74,0x68
0001e6 6e69
0001e7 7367
0001e8 6570
0001e9 6b61      	.DB  0x69,0x6E,0x67,0x73,0x70,0x65,0x61,0x6B
0001ea 632e
0001eb 6d6f
0001ec 2c22
0001ed 3038      	.DB  0x2E,0x63,0x6F,0x6D,0x22,0x2C,0x38,0x30
0001ee 2600
0001ef 6966
0001f0 6c65
0001f1 3164      	.DB  0x0,0x26,0x66,0x69,0x65,0x6C,0x64,0x31
0001f2 003d
0001f3 6626
0001f4 6569
0001f5 646c      	.DB  0x3D,0x0,0x26,0x66,0x69,0x65,0x6C,0x64
0001f6 3d32
0001f7 2600
0001f8 6966
0001f9 6c65      	.DB  0x32,0x3D,0x0,0x26,0x66,0x69,0x65,0x6C
0001fa 3364
0001fb 003d
0001fc 5441
0001fd 432b      	.DB  0x64,0x33,0x3D,0x0,0x41,0x54,0x2B,0x43
0001fe 5049
0001ff 4553
000200 444e
000201 303d      	.DB  0x49,0x50,0x53,0x45,0x4E,0x44,0x3D,0x30
000202 002c
000203 203e
000204 4100
000205 2b54      	.DB  0x2C,0x0,0x3E,0x20,0x0,0x41,0x54,0x2B
000206 4943
000207 4350
000208 4f4c
000209 4553      	.DB  0x43,0x49,0x50,0x43,0x4C,0x4F,0x53,0x45
00020a 303d
00020b 0a0d
00020c 2500
00020d 0064      	.DB  0x3D,0x30,0xD,0xA,0x0,0x25,0x64,0x0
                 _0x2040060:
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1286): warning: .cseg .db misalignment - padding zero byte
00020e 0001      	.DB  0x1
                 _0x2040000:
00020f 4e2d
000210 4e41
000211 4900
000212 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Embedded Project\Recovery\ATmega128 project\canh bao lu\main_station_3\Debug\List\center_2.asm(1289): warning: .cseg .db misalignment - padding zero byte
000213 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000214 0001      	.DW  0x01
000215 0002      	.DW  0x02
000216 028c      	.DW  __REG_BIT_VARS*2
                 
000217 000a      	.DW  0x0A
000218 0004      	.DW  0x04
000219 028e      	.DW  __REG_VARS*2
                 
00021a 0006      	.DW  0x06
00021b 0500      	.DW  _0x2B
00021c 02bc      	.DW  _0x0*2
                 
00021d 0001      	.DW  0x01
00021e 0834      	.DW  _Code_tay_cam1
00021f 0298      	.DW  _0x2C*2
                 
000220 0001      	.DW  0x01
000221 0835      	.DW  _Code_tay_cam2
000222 029a      	.DW  _0x2D*2
                 
000223 0001      	.DW  0x01
000224 0836      	.DW  _Code_tay_cam3
000225 029c      	.DW  _0x2E*2
                 
000226 0001      	.DW  0x01
000227 0837      	.DW  _Code_tay_cam4
000228 029e      	.DW  _0x2F*2
                 
000229 0001      	.DW  0x01
00022a 0506      	.DW  _0xCF
00022b 02c1      	.DW  _0x0*2+5
                 
00022c 0011      	.DW  0x11
00022d 0507      	.DW  _0xCF+1
00022e 02c2      	.DW  _0x0*2+6
                 
00022f 0011      	.DW  0x11
000230 0518      	.DW  _0xCF+18
000231 02d3      	.DW  _0x0*2+23
                 
000232 0011      	.DW  0x11
000233 0529      	.DW  _0xCF+35
000234 02e4      	.DW  _0x0*2+40
                 
000235 0011      	.DW  0x11
000236 053a      	.DW  _0xCF+52
000237 02f5      	.DW  _0x0*2+57
                 
000238 000a      	.DW  0x0A
000239 085d      	.DW  _key
00023a 02a0      	.DW  _0xD0*2
                 
00023b 0007      	.DW  0x07
00023c 054b      	.DW  _0xD1
00023d 0306      	.DW  _0x0*2+74
                 
00023e 0007      	.DW  0x07
00023f 0552      	.DW  _0xD1+7
000240 030d      	.DW  _0x0*2+81
                 
000241 0008      	.DW  0x08
000242 0559      	.DW  _0xD1+14
000243 0314      	.DW  _0x0*2+88
                 
000244 0008      	.DW  0x08
000245 0561      	.DW  _0xD1+22
000246 031c      	.DW  _0x0*2+96
                 
000247 0003      	.DW  0x03
000248 0569      	.DW  _0xD1+30
000249 0324      	.DW  _0x0*2+104
                 
00024a 0003      	.DW  0x03
00024b 056c      	.DW  _0xD1+33
00024c 0327      	.DW  _0x0*2+107
                 
00024d 0003      	.DW  0x03
00024e 056f      	.DW  _0xD2
00024f 032a      	.DW  _0x0*2+110
                 
000250 0003      	.DW  0x03
000251 0572      	.DW  _0xD2+3
000252 032d      	.DW  _0x0*2+113
                 
000253 0003      	.DW  0x03
000254 0575      	.DW  _0xD2+6
000255 0330      	.DW  _0x0*2+116
                 
000256 0008      	.DW  0x08
000257 0578      	.DW  _0xD3
000258 0333      	.DW  _0x0*2+119
                 
000259 0005      	.DW  0x05
00025a 0580      	.DW  _0xD3+8
00025b 033b      	.DW  _0x0*2+127
                 
00025c 0003      	.DW  0x03
00025d 0585      	.DW  _0xD3+13
00025e 0340      	.DW  _0x0*2+132
                 
00025f 000f      	.DW  0x0F
000260 0588      	.DW  _0xD3+16
000261 0343      	.DW  _0x0*2+135
                 
000262 0003      	.DW  0x03
000263 0597      	.DW  _0xD3+31
000264 0340      	.DW  _0x0*2+132
                 
000265 0009      	.DW  0x09
000266 059a      	.DW  _0xD3+34
000267 0352      	.DW  _0x0*2+150
                 
000268 0011      	.DW  0x11
000269 05a3      	.DW  _0xD3+43
00026a 035b      	.DW  _0x0*2+159
                 
00026b 000e      	.DW  0x0E
00026c 05b4      	.DW  _0xD3+60
00026d 036c      	.DW  _0x0*2+176
                 
00026e 0003      	.DW  0x03
00026f 05c2      	.DW  _0xD3+74
000270 0340      	.DW  _0x0*2+132
                 
000271 002b      	.DW  0x2B
000272 05c5      	.DW  _0xD3+77
000273 037a      	.DW  _0x0*2+190
                 
000274 0003      	.DW  0x03
000275 05f0      	.DW  _0xD3+120
000276 0340      	.DW  _0x0*2+132
                 
000277 000c      	.DW  0x0C
000278 05f3      	.DW  _0xDA
000279 03a5      	.DW  _0x0*2+233
                 
00027a 0003      	.DW  0x03
00027b 05ff      	.DW  _0xDA+12
00027c 033d      	.DW  _0x0*2+129
                 
00027d 0003      	.DW  0x03
00027e 0602      	.DW  _0xDA+15
00027f 0340      	.DW  _0x0*2+132
                 
000280 002c      	.DW  0x2C
000281 0605      	.DW  _0xDA+18
000282 03b1      	.DW  _0x0*2+245
                 
000283 0003      	.DW  0x03
000284 0631      	.DW  _0xDA+62
000285 033d      	.DW  _0x0*2+129
                 
000286 0003      	.DW  0x03
000287 0634      	.DW  _0xDA+65
000288 0340      	.DW  _0x0*2+132
                 
000289 0009      	.DW  0x09
00028a 0637      	.DW  _0xDA+68
00028b 03dd      	.DW  _0x0*2+289
                 
00028c 0009      	.DW  0x09
00028d 0640      	.DW  _0xDA+77
00028e 03e6      	.DW  _0x0*2+298
                 
00028f 0009      	.DW  0x09
000290 0649      	.DW  _0xDA+86
000291 03ef      	.DW  _0x0*2+307
                 
000292 0003      	.DW  0x03
000293 0652      	.DW  _0xDA+95
000294 033d      	.DW  _0x0*2+129
                 
000295 000e      	.DW  0x0E
000296 0655      	.DW  _0xDA+98
000297 03f8      	.DW  _0x0*2+316
                 
000298 0003      	.DW  0x03
000299 0663      	.DW  _0xDA+112
00029a 033d      	.DW  _0x0*2+129
                 
00029b 0003      	.DW  0x03
00029c 0666      	.DW  _0xDA+115
00029d 0406      	.DW  _0x0*2+330
                 
00029e 0010      	.DW  0x10
00029f 0669      	.DW  _0xDA+118
0002a0 0409      	.DW  _0x0*2+333
                 
0002a1 0003      	.DW  0x03
0002a2 0679      	.DW  _0xDA+134
0002a3 0340      	.DW  _0x0*2+132
                 
0002a4 0001      	.DW  0x01
0002a5 0867      	.DW  __seed_G102
0002a6 041c      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
0002a7 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0002a8 94f8      	CLI
0002a9 27ee      	CLR  R30
0002aa bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002ab e0f1      	LDI  R31,1
0002ac bff5      	OUT  MCUCR,R31
0002ad bfe5      	OUT  MCUCR,R30
0002ae 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0002b0 e08d      	LDI  R24,(14-2)+1
0002b1 e0a2      	LDI  R26,2
0002b2 27bb      	CLR  R27
                 __CLEAR_REG:
0002b3 93ed      	ST   X+,R30
0002b4 958a      	DEC  R24
0002b5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002b6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002b7 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002b8 e0a0      	LDI  R26,LOW(__SRAM_START)
0002b9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0002ba 93ed      	ST   X+,R30
0002bb 9701      	SBIW R24,1
0002bc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002bd e2e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002be e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002bf 9185      	LPM  R24,Z+
0002c0 9195      	LPM  R25,Z+
0002c1 9700      	SBIW R24,0
0002c2 f061      	BREQ __GLOBAL_INI_END
0002c3 91a5      	LPM  R26,Z+
0002c4 91b5      	LPM  R27,Z+
0002c5 9005      	LPM  R0,Z+
0002c6 9015      	LPM  R1,Z+
0002c7 01bf      	MOVW R22,R30
0002c8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002c9 9005      	LPM  R0,Z+
0002ca 920d      	ST   X+,R0
0002cb 9701      	SBIW R24,1
0002cc f7e1      	BRNE __GLOBAL_INI_LOOP
0002cd 01fb      	MOVW R30,R22
0002ce cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0002cf bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002d0 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002d1 bfed      	OUT  SPL,R30
0002d2 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002d3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002d4 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002d5 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002d6 940c 067c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;// Graphic Display functions
                 ;#include <glcd.h>
                 ;// Font used for displaying text
                 ;// on the graphic display
                 ;#include <font5x7.h>
                 ;
                 ;// Declare your global variables here
                 ;#define menu PINC.3
                 ;#define back PINC.2
                 ;#define enter PINC.0
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;char buff[260];
                 ;int i = 0, time_flow = 0, time_s = 0;
                 ;bool flag = false;
                 ;int dem;
                 ;int count;
                 ;//unsigned char start_h, start_m, start_s, end_h, end_m, end_s;
                 ;int rain_state[5];
                 ;long rain_count;
                 ;bool start_rain = false;
                 ;
                 ;void del_string(unsigned char *s) {
                 ; 0000 0038 void del_string(unsigned char *s) {
                 
                 	.CSEG
                 _del_string:
                 ; .FSTART _del_string
                 ; 0000 0039     while (*s) {
0002d8 93ba      	ST   -Y,R27
0002d9 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x3:
0002da 81a8      	LD   R26,Y
0002db 81b9      	LDD  R27,Y+1
0002dc 91ec      	LD   R30,X
0002dd 30e0      	CPI  R30,0
0002de f041      	BREQ _0x5
                 ; 0000 003A         *s = '\0';
0002df e0e0      	LDI  R30,LOW(0)
0002e0 93ec      	ST   X,R30
                 ; 0000 003B         s++;
0002e1 81e8      	LD   R30,Y
0002e2 81f9      	LDD  R31,Y+1
0002e3 9631      	ADIW R30,1
0002e4 83e8      	ST   Y,R30
0002e5 83f9      	STD  Y+1,R31
                 ; 0000 003C     }
0002e6 cff3      	RJMP _0x3
                 _0x5:
                 ; 0000 003D     i = 0;
0002e7 2488      	CLR  R8
0002e8 2499      	CLR  R9
                 ; 0000 003E }
0002e9 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0000 0044 interrupt [19] void usart0_rx_isr(void) {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0002eb 93ea      	ST   -Y,R30
0002ec 93fa      	ST   -Y,R31
0002ed b7ef      	IN   R30,SREG
0002ee 93ea      	ST   -Y,R30
                 ; 0000 0045     char status,data;
                 ; 0000 0046     status=UCSR0A;
0002ef 931a      	ST   -Y,R17
0002f0 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0002f1 b11b      	IN   R17,11
                 ; 0000 0047     data=UDR0;
0002f2 b10c      	IN   R16,12
                 ; 0000 0048     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
0002f3 2fe1      	MOV  R30,R17
0002f4 71ec      	ANDI R30,LOW(0x1C)
0002f5 f489      	BRNE _0x6
                 ; 0000 0049         rx_buffer0[rx_wr_index0++]=data;
0002f6 2de5      	MOV  R30,R5
0002f7 9453      	INC  R5
0002f8 e0f0      	LDI  R31,0
0002f9 56e7      	SUBI R30,LOW(-_rx_buffer0)
0002fa 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0002fb 8300      	ST   Z,R16
                 ; 0000 004A #if RX_BUFFER_SIZE0 == 256
                 ; 0000 004B         // special case for receiver buffer size=256
                 ; 0000 004C         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 004D #else
                 ; 0000 004E         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0002fc e4e0      	LDI  R30,LOW(64)
0002fd 15e5      	CP   R30,R5
0002fe f409      	BRNE _0x7
0002ff 2455      	CLR  R5
                 ; 0000 004F         if (++rx_counter0 == RX_BUFFER_SIZE0) {
                 _0x7:
000300 9473      	INC  R7
000301 e4e0      	LDI  R30,LOW(64)
000302 15e7      	CP   R30,R7
000303 f419      	BRNE _0x8
                 ; 0000 0050             rx_counter0=0;
000304 2477      	CLR  R7
                 ; 0000 0051             rx_buffer_overflow0=1;
000305 9468      	SET
000306 f820      	BLD  R2,0
                 ; 0000 0052         }
                 ; 0000 0053 #endif
                 ; 0000 0054     }
                 _0x8:
                 ; 0000 0055     buff[i] = data;
                 _0x6:
000307 01f4      	MOVW R30,R8
000308 52e7      	SUBI R30,LOW(-_buff)
000309 4ff9      	SBCI R31,HIGH(-_buff)
00030a 8300      	ST   Z,R16
                 ; 0000 0056     i++;
00030b 01f4      	MOVW R30,R8
00030c 9631      	ADIW R30,1
00030d 014f      	MOVW R8,R30
                 ; 0000 0057 }
00030e 9109      	LD   R16,Y+
00030f 9119      	LD   R17,Y+
000310 c037      	RJMP _0xF4
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0000 005D char getchar(void) {
                 ; 0000 005E     char data;
                 ; 0000 005F     while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0060     data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0061 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0062     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0063 #endif
                 ; 0000 0064 #asm("cli")
                 ; 0000 0065     --rx_counter0;
                 ; 0000 0066 #asm("sei")
                 ; 0000 0067     return data;
                 ; 0000 0068 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void) {
                 ; 0000 007D interrupt [21] void usart0_tx_isr(void) {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000311 93aa      	ST   -Y,R26
000312 93ea      	ST   -Y,R30
000313 93fa      	ST   -Y,R31
000314 b7ef      	IN   R30,SREG
000315 93ea      	ST   -Y,R30
                 ; 0000 007E     if (tx_counter0) {
000316 91e0 0832 	LDS  R30,_tx_counter0
000318 30e0      	CPI  R30,0
000319 f0a9      	BREQ _0xD
                 ; 0000 007F         --tx_counter0;
00031a 50e1      	SUBI R30,LOW(1)
00031b 93e0 0832 	STS  _tx_counter0,R30
                 ; 0000 0080         UDR0=tx_buffer0[tx_rd_index0++];
00031d 91e0 0831 	LDS  R30,_tx_rd_index0
00031f 5fef      	SUBI R30,-LOW(1)
000320 93e0 0831 	STS  _tx_rd_index0,R30
000322 50e1      	SUBI R30,LOW(1)
000323 e0f0      	LDI  R31,0
000324 51e0      	SUBI R30,LOW(-_tx_buffer0)
000325 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000326 81e0      	LD   R30,Z
000327 b9ec      	OUT  0xC,R30
                 ; 0000 0081 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0082         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000328 91a0 0831 	LDS  R26,_tx_rd_index0
00032a 34a0      	CPI  R26,LOW(0x40)
00032b f419      	BRNE _0xE
00032c e0e0      	LDI  R30,LOW(0)
00032d 93e0 0831 	STS  _tx_rd_index0,R30
                 ; 0000 0083 #endif
                 ; 0000 0084     }
                 _0xE:
                 ; 0000 0085 }
                 _0xD:
00032f 91e9      	LD   R30,Y+
000330 bfef      	OUT  SREG,R30
000331 91f9      	LD   R31,Y+
000332 91e9      	LD   R30,Y+
000333 91a9      	LD   R26,Y+
000334 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0087 interrupt [17] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000335 93ea      	ST   -Y,R30
000336 93fa      	ST   -Y,R31
000337 b7ef      	IN   R30,SREG
000338 93ea      	ST   -Y,R30
                 ; 0000 0088     //0.02 ms => 50k = 1s.
                 ; 0000 0089     TCNT0=0x9C;
000339 e9ec      	LDI  R30,LOW(156)
00033a bfe2      	OUT  0x32,R30
                 ; 0000 008A     // Place your code here
                 ; 0000 008B     time_flow++;
00033b 01f5      	MOVW R30,R10
00033c 9631      	ADIW R30,1
00033d 015f      	MOVW R10,R30
                 ; 0000 008C 
                 ; 0000 008D     if (time_flow == 10000) {
00033e e1e0      	LDI  R30,LOW(10000)
00033f e2f7      	LDI  R31,HIGH(10000)
000340 15ea      	CP   R30,R10
000341 05fb      	CPC  R31,R11
000342 f429      	BRNE _0xF
                 ; 0000 008E         time_s++;
000343 01f6      	MOVW R30,R12
000344 9631      	ADIW R30,1
000345 016f      	MOVW R12,R30
                 ; 0000 008F         time_flow = 0;
000346 24aa      	CLR  R10
000347 24bb      	CLR  R11
                 ; 0000 0090     }
                 ; 0000 0091 }
                 _0xF:
                 _0xF4:
000348 91e9      	LD   R30,Y+
000349 bfef      	OUT  SREG,R30
00034a 91f9      	LD   R31,Y+
00034b 91e9      	LD   R30,Y+
00034c 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf(void){
                 ; 0000 0093 interrupt [11] void timer2_ovf(void){
                 _timer2_ovf:
                 ; .FSTART _timer2_ovf
00034d 93aa      	ST   -Y,R26
00034e 93ba      	ST   -Y,R27
00034f 93ea      	ST   -Y,R30
000350 93fa      	ST   -Y,R31
000351 b7ef      	IN   R30,SREG
000352 93ea      	ST   -Y,R30
                 ; 0000 0094     TCNT2 = 0x83;
000353 e8e3      	LDI  R30,LOW(131)
000354 bde4      	OUT  0x24,R30
                 ; 0000 0095     if(flag == true)
000355 e0e1      	LDI  R30,LOW(1)
000356 15e6      	CP   R30,R6
000357 f421      	BRNE _0x10
                 ; 0000 0096         dem++;
000358 edad      	LDI  R26,LOW(_dem)
000359 e0b7      	LDI  R27,HIGH(_dem)
00035a 940e 0fee 	CALL SUBOPT_0x0
                 ; 0000 0097     if(dem == 5000){
                 _0x10:
00035c 91a0 07dd 	LDS  R26,_dem
00035e 91b0 07de 	LDS  R27,_dem+1
000360 38a8      	CPI  R26,LOW(0x1388)
000361 e1e3      	LDI  R30,HIGH(0x1388)
000362 07be      	CPC  R27,R30
000363 f469      	BRNE _0x11
                 ; 0000 0098         rain_state[count] = 0;
000364 940e 0ff4 	CALL SUBOPT_0x1
000366 940e 0ff9 	CALL SUBOPT_0x2
000368 e0e0      	LDI  R30,LOW(0)
000369 e0f0      	LDI  R31,HIGH(0)
00036a 93ed      	ST   X+,R30
00036b 93fc      	ST   X,R31
                 ; 0000 0099         count++;
00036c 940e 1000 	CALL SUBOPT_0x3
                 ; 0000 009A         dem = 0;
00036e 940e 1003 	CALL SUBOPT_0x4
                 ; 0000 009B         flag = false;
000370 2466      	CLR  R6
                 ; 0000 009C     }
                 ; 0000 009D }
                 _0x11:
000371 91e9      	LD   R30,Y+
000372 bfef      	OUT  SREG,R30
000373 91f9      	LD   R31,Y+
000374 91e9      	LD   R30,Y+
000375 91b9      	LD   R27,Y+
000376 91a9      	LD   R26,Y+
000377 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c) {
                 ; 0000 00A3 void putchar(char c) {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00A4     while (tx_counter0 == TX_BUFFER_SIZE0);
000378 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x12:
000379 91a0 0832 	LDS  R26,_tx_counter0
00037b 34a0      	CPI  R26,LOW(0x40)
00037c f3e1      	BREQ _0x12
                 ; 0000 00A5 #asm("cli")
00037d 94f8      	cli
                 ; 0000 00A6     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
00037e 91e0 0832 	LDS  R30,_tx_counter0
000380 30e0      	CPI  R30,0
000381 f411      	BRNE _0x16
000382 995d      	SBIC 0xB,5
000383 c018      	RJMP _0x15
                 _0x16:
                 ; 0000 00A7         tx_buffer0[tx_wr_index0++]=c;
000384 91e0 0830 	LDS  R30,_tx_wr_index0
000386 5fef      	SUBI R30,-LOW(1)
000387 93e0 0830 	STS  _tx_wr_index0,R30
000389 50e1      	SUBI R30,LOW(1)
00038a e0f0      	LDI  R31,0
00038b 51e0      	SUBI R30,LOW(-_tx_buffer0)
00038c 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
00038d 81a8      	LD   R26,Y
00038e 83a0      	STD  Z+0,R26
                 ; 0000 00A8 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00A9         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
00038f 91a0 0830 	LDS  R26,_tx_wr_index0
000391 34a0      	CPI  R26,LOW(0x40)
000392 f419      	BRNE _0x18
000393 e0e0      	LDI  R30,LOW(0)
000394 93e0 0830 	STS  _tx_wr_index0,R30
                 ; 0000 00AA #endif
                 ; 0000 00AB         ++tx_counter0;
                 _0x18:
000396 91e0 0832 	LDS  R30,_tx_counter0
000398 5fef      	SUBI R30,-LOW(1)
000399 93e0 0832 	STS  _tx_counter0,R30
                 ; 0000 00AC     } else
00039b c002      	RJMP _0x19
                 _0x15:
                 ; 0000 00AD         UDR0=c;
00039c 81e8      	LD   R30,Y
00039d b9ec      	OUT  0xC,R30
                 ; 0000 00AE #asm("sei")
                 _0x19:
00039e 9478      	sei
                 ; 0000 00AF }
00039f 940c 0939 	JMP  _0x216000C
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void put_string (unsigned char *s) {
                 ; 0000 00B6 void put_string (unsigned char *s) {
                 _put_string:
                 ; .FSTART _put_string
                 ; 0000 00B7     while(*s) {
0003a1 93ba      	ST   -Y,R27
0003a2 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x1A:
0003a3 81a8      	LD   R26,Y
0003a4 81b9      	LDD  R27,Y+1
0003a5 91ec      	LD   R30,X
0003a6 30e0      	CPI  R30,0
0003a7 f061      	BREQ _0x1C
                 ; 0000 00B8         putchar(*s);
0003a8 91ac      	LD   R26,X
0003a9 dfce      	RCALL _putchar
                 ; 0000 00B9         delay_ms(50);
0003aa e3a2      	LDI  R26,LOW(50)
0003ab e0b0      	LDI  R27,0
0003ac 940e 11fd 	CALL _delay_ms
                 ; 0000 00BA         s++;
0003ae 81e8      	LD   R30,Y
0003af 81f9      	LDD  R31,Y+1
0003b0 9631      	ADIW R30,1
0003b1 83e8      	ST   Y,R30
0003b2 83f9      	STD  Y+1,R31
                 ; 0000 00BB     }
0003b3 cfef      	RJMP _0x1A
                 _0x1C:
                 ; 0000 00BC }
0003b4 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void refresh(int time_ms) {
                 ; 0000 00BE void refresh(int time_ms) {
                 _refresh:
                 ; .FSTART _refresh
                 ; 0000 00BF     delay_ms(time_ms);
0003b6 940e 1009 	CALL SUBOPT_0x5
                 ;	time_ms -> Y+0
0003b8 940e 11fd 	CALL _delay_ms
                 ; 0000 00C0     del_string(buff);
0003ba eda9      	LDI  R26,LOW(_buff)
0003bb e0b6      	LDI  R27,HIGH(_buff)
0003bc df1b      	RCALL _del_string
                 ; 0000 00C1     i = 0;
0003bd 2488      	CLR  R8
0003be 2499      	CLR  R9
                 ; 0000 00C2 }
0003bf 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void wait_until(unsigned char *keyword, int time_out_s) {
                 ; 0000 00C4 void wait_until(unsigned char *keyword, int time_out_s) {
                 _wait_until:
                 ; .FSTART _wait_until
                 ; 0000 00C5     char temp[20], temp2[20];
                 ; 0000 00C6     int i = 0, time_start, time_temp;
                 ; 0000 00C7 
                 ; 0000 00C8     del_string(temp);
0003c1 93ba      	ST   -Y,R27
0003c2 93aa      	ST   -Y,R26
0003c3 97a8      	SBIW R28,40
0003c4 940e 1264 	CALL __SAVELOCR6
                 ;	*keyword -> Y+48
                 ;	time_out_s -> Y+46
                 ;	temp -> Y+26
                 ;	temp2 -> Y+6
                 ;	i -> R16,R17
                 ;	time_start -> R18,R19
                 ;	time_temp -> R20,R21
                +
0003c6 e000     +LDI R16 , LOW ( 0 )
0003c7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0003c8 01de      	MOVW R26,R28
0003c9 965a      	ADIW R26,26
0003ca df0d      	RCALL _del_string
                 ; 0000 00C9 
                 ; 0000 00CA     while (*keyword) {
                 _0x1D:
0003cb a9a8      	LDD  R26,Y+48
0003cc a9b9      	LDD  R27,Y+48+1
0003cd 91ec      	LD   R30,X
0003ce 30e0      	CPI  R30,0
0003cf f101      	BREQ _0x1F
                 ; 0000 00CB         temp[i] = *keyword;
0003d0 01f8      	MOVW R30,R16
0003d1 01de      	MOVW R26,R28
0003d2 965a      	ADIW R26,26
0003d3 0fea      	ADD  R30,R26
0003d4 1ffb      	ADC  R31,R27
0003d5 010f      	MOVW R0,R30
0003d6 a9a8      	LDD  R26,Y+48
0003d7 a9b9      	LDD  R27,Y+48+1
0003d8 91ec      	LD   R30,X
0003d9 01d0      	MOVW R26,R0
0003da 93ec      	ST   X,R30
                 ; 0000 00CC         temp2[i] = temp[i];
0003db 01f8      	MOVW R30,R16
0003dc 01de      	MOVW R26,R28
0003dd 9616      	ADIW R26,6
0003de 0fea      	ADD  R30,R26
0003df 1ffb      	ADC  R31,R27
0003e0 010f      	MOVW R0,R30
0003e1 01de      	MOVW R26,R28
0003e2 965a      	ADIW R26,26
0003e3 0fa0      	ADD  R26,R16
0003e4 1fb1      	ADC  R27,R17
0003e5 91ec      	LD   R30,X
0003e6 01d0      	MOVW R26,R0
0003e7 93ec      	ST   X,R30
                 ; 0000 00CD         keyword++;
0003e8 a9e8      	LDD  R30,Y+48
0003e9 a9f9      	LDD  R31,Y+48+1
0003ea 9631      	ADIW R30,1
0003eb abe8      	STD  Y+48,R30
0003ec abf9      	STD  Y+48+1,R31
                 ; 0000 00CE         i++;
                +
0003ed 5f0f     +SUBI R16 , LOW ( - 1 )
0003ee 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00CF     }
0003ef cfdb      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00D0 
                 ; 0000 00D1     time_start = time_s;
0003f0 0196      	MOVW R18,R12
                 ; 0000 00D2 
                 ; 0000 00D3     while (1) {
                 _0x20:
                 ; 0000 00D4         if (time_s < time_start) {
                +
0003f1 16c2     +CP R12 , R18
0003f2 06d3     +CPC R13 , R19
                 	__CPWRR 12,13,18,19
0003f3 f444      	BRGE _0x23
                 ; 0000 00D5             time_temp = time_s + 60;
0003f4 01f6      	MOVW R30,R12
0003f5 96fc      	ADIW R30,60
0003f6 01af      	MOVW R20,R30
                 ; 0000 00D6             if (time_temp - time_start > time_out_s) {
0003f7 01da      	MOVW R26,R20
0003f8 940e 100e 	CALL SUBOPT_0x6
0003fa f0f4      	BRLT _0x22
                 ; 0000 00D7                 break;
                 ; 0000 00D8             }
                 ; 0000 00D9         } else {
0003fb c004      	RJMP _0x25
                 _0x23:
                 ; 0000 00DA             if (time_s - time_start > time_out_s) {
0003fc 01d6      	MOVW R26,R12
0003fd 940e 100e 	CALL SUBOPT_0x6
0003ff f0cc      	BRLT _0x22
                 ; 0000 00DB                 break;
                 ; 0000 00DC             }
                 ; 0000 00DD         }
                 _0x25:
                 ; 0000 00DE 
                 ; 0000 00DF         if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
000400 940e 1015 	CALL SUBOPT_0x7
000402 01de      	MOVW R26,R28
000403 965c      	ADIW R26,28
000404 940e 080f 	CALL _strstr
000406 9730      	SBIW R30,0
000407 f441      	BRNE _0x28
000408 940e 1015 	CALL SUBOPT_0x7
00040a 01de      	MOVW R26,R28
00040b 9618      	ADIW R26,8
00040c 940e 080f 	CALL _strstr
00040e 9730      	SBIW R30,0
00040f f009      	BREQ _0x27
                 _0x28:
                 ; 0000 00E0             break;
000410 c008      	RJMP _0x22
                 ; 0000 00E1         }
                 ; 0000 00E2         if (strstr(buff, "ERROR")) {
                 _0x27:
000411 940e 1015 	CALL SUBOPT_0x7
                +
000413 e0a0     +LDI R26 , LOW ( _0x2B + ( 0 ) )
000414 e0b5     +LDI R27 , HIGH ( _0x2B + ( 0 ) )
                 	__POINTW2MN _0x2B,0
000415 940e 080f 	CALL _strstr
000417 9730      	SBIW R30,0
000418 f2c1      	BREQ _0x20
                 ; 0000 00E3             break;
                 ; 0000 00E4         }
                 ; 0000 00E5     }
                 _0x22:
                 ; 0000 00E6 }
000419 940e 126b 	CALL __LOADLOCR6
00041b 96e2      	ADIW R28,50
00041c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x2B:
000500           	.BYTE 0x6
                 ;#define CE PORTA.3
                 ;#define CSN PORTA.2
                 ;#define SCK PORTA.4
                 ;#define MOSI PORTA.1
                 ;#define MISO PINA.5
                 ;#define IRQ PINA.0
                 ;
                 ;unsigned char P_Add, Code_tay_cam1 = 0xA1, Code_tay_cam2 = 0xA2, Code_tay_cam3 = 0xA3, Code_tay_cam4 = 0xA4;
                 ;#include "nrf_code.c"
                 ;#define _BV(x) (1<<(x))
                 ;#define RX_DR       6
                 ;#define TX_DS       5
                 ;#define MAX_RT      4
                 ;#define STATUS      0x07
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    float a;
                 ;    float b;
                 ;    float c;
                 ;    float d;
                 ;}data;
                 ;
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    int light;
                 ;    int humi;
                 ;    int temp;
                 ;    int sm;
                 ;}station_info;
                 ;
                 ;typedef struct
                 ;{
                 ;    int analog_l;
                 ;    int analog_r;
                 ;    int digital_l;
                 ;    int digital_r;
                 ;}tay_cam_info;
                 ;
                 ;station_info station_receive;
                 ;tay_cam_info tay_cam_receive;
                 ;
                 ;data data_receive;
                 ;unsigned char data_receive_2;
                 ;unsigned char result;
                 ;
                 ;
                 ;void config();
                 ;
                 ;
                 ;//-----------------------------TX Mode -----------------------------------------------//
                 ;unsigned char SPI_RW_TX(unsigned char Buff);                                       //Function used for text moving
                 ;void RF_Init_TX();                                                                 //Function allow to Initialize RF dev ...
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value  ...
                 ;void RF_Write_Address_TX(unsigned char Address);                                   //Function to write TX address for pi ...
                 ;void RF_Write_Address_2_TX(unsigned char Address);                                 //Function to write TX address for pi ...
                 ;void RX_Mode_Active_TX();                                                          //Function to put nRF in RX mode
                 ;void TX_Mode_Active_TX();                                                          //Function to put nRF in TX mode
                 ;void RF_Config_TX();                                                               //Function to config the nRF
                 ;void RF_TX_Send_TX(data send);                                                     //Function to send data Value to RX A ...
                 ;void RF_TX_Send_2_TX(data send);                                                   //Function to send data Value to RX a ...
                 ;
                 ;
                 ;//---------------------------------RX Mode----------------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff);                                       //Function used for text moving
                 ;unsigned char SPI_Read_RX(void);
                 ;void RF_Init_RX();                                                                 //Function allow to Initialize RF dev ...
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a regi ...
                 ;void RF_Command_RX(unsigned char command);                                         //Function to write a command
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;void RX_Mode_RX();                                                          //Function to put nRF in RX mode
                 ;void RF_Config_RX();                                                               //Function to config the nRF
                 ;void RF_Read_RX();                                                     //Function to read the data from RX FIFO
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Read_RX_2();
                 ;
                 ;
                 ;
                 ;
                 ;void config()
                 ; 0000 00EF {
                 
                 	.CSEG
                 _config:
                 ; .FSTART _config
                 ;RF_Write_RX(0x07,0b01111110);  // Clear flag
00041d 940e 101a 	CALL SUBOPT_0x8
                 ;RF_Command_RX(0b11100010);     //Flush RX
                 ;delay_us(10);
                +
00041f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000420 958a     +DEC R24
000421 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;RF_Write_TX(0x00,0b00011111);     //CONFIG 0x00
000422 e0e0      	LDI  R30,LOW(0)
000423 93ea      	ST   -Y,R30
000424 e1af      	LDI  R26,LOW(31)
000425 d024      	RCALL _RF_Write_TX
                 ;delay_ms(2);
000426 e0a2      	LDI  R26,LOW(2)
000427 e0b0      	LDI  R27,0
000428 940e 11fd 	CALL _delay_ms
                 ;RF_Write_TX(0x07,0b01111110);
00042a e0e7      	LDI  R30,LOW(7)
00042b 93ea      	ST   -Y,R30
00042c e7ae      	LDI  R26,LOW(126)
00042d d01c      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x1D, 0b00000100);
00042e e1ed      	LDI  R30,LOW(29)
00042f 93ea      	ST   -Y,R30
000430 e0a4      	LDI  R26,LOW(4)
000431 d018      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
000432 e0e5      	LDI  R30,LOW(5)
000433 93ea      	ST   -Y,R30
000434 e0a2      	LDI  R26,LOW(2)
000435 d014      	RCALL _RF_Write_TX
                 ;}
000436 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;unsigned char SPI_RW_TX(unsigned char Buff){
                 _SPI_RW_TX:
                 ; .FSTART _SPI_RW_TX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000437 93aa      	ST   -Y,R26
000438 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000439 e010      	LDI  R17,LOW(0)
                 _0x31:
00043a 3018      	CPI  R17,8
00043b f450      	BRSH _0x32
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00043c 81e9      	LDD  R30,Y+1
00043d 78e0      	ANDI R30,LOW(0x80)
00043e f411      	BRNE _0x33
00043f 98d9      	CBI  0x1B,1
000440 c001      	RJMP _0x34
                 _0x33:
000441 9ad9      	SBI  0x1B,1
                 _0x34:
                 ;        delay_us(5);
000442 940e 1022 	CALL SUBOPT_0x9
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
000444 5f1f      	SUBI R17,-1
000445 cff4      	RJMP _0x31
                 _0x32:
                 ;    return(Buff);                     // return read uchar
000446 81e9      	LDD  R30,Y+1
000447 8118      	LDD  R17,Y+0
000448 940c 08a6 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_TX()                                                    //Function allow to Initialize RF device
                 ;{
                 ;    CE=1;
                 ;    delay_us(700);
                 ;    CE=0;
                 ;    CSN=1;
                 ;}
                 ;
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register  ...
                 ;{
                 _RF_Write_TX:
                 ; .FSTART _RF_Write_TX
                 ;
                 ;    CSN=0;
00044a 940e 1034 	CALL SUBOPT_0xA
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    result = SPI_RW_TX(0b00100000|Reg_Add);
00044c dfea      	RCALL _SPI_RW_TX
00044d 93e0 085c 	STS  _result,R30
                 ;    SPI_RW_TX(Value);
00044f 81a8      	LD   R26,Y
000450 dfe6      	RCALL _SPI_RW_TX
                 ;    CSN=1;
000451 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;	return result;
000453 91e0 085c 	LDS  R30,_result
000455 940c 08a6 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Address_TX(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Write_Address_TX_2(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Mode_TX()                                             //Function to put nRF in TX mode
                 ;{
                 ;    CE=0;
                 ;    RF_Write_TX(0x00,0b00011110);     //CONFIG 0x00
                 ;}
                 ;
                 ;void RF_Config_TX()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_TX_2()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX_2(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Command_TX(unsigned char command)                            //Function to write a command
                 ;{
                 ;    CSN=0;
                 ;	command -> Y+0
                 ;    SPI_RW_TX(command);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Send_TX(station_info send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.light);
                 ;  SPI_RW_TX(send.humi);
                 ;  SPI_RW_TX(send.temp);
                 ;  SPI_RW_TX(send.sm);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;void RF_Send_TX_2(data send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.a);
                 ;  SPI_RW_TX(send.b);
                 ;  SPI_RW_TX(send.c);
                 ;  SPI_RW_TX(send.d);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;
                 ;
                 ;//--------------------------------------------RX function------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff)
                 ;{
                 _SPI_RW_RX:
                 ; .FSTART _SPI_RW_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000457 93aa      	ST   -Y,R26
000458 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000459 e010      	LDI  R17,LOW(0)
                 _0x7E:
00045a 3018      	CPI  R17,8
00045b f450      	BRSH _0x7F
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00045c 81e9      	LDD  R30,Y+1
00045d 78e0      	ANDI R30,LOW(0x80)
00045e f411      	BRNE _0x80
00045f 98d9      	CBI  0x1B,1
000460 c001      	RJMP _0x81
                 _0x80:
000461 9ad9      	SBI  0x1B,1
                 _0x81:
                 ;        delay_us(5);
000462 940e 1022 	CALL SUBOPT_0x9
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
000464 5f1f      	SUBI R17,-1
000465 cff4      	RJMP _0x7E
                 _0x7F:
                 ;    return(Buff);                     // return read uchar
000466 81e9      	LDD  R30,Y+1
000467 8118      	LDD  R17,Y+0
000468 940c 08a6 	JMP  _0x216000D
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read_RX(void)
                 ;{   unsigned char Buff=0;
                 _SPI_Read_RX:
                 ; .FSTART _SPI_Read_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
00046a 931a      	ST   -Y,R17
00046b 930a      	ST   -Y,R16
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
00046c e010      	LDI  R17,0
00046d e000      	LDI  R16,LOW(0)
                 _0x87:
00046e 3008      	CPI  R16,8
00046f f478      	BRSH _0x88
                 ;       {
                 ;        delay_us(5);
                +
000470 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000471 958a     +DEC R24
000472 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000473 0f11      	LSL  R17
                 ;        SCK = 1;                      // Set SCK high..
000474 9adc      	SBI  0x1B,4
                 ;        delay_us(5);
                +
000475 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000476 958a     +DEC R24
000477 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff |= MISO;                 // capture current MISO bit
000478 e0e0      	LDI  R30,0
000479 99cd      	SBIC 0x19,5
00047a e0e1      	LDI  R30,1
00047b 2b1e      	OR   R17,R30
                 ;        SCK = 0;                      // ..then set SCK low again
00047c 98dc      	CBI  0x1B,4
                 ;       }
00047d 5f0f      	SUBI R16,-1
00047e cfef      	RJMP _0x87
                 _0x88:
                 ;    return(Buff);                     // return read uchar
00047f 2fe1      	MOV  R30,R17
000480 9109      	LD   R16,Y+
000481 9119      	LD   R17,Y+
000482 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_RX()                                                    //Function allow to Initialize RF device
                 ;{
                 _RF_Init_RX:
                 ; .FSTART _RF_Init_RX
                 ;    CE=1;
000483 9adb      	SBI  0x1B,3
                 ;    delay_us(700);
                +
000484 e788     +LDI R24 , LOW ( 1400 )
000485 e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
000486 9701     +SBIW R24 , 1
000487 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
000488 98db      	CBI  0x1B,3
                 ;    CSN=1;
000489 9ada      	SBI  0x1B,2
                 ;}
00048a 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_RX:
                 ; .FSTART _RF_Write_RX
                 ;    CSN=0;
00048b 940e 1034 	CALL SUBOPT_0xA
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
00048d 940e 103f 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
00048f 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;}
000491 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write2_RX:
                 ; .FSTART _RF_Write2_RX
                 ;    CSN=0;
000493 940e 1034 	CALL SUBOPT_0xA
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
000495 940e 103f 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
000497 81a8      	LD   R26,Y
000498 940e 103f 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
00049a 81a8      	LD   R26,Y
00049b 940e 103f 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
00049d 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;}
00049f 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write3_RX:
                 ; .FSTART _RF_Write3_RX
                 ;    CSN=0;
0004a1 940e 1034 	CALL SUBOPT_0xA
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
0004a3 940e 1044 	CALL SUBOPT_0xD
                 ;    SPI_RW_RX(Code_tay_cam2);
0004a5 940e 1044 	CALL SUBOPT_0xD
                 ;    SPI_RW_RX(Code_tay_cam2);
0004a7 940e 1044 	CALL SUBOPT_0xD
                 ;    SPI_RW_RX(Code_tay_cam2);
0004a9 940e 1044 	CALL SUBOPT_0xD
                 ;    SPI_RW_RX(Code_tay_cam2);
0004ab 940e 103f 	CALL SUBOPT_0xC
                 ;    SPI_RW_RX(Value);
                 ;
                 ;
                 ;    CSN=1;
0004ad 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;}
0004af 940c 08a6 	JMP  _0x216000D
                 ; .FEND
                 ;
                 ;void RF_Command_RX(unsigned char command)                            //Function to write a command
                 ;{
                 _RF_Command_RX:
                 ; .FSTART _RF_Command_RX
                 ;    CSN=0;
0004b1 93aa      	ST   -Y,R26
                 ;	command -> Y+0
0004b2 98da      	CBI  0x1B,2
                 ;    SPI_RW_RX(command);
0004b3 81a8      	LD   R26,Y
0004b4 dfa2      	RCALL _SPI_RW_RX
                 ;    CSN=1;
0004b5 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;}
0004b7 940c 0939 	JMP  _0x216000C
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;{
                 _RF_Write_Address_RX:
                 ; .FSTART _RF_Write_Address_RX
                 ;    CSN=0;
0004b9 93aa      	ST   -Y,R26
                 ;	Address1 -> Y+3
                 ;	Address2 -> Y+2
                 ;	Address3 -> Y+1
                 ;	Address4 -> Y+0
0004ba 98da      	CBI  0x1B,2
                 ;    RF_Write_RX(0x03,0b00000011);
0004bb e0e3      	LDI  R30,LOW(3)
0004bc 93ea      	ST   -Y,R30
0004bd e0a3      	LDI  R26,LOW(3)
0004be dfcc      	RCALL _RF_Write_RX
                 ;    CSN=1;
0004bf 940e 103a 	CALL SUBOPT_0xB
                 ;    delay_us(10);
                 ;    CSN=0;
0004c1 98da      	CBI  0x1B,2
                 ;    RF_Write2_RX(0x0A, Address1);
0004c2 e0ea      	LDI  R30,LOW(10)
0004c3 93ea      	ST   -Y,R30
0004c4 81ac      	LDD  R26,Y+4
0004c5 dfcd      	RCALL _RF_Write2_RX
                 ;    RF_Write2_RX(0x10, Address1);
0004c6 e1e0      	LDI  R30,LOW(16)
0004c7 93ea      	ST   -Y,R30
0004c8 81ac      	LDD  R26,Y+4
0004c9 dfc9      	RCALL _RF_Write2_RX
                 ;
                 ;    RF_Write3_RX(0x0B, Address2);
0004ca e0eb      	LDI  R30,LOW(11)
0004cb 93ea      	ST   -Y,R30
0004cc 81ab      	LDD  R26,Y+3
0004cd 940e 1049 	CALL SUBOPT_0xE
                 ;    RF_Write3_RX(0x10, Address2);
0004cf 81ab      	LDD  R26,Y+3
0004d0 dfd0      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0C, Address3);
0004d1 e0ec      	LDI  R30,LOW(12)
0004d2 93ea      	ST   -Y,R30
0004d3 81aa      	LDD  R26,Y+2
0004d4 940e 1049 	CALL SUBOPT_0xE
                 ;    RF_Write3_RX(0x10, Address3);
0004d6 81aa      	LDD  R26,Y+2
0004d7 dfc9      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0D, Address4);
0004d8 e0ed      	LDI  R30,LOW(13)
0004d9 93ea      	ST   -Y,R30
0004da 81a9      	LDD  R26,Y+1
0004db 940e 1049 	CALL SUBOPT_0xE
                 ;    RF_Write3_RX(0x10, Address4);
0004dd 81a9      	LDD  R26,Y+1
0004de dfc2      	RCALL _RF_Write3_RX
                 ;
                 ;}
0004df 940c 0957 	JMP  _0x216000B
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX_2(unsigned char Address1){
                 ;    CSN=0;
                 ;	Address1 -> Y+0
                 ;    RF_Write_RX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;
                 ;    RF_Write2_RX(0x0A, Address1);
                 ;    RF_Write2_RX(0x10, Address1);
                 ;}
                 ;
                 ;
                 ;void RF_Mode_RX()                                             //Function to put nRF in RX mode
                 ;{
                 _RF_Mode_RX:
                 ; .FSTART _RF_Mode_RX
                 ;    RF_Write_RX(0x00,0b00011111);     //CONFIG 0x00
0004e1 e0e0      	LDI  R30,LOW(0)
0004e2 93ea      	ST   -Y,R30
0004e3 e1af      	LDI  R26,LOW(31)
0004e4 dfa6      	RCALL _RF_Write_RX
                 ;    CE=1;
0004e5 9adb      	SBI  0x1B,3
                 ;}
0004e6 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX()                                                  //Function to config the nRF
                 ;{
                 _RF_Config_RX:
                 ; .FSTART _RF_Config_RX
                 ;RF_Write_RX(0x1C,0b00001111);
0004e7 e1ec      	LDI  R30,LOW(28)
0004e8 940e 104e 	CALL SUBOPT_0xF
                 ;RF_Write_Address_RX(Code_tay_cam1, Code_tay_cam2, Code_tay_cam3, Code_tay_cam4);
0004ea 91e0 0834 	LDS  R30,_Code_tay_cam1
0004ec 93ea      	ST   -Y,R30
0004ed 91e0 0835 	LDS  R30,_Code_tay_cam2
0004ef 93ea      	ST   -Y,R30
0004f0 91e0 0836 	LDS  R30,_Code_tay_cam3
0004f2 93ea      	ST   -Y,R30
0004f3 91a0 0837 	LDS  R26,_Code_tay_cam4
0004f5 dfc3      	RCALL _RF_Write_Address_RX
                 ;RF_Write_RX(0x02,0b00001111);     //EX_RXADDR 0x02    enable data pipe 0;
0004f6 e0e2      	LDI  R30,LOW(2)
0004f7 940e 104e 	CALL SUBOPT_0xF
                 ;RF_Write_RX(0x01,0b00001111);     //EN_AA 0x01        enable auto-acknowledgment
0004f9 e0e1      	LDI  R30,LOW(1)
0004fa 940e 104e 	CALL SUBOPT_0xF
                 ;}
0004fc 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX_2(){
                 ;    RF_Write_RX(0x1C,0b00001111);
                 ;    RF_Write_Address_RX_2(Code_tay_cam1);
                 ;    RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;    RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_RX_3(){
                 ;RF_Write_RX(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
                 ;RF_Write_Address_RX_2(Code_tay_cam1);
                 ;RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;RF_Write_RX(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
                 ;}
                 ;
                 ;void RF_Read_RX()                                         //Function to read the data from RX FIFO
                 ;{
                 ;   CE=0;
                 ;   CSN=1;
                 ;   delay_us(10);
                 ;   CSN=0;
                 ;   SPI_RW_RX(0b01100001);
                 ;   delay_us(10);
                 ;   data_receive.flag = SPI_Read_RX();
                 ;   data_receive.a = SPI_Read_RX();
                 ;   data_receive.b = SPI_Read_RX();
                 ;   data_receive.c = SPI_Read_RX();
                 ;   data_receive.d = SPI_Read_RX();
                 ;   CSN=1;
                 ;   CE=1;
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_2(){
                 ;    CE=0;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_RX(0b01100001);
                 ;    delay_us(10);
                 ;    tay_cam_receive.analog_l = SPI_Read_RX();
                 ;    tay_cam_receive.analog_r = SPI_Read_RX();
                 ;    tay_cam_receive.digital_l = SPI_Read_RX();
                 ;    tay_cam_receive.digital_r = SPI_Read_RX();
                 ;    CSN=1;
                 ;    CE=1;
                 ;    RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;    RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_3()                                         //Function to read the data from RX FIFO
                 ;{
                 _RF_Read_RX_3:
                 ; .FSTART _RF_Read_RX_3
                 ;   CE=0;
0004fd 98db      	CBI  0x1B,3
                 ;   CSN=1;
0004fe 940e 103a 	CALL SUBOPT_0xB
                 ;   delay_us(10);
                 ;   CSN=0;
000500 98da      	CBI  0x1B,2
                 ;   SPI_RW_RX(0b01100001);
000501 e6a1      	LDI  R26,LOW(97)
000502 df54      	RCALL _SPI_RW_RX
                 ;   delay_us(10);
                +
000503 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000504 958a     +DEC R24
000505 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;   station_receive.flag = SPI_Read_RX();
000506 df63      	RCALL _SPI_Read_RX
000507 e0f0      	LDI  R31,0
000508 93e0 0838 	STS  _station_receive,R30
00050a 93f0 0839 	STS  _station_receive+1,R31
                 ;   station_receive.light = SPI_Read_RX();
00050c df5d      	RCALL _SPI_Read_RX
                +
00050d e3aa     +LDI R26 , LOW ( _station_receive + ( 2 ) )
00050e e0b8     +LDI R27 , HIGH ( _station_receive + ( 2 ) )
                 	__POINTW2MN _station_receive,2
00050f 940e 1052 	CALL SUBOPT_0x10
                 ;   station_receive.humi = SPI_Read_RX();
                +
000511 e3ac     +LDI R26 , LOW ( _station_receive + ( 4 ) )
000512 e0b8     +LDI R27 , HIGH ( _station_receive + ( 4 ) )
                 	__POINTW2MN _station_receive,4
000513 940e 1052 	CALL SUBOPT_0x10
                 ;   station_receive.temp = SPI_Read_RX();
                +
000515 e3ae     +LDI R26 , LOW ( _station_receive + ( 6 ) )
000516 e0b8     +LDI R27 , HIGH ( _station_receive + ( 6 ) )
                 	__POINTW2MN _station_receive,6
000517 940e 1052 	CALL SUBOPT_0x10
                 ;   station_receive.sm = SPI_Read_RX();
                +
000519 e4a0     +LDI R26 , LOW ( _station_receive + ( 8 ) )
00051a e0b8     +LDI R27 , HIGH ( _station_receive + ( 8 ) )
                 	__POINTW2MN _station_receive,8
00051b e0f0      	LDI  R31,0
00051c 93ed      	ST   X+,R30
00051d 93fc      	ST   X,R31
                 ;   CSN=1;
00051e 9ada      	SBI  0x1B,2
                 ;   CE=1;
00051f 9adb      	SBI  0x1B,3
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
000520 940e 101a 	CALL SUBOPT_0x8
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
000522 9508      	RET
                 ; .FEND
                 ;
                 ;bool flag;
                 ;unsigned char* key[] = {"", "7R6NSYFHBFRUAR6K", "5I000WROXOFS0V85", "6NHFXH076SC02DZ0", "WUIT8LX7N92X8J4W"};
                 
                 	.DSEG
                 _0xCF:
000506           	.BYTE 0x45
                 ;char cmd[250];
                 ;#include "s_function.c"
                 ;void border()
                 ; 0000 00F4 {
                 
                 	.CSEG
                 _border:
                 ; .FSTART _border
                 ;    glcd_line(48,0, 48, 15);
000523 e3e0      	LDI  R30,LOW(48)
000524 93ea      	ST   -Y,R30
000525 e0e0      	LDI  R30,LOW(0)
000526 940e 1057 	CALL SUBOPT_0x11
                 ;    glcd_line(0, 15, 48, 15);
000528 e0ef      	LDI  R30,LOW(15)
000529 940e 1057 	CALL SUBOPT_0x11
                 ;    glcd_line(0,0,84,0);
00052b e0e0      	LDI  R30,LOW(0)
00052c 93ea      	ST   -Y,R30
00052d e5e4      	LDI  R30,LOW(84)
00052e 93ea      	ST   -Y,R30
00052f e0a0      	LDI  R26,LOW(0)
000530 940e 0ce5 	CALL _glcd_line
                 ;    glcd_line(84,0, 84, 48);
000532 e5e4      	LDI  R30,LOW(84)
000533 93ea      	ST   -Y,R30
000534 e0e0      	LDI  R30,LOW(0)
000535 940e 1060 	CALL SUBOPT_0x12
                 ;    glcd_line(0, 48, 84, 48);
000537 e3e0      	LDI  R30,LOW(48)
000538 940e 1060 	CALL SUBOPT_0x12
                 ;    glcd_line(0, 0, 0, 48);
00053a e0e0      	LDI  R30,LOW(0)
00053b 93ea      	ST   -Y,R30
00053c 93ea      	ST   -Y,R30
00053d e3a0      	LDI  R26,LOW(48)
00053e 940e 0ce5 	CALL _glcd_line
                 ;    glcd_moveto(3,3);
000540 e0e3      	LDI  R30,LOW(3)
000541 940e 1069 	CALL SUBOPT_0x13
                 ;    glcd_outtext("Node: ");
                +
000543 e4ab     +LDI R26 , LOW ( _0xD1 + ( 0 ) )
000544 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 0 ) )
                 	__POINTW2MN _0xD1,0
000545 940e 106d 	CALL SUBOPT_0x14
                 ;   // glcd_moveto(40, 3);
                 ;   // glcd_outtext("4");
                 ;
                 ;    glcd_moveto(4, 18);
000547 e1a2      	LDI  R26,LOW(18)
000548 940e 0cd9 	CALL _glcd_moveto
                 ;    glcd_outtext("Temp: ");
                +
00054a e5a2     +LDI R26 , LOW ( _0xD1 + ( 7 ) )
00054b e0b5     +LDI R27 , HIGH ( _0xD1 + ( 7 ) )
                 	__POINTW2MN _0xD1,7
00054c 940e 106d 	CALL SUBOPT_0x14
                 ;    glcd_moveto(4, 28);
00054e e1ac      	LDI  R26,LOW(28)
00054f 940e 0cd9 	CALL _glcd_moveto
                 ;    glcd_outtext("Humid: ");
                +
000551 e5a9     +LDI R26 , LOW ( _0xD1 + ( 14 ) )
000552 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 14 ) )
                 	__POINTW2MN _0xD1,14
000553 940e 106d 	CALL SUBOPT_0x14
                 ;    glcd_moveto(4, 37);
000555 e2a5      	LDI  R26,LOW(37)
000556 940e 0cd9 	CALL _glcd_moveto
                 ;    glcd_outtext("Water: ");
                +
000558 e6a1     +LDI R26 , LOW ( _0xD1 + ( 22 ) )
000559 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 22 ) )
                 	__POINTW2MN _0xD1,22
00055a 940e 0caf 	CALL _glcd_outtext
                 ;    glcd_moveto(68, 18);
00055c e4e4      	LDI  R30,LOW(68)
00055d 940e 1072 	CALL SUBOPT_0x15
                 ;    glcd_outtext("!C");
                +
00055f e6a9     +LDI R26 , LOW ( _0xD1 + ( 30 ) )
000560 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 30 ) )
                 	__POINTW2MN _0xD1,30
000561 940e 0caf 	CALL _glcd_outtext
                 ;    glcd_moveto(69, 28);
000563 e4e5      	LDI  R30,LOW(69)
000564 940e 1076 	CALL SUBOPT_0x16
                 ;    glcd_putchar(37);
000566 e2a5      	LDI  R26,LOW(37)
000567 940e 0c4d 	CALL _glcd_putchar
                 ;    glcd_moveto(69, 37);
000569 e4e5      	LDI  R30,LOW(69)
00056a 940e 107a 	CALL SUBOPT_0x17
                 ;    glcd_outtext("cm");
                +
00056c e6ac     +LDI R26 , LOW ( _0xD1 + ( 33 ) )
00056d e0b5     +LDI R27 , HIGH ( _0xD1 + ( 33 ) )
                 	__POINTW2MN _0xD1,33
00056e 940e 0caf 	CALL _glcd_outtext
                 ;}
000570 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xD1:
00054b           	.BYTE 0x24
                 ;void temp()
                 ;{
                 
                 	.CSEG
                 ;     glcd_moveto(50, 28);
                 ;     glcd_outtext("21");
                 ;     glcd_moveto(50, 18);
                 ;     glcd_outtext("75");
                 ;     glcd_moveto(50, 37);
                 ;     glcd_outtext("45");
                 ;}
                 
                 	.DSEG
                 _0xD2:
00056f           	.BYTE 0x9
                 ;void wifi_connect()
                 ;{
                 
                 	.CSEG
                 ;	glcd_moveto(10,10);
                 ;    glcd_clear();
                 ;    glcd_outtext("Booting");
                 ;    delay_ms(2000);
                 ;	put_string("AT\r\n");
                 ;    wait_until("OK", 2);
                 ;    refresh(0);
                 ;	delay_ms(100);
                 ;        put_string("AT+CIPSTATUS\r\n");
                 ;        wait_until("OK", 2);
                 ;        refresh(0);
                 ;        if (strstr(buff, "STATUS:2")) {
                 ;            glcd_outtext("Wifi Connected\r\n");
                 ;        }
                 ;        else
                 ;        {
                 ;            put_string("AT+CWMODE=1\r\n");
                 ;            wait_until("OK", 2);
                 ;           // refresh(0);
                 ;            put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
                 ;            wait_until("OK", 10);
                 ;            refresh(0);
                 ;         //PORTA.6=!PORTA.6;
                 ;        }
                 ;
                 ;  //  refresh(0);
                 ;}
                 
                 	.DSEG
                 _0xD3:
000578           	.BYTE 0x7B
                 ;
                 ;
                 ;void read_and_send(unsigned char *s){
                 ; 0000 00F6 void read_and_send(unsigned char *s){
                 
                 	.CSEG
                 _read_and_send:
                 ; .FSTART _read_and_send
                 ; 0000 00F7     // Thay nhung ham respones_read bang ham wait_until
                 ; 0000 00F8     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
                 ; 0000 00F9     int length = 0, i = 0;
                 ; 0000 00FA     memset(api_key, '\0',20);
000571 93ba      	ST   -Y,R27
000572 93aa      	ST   -Y,R26
000573 97ef      	SBIW R28,63
000574 972e      	SBIW R28,14
000575 e181      	LDI  R24,17
000576 e2a8      	LDI  R26,LOW(40)
000577 e0b0      	LDI  R27,HIGH(40)
000578 eaea      	LDI  R30,LOW(_0xD6*2)
000579 e0f2      	LDI  R31,HIGH(_0xD6*2)
00057a 940e 1272 	CALL __INITLOCB
00057c 940e 1266 	CALL __SAVELOCR4
                 ;	*s -> Y+81
                 ;	api_key -> Y+61
                 ;	cmd -> Y+44
                 ;	temp -> Y+24
                 ;	temp2 -> Y+4
                 ;	length -> R16,R17
                 ;	i -> R18,R19
                +
00057e e000     +LDI R16 , LOW ( 0 )
00057f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000580 e020     +LDI R18 , LOW ( 0 )
000581 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000582 01fe      	MOVW R30,R28
000583 96fd      	ADIW R30,61
000584 940e 107e 	CALL SUBOPT_0x18
                 ; 0000 00FB     memset(temp, '\0',20);
000586 01fe      	MOVW R30,R28
000587 9678      	ADIW R30,24
000588 940e 107e 	CALL SUBOPT_0x18
                 ; 0000 00FC     memset(temp2, '\0',20);
00058a 01fe      	MOVW R30,R28
00058b 9634      	ADIW R30,4
00058c 940e 107e 	CALL SUBOPT_0x18
                 ; 0000 00FD 
                 ; 0000 00FE     while (*s) {
                 _0xD7:
00058e 940e 1086 	CALL SUBOPT_0x19
000590 30e0      	CPI  R30,0
000591 f0f9      	BREQ _0xD9
                 ; 0000 00FF         temp2[i] = *s;
000592 01f9      	MOVW R30,R18
000593 01de      	MOVW R26,R28
000594 9614      	ADIW R26,4
000595 0fea      	ADD  R30,R26
000596 1ffb      	ADC  R31,R27
000597 01bf      	MOVW R22,R30
000598 940e 1086 	CALL SUBOPT_0x19
00059a 01db      	MOVW R26,R22
00059b 93ec      	ST   X,R30
                 ; 0000 0100         api_key[i] = temp2[i];
00059c 01f9      	MOVW R30,R18
00059d 01de      	MOVW R26,R28
00059e 96dd      	ADIW R26,61
00059f 0fea      	ADD  R30,R26
0005a0 1ffb      	ADC  R31,R27
0005a1 010f      	MOVW R0,R30
0005a2 01de      	MOVW R26,R28
0005a3 9614      	ADIW R26,4
0005a4 0fa2      	ADD  R26,R18
0005a5 1fb3      	ADC  R27,R19
0005a6 91ec      	LD   R30,X
0005a7 01d0      	MOVW R26,R0
0005a8 93ec      	ST   X,R30
                 ; 0000 0101         s++;
0005a9 01de      	MOVW R26,R28
0005aa 5aaf      	SUBI R26,LOW(-(81))
0005ab 4fbf      	SBCI R27,HIGH(-(81))
0005ac 940e 0fee 	CALL SUBOPT_0x0
                 ; 0000 0102         i++;
                +
0005ae 5f2f     +SUBI R18 , LOW ( - 1 )
0005af 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0103     }
0005b0 cfdd      	RJMP _0xD7
                 _0xD9:
                 ; 0000 0104     put_string("AT+CIPMUX=1");
                +
0005b1 efa3     +LDI R26 , LOW ( _0xDA + ( 0 ) )
0005b2 e0b5     +LDI R27 , HIGH ( _0xDA + ( 0 ) )
                 	__POINTW2MN _0xDA,0
0005b3 940e 108e 	CALL SUBOPT_0x1A
                 ; 0000 0105     delay_ms(300);
                 ; 0000 0106     put_string("\r\n");
                +
0005b5 efaf     +LDI R26 , LOW ( _0xDA + ( 12 ) )
0005b6 e0b5     +LDI R27 , HIGH ( _0xDA + ( 12 ) )
                 	__POINTW2MN _0xDA,12
0005b7 dde9      	RCALL _put_string
                 ; 0000 0107     wait_until("OK", 2);
                +
0005b8 e0e2     +LDI R30 , LOW ( _0xDA + ( 15 ) )
0005b9 e0f6     +LDI R31 , HIGH ( _0xDA + ( 15 ) )
                 	__POINTW1MN _0xDA,15
0005ba 93fa      	ST   -Y,R31
0005bb 93ea      	ST   -Y,R30
0005bc e0a2      	LDI  R26,LOW(2)
0005bd e0b0      	LDI  R27,0
0005be de02      	RCALL _wait_until
                 ; 0000 0108     refresh(10);
0005bf e0aa      	LDI  R26,LOW(10)
0005c0 e0b0      	LDI  R27,0
0005c1 ddf4      	RCALL _refresh
                 ; 0000 0109 
                 ; 0000 010A     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
                +
0005c2 e0a5     +LDI R26 , LOW ( _0xDA + ( 18 ) )
0005c3 e0b6     +LDI R27 , HIGH ( _0xDA + ( 18 ) )
                 	__POINTW2MN _0xDA,18
0005c4 940e 108e 	CALL SUBOPT_0x1A
                 ; 0000 010B     delay_ms(300);
                 ; 0000 010C     put_string("\r\n");
                +
0005c6 e3a1     +LDI R26 , LOW ( _0xDA + ( 62 ) )
0005c7 e0b6     +LDI R27 , HIGH ( _0xDA + ( 62 ) )
                 	__POINTW2MN _0xDA,62
0005c8 ddd8      	RCALL _put_string
                 ; 0000 010D     wait_until("OK", 20);
                +
0005c9 e3e4     +LDI R30 , LOW ( _0xDA + ( 65 ) )
0005ca e0f6     +LDI R31 , HIGH ( _0xDA + ( 65 ) )
                 	__POINTW1MN _0xDA,65
0005cb 93fa      	ST   -Y,R31
0005cc 93ea      	ST   -Y,R30
0005cd e1a4      	LDI  R26,LOW(20)
0005ce e0b0      	LDI  R27,0
0005cf ddf1      	RCALL _wait_until
                 ; 0000 010E     refresh(500);
0005d0 efa4      	LDI  R26,LOW(500)
0005d1 e0b1      	LDI  R27,HIGH(500)
0005d2 dde3      	RCALL _refresh
                 ; 0000 010F 
                 ; 0000 0110     strcat(cmd, api_key);
0005d3 940e 1094 	CALL SUBOPT_0x1B
0005d5 01de      	MOVW R26,R28
0005d6 96df      	ADIW R26,63
0005d7 940e 1099 	CALL SUBOPT_0x1C
                 ; 0000 0111     strcat(cmd, "&field1=");
                +
0005d9 e3a7     +LDI R26 , LOW ( _0xDA + ( 68 ) )
0005da e0b6     +LDI R27 , HIGH ( _0xDA + ( 68 ) )
                 	__POINTW2MN _0xDA,68
0005db 940e 07e5 	CALL _strcat
                 ; 0000 0112     itoa(station_receive.temp, temp);
0005dd 940e 109c 	CALL SUBOPT_0x1D
0005df 940e 10a1 	CALL SUBOPT_0x1E
                 ; 0000 0113     strcat(cmd, temp);
0005e1 940e 10a8 	CALL SUBOPT_0x1F
                 ; 0000 0114 
                 ; 0000 0115     strcat(cmd, "&field2=");
                +
0005e3 e4a0     +LDI R26 , LOW ( _0xDA + ( 77 ) )
0005e4 e0b6     +LDI R27 , HIGH ( _0xDA + ( 77 ) )
                 	__POINTW2MN _0xDA,77
0005e5 940e 07e5 	CALL _strcat
                 ; 0000 0116     itoa(station_receive.humi, temp);
0005e7 940e 10ab 	CALL SUBOPT_0x20
0005e9 940e 10a1 	CALL SUBOPT_0x1E
                 ; 0000 0117     strcat(cmd, temp);
0005eb 940e 10a8 	CALL SUBOPT_0x1F
                 ; 0000 0118 
                 ; 0000 0119     strcat(cmd, "&field3=");
                +
0005ed e4a9     +LDI R26 , LOW ( _0xDA + ( 86 ) )
0005ee e0b6     +LDI R27 , HIGH ( _0xDA + ( 86 ) )
                 	__POINTW2MN _0xDA,86
0005ef 940e 07e5 	CALL _strcat
                 ; 0000 011A     itoa(station_receive.sm, temp);
0005f1 940e 10b0 	CALL SUBOPT_0x21
0005f3 940e 10a1 	CALL SUBOPT_0x1E
                 ; 0000 011B     strcat(cmd, temp);
0005f5 940e 10a8 	CALL SUBOPT_0x1F
                 ; 0000 011C 
                 ; 0000 011D     strcat(cmd, "\r\n");
                +
0005f7 e5a2     +LDI R26 , LOW ( _0xDA + ( 95 ) )
0005f8 e0b6     +LDI R27 , HIGH ( _0xDA + ( 95 ) )
                 	__POINTW2MN _0xDA,95
0005f9 940e 07e5 	CALL _strcat
                 ; 0000 011E     length = strlen(cmd);
0005fb 01de      	MOVW R26,R28
0005fc 969c      	ADIW R26,44
0005fd 940e 07f6 	CALL _strlen
0005ff 018f      	MOVW R16,R30
                 ; 0000 011F     itoa(length, temp);
000600 931a      	ST   -Y,R17
000601 930a      	ST   -Y,R16
000602 01de      	MOVW R26,R28
000603 965a      	ADIW R26,26
000604 940e 0826 	CALL _itoa
                 ; 0000 0120 
                 ; 0000 0121     put_string("AT+CIPSEND=0,");
                +
000606 e5a5     +LDI R26 , LOW ( _0xDA + ( 98 ) )
000607 e0b6     +LDI R27 , HIGH ( _0xDA + ( 98 ) )
                 	__POINTW2MN _0xDA,98
000608 dd98      	RCALL _put_string
                 ; 0000 0122     put_string(temp);
000609 01de      	MOVW R26,R28
00060a 9658      	ADIW R26,24
00060b dd95      	RCALL _put_string
                 ; 0000 0123     delay_ms(500);
00060c efa4      	LDI  R26,LOW(500)
00060d e0b1      	LDI  R27,HIGH(500)
00060e 940e 11fd 	CALL _delay_ms
                 ; 0000 0124     put_string("\r\n");
                +
000610 e6a3     +LDI R26 , LOW ( _0xDA + ( 112 ) )
000611 e0b6     +LDI R27 , HIGH ( _0xDA + ( 112 ) )
                 	__POINTW2MN _0xDA,112
000612 dd8e      	RCALL _put_string
                 ; 0000 0125     wait_until("> ", 5);
                +
000613 e6e6     +LDI R30 , LOW ( _0xDA + ( 115 ) )
000614 e0f6     +LDI R31 , HIGH ( _0xDA + ( 115 ) )
                 	__POINTW1MN _0xDA,115
000615 940e 10b5 	CALL SUBOPT_0x22
                 ; 0000 0126     put_string(cmd);
000617 01de      	MOVW R26,R28
000618 969c      	ADIW R26,44
000619 dd87      	RCALL _put_string
                 ; 0000 0127     delay_ms(1000);
00061a eea8      	LDI  R26,LOW(1000)
00061b e0b3      	LDI  R27,HIGH(1000)
00061c 940e 11fd 	CALL _delay_ms
                 ; 0000 0128     putchar(0x1A);
00061e e1aa      	LDI  R26,LOW(26)
00061f dd58      	RCALL _putchar
                 ; 0000 0129     refresh(10);
000620 e0aa      	LDI  R26,LOW(10)
000621 e0b0      	LDI  R27,0
000622 dd93      	RCALL _refresh
                 ; 0000 012A 	put_string("AT+CIPCLOSE=0\r\n");
                +
000623 e6a9     +LDI R26 , LOW ( _0xDA + ( 118 ) )
000624 e0b6     +LDI R27 , HIGH ( _0xDA + ( 118 ) )
                 	__POINTW2MN _0xDA,118
000625 dd7b      	RCALL _put_string
                 ; 0000 012B 	wait_until("OK",5);
                +
000626 e7e9     +LDI R30 , LOW ( _0xDA + ( 134 ) )
000627 e0f6     +LDI R31 , HIGH ( _0xDA + ( 134 ) )
                 	__POINTW1MN _0xDA,134
000628 940e 10b5 	CALL SUBOPT_0x22
                 ; 0000 012C 
                 ; 0000 012D }
00062a 940e 126d 	CALL __LOADLOCR4
00062c 96ef      	ADIW R28,63
00062d 9664      	ADIW R28,20
00062e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xDA:
0005f3           	.BYTE 0x89
                 ;
                 ;void check_rain(){
                 ; 0000 012F void check_rain(){
                 
                 	.CSEG
                 _check_rain:
                 ; .FSTART _check_rain
                 ; 0000 0130     if(rain_state[1] == 0 && rain_state[2] == 0 && rain_state[3] == 0 && rain_state[4] == 0){
                +
00062f 91e0 07e3+LDS R30 , _rain_state + ( 2 )
000631 91f0 07e4+LDS R31 , _rain_state + ( 2 ) + 1
                 	__GETW1MN _rain_state,2
000633 9730      	SBIW R30,0
000634 f491      	BRNE _0xDC
                +
000635 91e0 07e5+LDS R30 , _rain_state + ( 4 )
000637 91f0 07e6+LDS R31 , _rain_state + ( 4 ) + 1
                 	__GETW1MN _rain_state,4
000639 9730      	SBIW R30,0
00063a f461      	BRNE _0xDC
                +
00063b 91e0 07e7+LDS R30 , _rain_state + ( 6 )
00063d 91f0 07e8+LDS R31 , _rain_state + ( 6 ) + 1
                 	__GETW1MN _rain_state,6
00063f 9730      	SBIW R30,0
000640 f431      	BRNE _0xDC
                +
000641 91e0 07e9+LDS R30 , _rain_state + ( 8 )
000643 91f0 07ea+LDS R31 , _rain_state + ( 8 ) + 1
                 	__GETW1MN _rain_state,8
000645 9730      	SBIW R30,0
000646 f009      	BREQ _0xDD
                 _0xDC:
000647 c018      	RJMP _0xDB
                 _0xDD:
                 ; 0000 0131         glcd_clear();
000648 940e 093b 	CALL _glcd_clear
                 ; 0000 0132         //rtc_get_time(&end_h, &end_m, &end_s);
                 ; 0000 0133         glcd_moveto(0,0);
00064a e0e0      	LDI  R30,LOW(0)
00064b 93ea      	ST   -Y,R30
00064c e0a0      	LDI  R26,LOW(0)
00064d 940e 0cd9 	CALL _glcd_moveto
                 ; 0000 0134         itoa(rain_count, buff);
00064f 91e0 07eb 	LDS  R30,_rain_count
000651 91f0 07ec 	LDS  R31,_rain_count+1
000653 940e 10bb 	CALL SUBOPT_0x23
                 ; 0000 0135         glcd_outtext(buff);
                 ; 0000 0136         start_rain = false;
000655 e0e0      	LDI  R30,LOW(0)
000656 93e0 07ef 	STS  _start_rain,R30
                 ; 0000 0137         rain_count = 0;
000658 93e0 07eb 	STS  _rain_count,R30
00065a 93e0 07ec 	STS  _rain_count+1,R30
00065c 93e0 07ed 	STS  _rain_count+2,R30
00065e 93e0 07ee 	STS  _rain_count+3,R30
                 ; 0000 0138     }
                 ; 0000 0139 }
                 _0xDB:
000660 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT6] void ext_int6_isr(void)
                 ; 0000 013C {
                 _ext_int6_isr:
                 ; .FSTART _ext_int6_isr
                 ; 0000 013D rain_count++;
                 ; 0000 013E 
                 ; 0000 013F }
                 ; .FEND
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 0143 {
                 _ext_int7_isr:
                 ; .FSTART _ext_int7_isr
                 _0xF3:
000661 936a      	ST   -Y,R22
000662 937a      	ST   -Y,R23
000663 93aa      	ST   -Y,R26
000664 93ba      	ST   -Y,R27
000665 93ea      	ST   -Y,R30
000666 93fa      	ST   -Y,R31
000667 b7ef      	IN   R30,SREG
000668 93ea      	ST   -Y,R30
                 ; 0000 0144 rain_count++;
000669 eeab      	LDI  R26,LOW(_rain_count)
00066a e0b7      	LDI  R27,HIGH(_rain_count)
00066b 940e 1230 	CALL __GETD1P_INC
                +
00066d 5fef     +SUBI R30 , LOW ( - 1 )
00066e 4fff     +SBCI R31 , HIGH ( - 1 )
00066f 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000670 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000671 940e 1235 	CALL __PUTDP1_DEC
                 ; 0000 0145 
                 ; 0000 0146 }
000673 91e9      	LD   R30,Y+
000674 bfef      	OUT  SREG,R30
000675 91f9      	LD   R31,Y+
000676 91e9      	LD   R30,Y+
000677 91b9      	LD   R27,Y+
000678 91a9      	LD   R26,Y+
000679 9179      	LD   R23,Y+
00067a 9169      	LD   R22,Y+
00067b 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 014A {
                 _main:
                 ; .FSTART _main
                 ; 0000 014B // Declare your local variables here
                 ; 0000 014C // Variable used to store graphic display
                 ; 0000 014D // controller initialization data
                 ; 0000 014E GLCDINIT_t glcd_init_data;
                 ; 0000 014F 
                 ; 0000 0150 // Input/Output Ports initialization
                 ; 0000 0151 // Port A initialization
                 ; 0000 0152 DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
00067c 9728      	SBIW R28,8
                 ;	glcd_init_data -> Y+0
00067d e5ee      	LDI  R30,LOW(94)
00067e bbea      	OUT  0x1A,R30
                 ; 0000 0153 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0154 PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
00067f e3ef      	LDI  R30,LOW(63)
000680 bbeb      	OUT  0x1B,R30
                 ; 0000 0155 
                 ; 0000 0156 // Port B initialization
                 ; 0000 0157 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0158     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
000681 e0ec      	LDI  R30,LOW(12)
000682 bbe7      	OUT  0x17,R30
                 ; 0000 0159 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 015A     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000683 bbe8      	OUT  0x18,R30
                 ; 0000 015B 
                 ; 0000 015C // Port C initialization
                 ; 0000 015D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 015E     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000684 e0e0      	LDI  R30,LOW(0)
000685 bbe4      	OUT  0x14,R30
                 ; 0000 015F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0160     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
000686 e0ed      	LDI  R30,LOW(13)
000687 bbe5      	OUT  0x15,R30
                 ; 0000 0161 
                 ; 0000 0162 // Port D initialization
                 ; 0000 0163 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0164 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000688 e0e0      	LDI  R30,LOW(0)
000689 bbe1      	OUT  0x11,R30
                 ; 0000 0165 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0166 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00068a bbe2      	OUT  0x12,R30
                 ; 0000 0167 
                 ; 0000 0168 // Port E initialization
                 ; 0000 0169 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 016A DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
00068b b9e2      	OUT  0x2,R30
                 ; 0000 016B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 016C PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
00068c b9e3      	OUT  0x3,R30
                 ; 0000 016D 
                 ; 0000 016E // Port F initialization
                 ; 0000 016F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0170 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
00068d 93e0 0061 	STS  97,R30
                 ; 0000 0171 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0172 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
00068f 93e0 0062 	STS  98,R30
                 ; 0000 0173 
                 ; 0000 0174 // Port G initialization
                 ; 0000 0175 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0176 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
000691 93e0 0064 	STS  100,R30
                 ; 0000 0177 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0178 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
000693 93e0 0065 	STS  101,R30
                 ; 0000 0179 
                 ; 0000 017A // Timer/Counter 0 initialization
                 ; 0000 017B // Clock source: System Clock
                 ; 0000 017C // Clock value: 250.000 kHz
                 ; 0000 017D // Mode: Normal top=0xFF
                 ; 0000 017E // OC0 output: Disconnected
                 ; 0000 017F // Timer Period: 1 ms
                 ; 0000 0180 ASSR=0<<AS0;
000695 bfe0      	OUT  0x30,R30
                 ; 0000 0181 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000696 e0e2      	LDI  R30,LOW(2)
000697 bfe3      	OUT  0x33,R30
                 ; 0000 0182 TCNT0=0x9C;
000698 e9ec      	LDI  R30,LOW(156)
000699 bfe2      	OUT  0x32,R30
                 ; 0000 0183 OCR0=0x00;
00069a e0e0      	LDI  R30,LOW(0)
00069b bfe1      	OUT  0x31,R30
                 ; 0000 0184 
                 ; 0000 0185 // Timer/Counter 1 initialization
                 ; 0000 0186 // Clock source: System Clock
                 ; 0000 0187 // Clock value: Timer1 Stopped
                 ; 0000 0188 // Mode: Normal top=0xFFFF
                 ; 0000 0189 // OC1A output: Disconnected
                 ; 0000 018A // OC1B output: Disconnected
                 ; 0000 018B // OC1C output: Disconnected
                 ; 0000 018C // Noise Canceler: Off
                 ; 0000 018D // Input Capture on Falling Edge
                 ; 0000 018E // Timer1 Overflow Interrupt: Off
                 ; 0000 018F // Input Capture Interrupt: Off
                 ; 0000 0190 // Compare A Match Interrupt: Off
                 ; 0000 0191 // Compare B Match Interrupt: Off
                 ; 0000 0192 // Compare C Match Interrupt: Off
                 ; 0000 0193 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
00069c bdef      	OUT  0x2F,R30
                 ; 0000 0194 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00069d bdee      	OUT  0x2E,R30
                 ; 0000 0195 TCNT1H=0x00;
00069e bded      	OUT  0x2D,R30
                 ; 0000 0196 TCNT1L=0x00;
00069f bdec      	OUT  0x2C,R30
                 ; 0000 0197 ICR1H=0x00;
0006a0 bde7      	OUT  0x27,R30
                 ; 0000 0198 ICR1L=0x00;
0006a1 bde6      	OUT  0x26,R30
                 ; 0000 0199 OCR1AH=0x00;
0006a2 bdeb      	OUT  0x2B,R30
                 ; 0000 019A OCR1AL=0x00;
0006a3 bdea      	OUT  0x2A,R30
                 ; 0000 019B OCR1BH=0x00;
0006a4 bde9      	OUT  0x29,R30
                 ; 0000 019C OCR1BL=0x00;
0006a5 bde8      	OUT  0x28,R30
                 ; 0000 019D OCR1CH=0x00;
0006a6 93e0 0079 	STS  121,R30
                 ; 0000 019E OCR1CL=0x00;
0006a8 93e0 0078 	STS  120,R30
                 ; 0000 019F 
                 ; 0000 01A0 // Timer/Counter 2 initialization
                 ; 0000 01A1 // Clock source: System Clock
                 ; 0000 01A2 // Clock value: 125.000 kHz
                 ; 0000 01A3 // Mode: Normal top=0xFF
                 ; 0000 01A4 // OC2 output: Disconnected
                 ; 0000 01A5 // Timer Period: 1 ms
                 ; 0000 01A6 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (1<<CS21) | (1<<CS20);
0006aa e0e3      	LDI  R30,LOW(3)
0006ab bde5      	OUT  0x25,R30
                 ; 0000 01A7 TCNT2=0x83;
0006ac e8e3      	LDI  R30,LOW(131)
0006ad bde4      	OUT  0x24,R30
                 ; 0000 01A8 OCR2=0x00;
0006ae e0e0      	LDI  R30,LOW(0)
0006af bde3      	OUT  0x23,R30
                 ; 0000 01A9 
                 ; 0000 01AA // Timer/Counter 3 initialization
                 ; 0000 01AB // Clock source: System Clock
                 ; 0000 01AC // Clock value: Timer3 Stopped
                 ; 0000 01AD // Mode: Normal top=0xFFFF
                 ; 0000 01AE // OC3A output: Disconnected
                 ; 0000 01AF // OC3B output: Disconnected
                 ; 0000 01B0 // OC3C output: Disconnected
                 ; 0000 01B1 // Noise Canceler: Off
                 ; 0000 01B2 // Input Capture on Falling Edge
                 ; 0000 01B3 // Timer3 Overflow Interrupt: Off
                 ; 0000 01B4 // Input Capture Interrupt: Off
                 ; 0000 01B5 // Compare A Match Interrupt: Off
                 ; 0000 01B6 // Compare B Match Interrupt: Off
                 ; 0000 01B7 // Compare C Match Interrupt: Off
                 ; 0000 01B8 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0006b0 93e0 008b 	STS  139,R30
                 ; 0000 01B9 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
0006b2 93e0 008a 	STS  138,R30
                 ; 0000 01BA TCNT3H=0x00;
0006b4 93e0 0089 	STS  137,R30
                 ; 0000 01BB TCNT3L=0x00;
0006b6 93e0 0088 	STS  136,R30
                 ; 0000 01BC ICR3H=0x00;
0006b8 93e0 0081 	STS  129,R30
                 ; 0000 01BD ICR3L=0x00;
0006ba 93e0 0080 	STS  128,R30
                 ; 0000 01BE OCR3AH=0x00;
0006bc 93e0 0087 	STS  135,R30
                 ; 0000 01BF OCR3AL=0x00;
0006be 93e0 0086 	STS  134,R30
                 ; 0000 01C0 OCR3BH=0x00;
0006c0 93e0 0085 	STS  133,R30
                 ; 0000 01C1 OCR3BL=0x00;
0006c2 93e0 0084 	STS  132,R30
                 ; 0000 01C2 OCR3CH=0x00;
0006c4 93e0 0083 	STS  131,R30
                 ; 0000 01C3 OCR3CL=0x00;
0006c6 93e0 0082 	STS  130,R30
                 ; 0000 01C4 
                 ; 0000 01C5 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01C6 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0006c8 e4e1      	LDI  R30,LOW(65)
0006c9 bfe7      	OUT  0x37,R30
                 ; 0000 01C7 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0006ca e0e0      	LDI  R30,LOW(0)
0006cb 93e0 007d 	STS  125,R30
                 ; 0000 01C8 
                 ; 0000 01C9 // External Interrupt(s) initialization
                 ; 0000 01CA // INT0: Off
                 ; 0000 01CB // INT1: Off
                 ; 0000 01CC // INT2: Off
                 ; 0000 01CD // INT3: Off
                 ; 0000 01CE // INT4: Off
                 ; 0000 01CF // INT5: Off
                 ; 0000 01D0 // INT6: Off
                 ; 0000 01D1 // INT7: Off
                 ; 0000 01D2 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0006cd 93e0 006a 	STS  106,R30
                 ; 0000 01D3 EICRB=(1<<ISC71) | (1<<ISC70) | (1<<ISC61) | (1<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
0006cf efe0      	LDI  R30,LOW(240)
0006d0 bfea      	OUT  0x3A,R30
                 ; 0000 01D4 EIMSK=(1<<INT7) | (1<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
0006d1 ece0      	LDI  R30,LOW(192)
0006d2 bfe9      	OUT  0x39,R30
                 ; 0000 01D5 EIFR=(1<<INTF7) | (1<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (0<<INTF1) | (0<<INTF0);
0006d3 bfe8      	OUT  0x38,R30
                 ; 0000 01D6 
                 ; 0000 01D7 // USART0 initialization
                 ; 0000 01D8 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01D9 // USART0 Receiver: On
                 ; 0000 01DA // USART0 Transmitter: On
                 ; 0000 01DB // USART0 Mode: Asynchronous
                 ; 0000 01DC // USART0 Baud Rate: 9600
                 ; 0000 01DD UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0006d4 e0e0      	LDI  R30,LOW(0)
0006d5 b9eb      	OUT  0xB,R30
                 ; 0000 01DE UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0006d6 ede8      	LDI  R30,LOW(216)
0006d7 b9ea      	OUT  0xA,R30
                 ; 0000 01DF UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0006d8 e0e6      	LDI  R30,LOW(6)
0006d9 93e0 0095 	STS  149,R30
                 ; 0000 01E0 UBRR0H=0x00;
0006db e0e0      	LDI  R30,LOW(0)
0006dc 93e0 0090 	STS  144,R30
                 ; 0000 01E1 UBRR0L=0x33;
0006de e3e3      	LDI  R30,LOW(51)
0006df b9e9      	OUT  0x9,R30
                 ; 0000 01E2 
                 ; 0000 01E3 // USART1 initialization
                 ; 0000 01E4 // USART1 disabled
                 ; 0000 01E5 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
0006e0 e0e0      	LDI  R30,LOW(0)
0006e1 93e0 009a 	STS  154,R30
                 ; 0000 01E6 
                 ; 0000 01E7 // Analog Comparator initialization
                 ; 0000 01E8 // Analog Comparator: Off
                 ; 0000 01E9 // The Analog Comparator's positive input is
                 ; 0000 01EA // connected to the AIN0 pin
                 ; 0000 01EB // The Analog Comparator's negative input is
                 ; 0000 01EC // connected to the AIN1 pin
                 ; 0000 01ED ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0006e3 e8e0      	LDI  R30,LOW(128)
0006e4 b9e8      	OUT  0x8,R30
                 ; 0000 01EE SFIOR=(0<<ACME);
0006e5 e0e0      	LDI  R30,LOW(0)
0006e6 bde0      	OUT  0x20,R30
                 ; 0000 01EF 
                 ; 0000 01F0 // ADC initialization
                 ; 0000 01F1 // ADC disabled
                 ; 0000 01F2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0006e7 b9e6      	OUT  0x6,R30
                 ; 0000 01F3 
                 ; 0000 01F4 // SPI initialization
                 ; 0000 01F5 // SPI disabled
                 ; 0000 01F6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0006e8 b9ed      	OUT  0xD,R30
                 ; 0000 01F7 
                 ; 0000 01F8 // TWI initialization
                 ; 0000 01F9 // TWI disabled
                 ; 0000 01FA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0006e9 93e0 0074 	STS  116,R30
                 ; 0000 01FB 
                 ; 0000 01FC // Bit-Banged I2C Bus initialization
                 ; 0000 01FD // I2C Port: PORTD
                 ; 0000 01FE // I2C SDA bit: 1
                 ; 0000 01FF // I2C SCL bit: 0
                 ; 0000 0200 // Bit Rate: 100 kHz
                 ; 0000 0201 // Note: I2C settings are specified in the
                 ; 0000 0202 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 0203 i2c_init();
0006eb 940e 11ac 	CALL _i2c_init
                 ; 0000 0204 
                 ; 0000 0205 // DS1307 Real Time Clock initialization
                 ; 0000 0206 // Square wave output on pin SQW/OUT: On
                 ; 0000 0207 // Square wave frequency: 32768Hz
                 ; 0000 0208 rtc_init(3,1,0);
0006ed e0e3      	LDI  R30,LOW(3)
0006ee 93ea      	ST   -Y,R30
0006ef e0e1      	LDI  R30,LOW(1)
0006f0 93ea      	ST   -Y,R30
0006f1 e0a0      	LDI  R26,LOW(0)
0006f2 d0c3      	RCALL _rtc_init
                 ; 0000 0209 
                 ; 0000 020A // Graphic Display Controller initialization
                 ; 0000 020B // The PCD8544 connections are specified in the
                 ; 0000 020C // Project|Configure|C Compiler|Libraries|Graphic Display menu:
                 ; 0000 020D // SDIN - PORTC Bit 7
                 ; 0000 020E // SCLK - PORTA Bit 7
                 ; 0000 020F // D /C - PORTC Bit 6
                 ; 0000 0210 // /SCE - PORTC Bit 5
                 ; 0000 0211 // /RES - PORTC Bit 4
                 ; 0000 0212 
                 ; 0000 0213 // Specify the current font for displaying text
                 ; 0000 0214 glcd_init_data.font=font5x7;
0006f3 e8ec      	LDI  R30,LOW(_font5x7*2)
0006f4 e0f0      	LDI  R31,HIGH(_font5x7*2)
0006f5 83e8      	ST   Y,R30
0006f6 83f9      	STD  Y+1,R31
                 ; 0000 0215 // No function is used for reading
                 ; 0000 0216 // image data from external memory
                 ; 0000 0217 glcd_init_data.readxmem=NULL;
0006f7 e0e0      	LDI  R30,LOW(0)
0006f8 83ea      	STD  Y+2,R30
0006f9 83eb      	STD  Y+2+1,R30
                 ; 0000 0218 // No function is used for writing
                 ; 0000 0219 // image data to external memory
                 ; 0000 021A glcd_init_data.writexmem=NULL;
0006fa 83ec      	STD  Y+4,R30
0006fb 83ed      	STD  Y+4+1,R30
                 ; 0000 021B // Set the LCD temperature coefficient
                 ; 0000 021C glcd_init_data.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
0006fc 81ee      	LDD  R30,Y+6
0006fd 7fec      	ANDI R30,LOW(0xFC)
0006fe 83ee      	STD  Y+6,R30
                 ; 0000 021D // Set the LCD bias
                 ; 0000 021E glcd_init_data.bias=PCD8544_DEFAULT_BIAS;
0006ff 7ee3      	ANDI R30,LOW(0xE3)
000700 60ec      	ORI  R30,LOW(0xC)
000701 83ee      	STD  Y+6,R30
                 ; 0000 021F // Set the LCD contrast control voltage VLCD
                 ; 0000 0220 glcd_init_data.vlcd=PCD8544_DEFAULT_VLCD;
000702 81ef      	LDD  R30,Y+7
000703 78e0      	ANDI R30,LOW(0x80)
000704 63e2      	ORI  R30,LOW(0x32)
000705 83ef      	STD  Y+7,R30
                 ; 0000 0221 
                 ; 0000 0222 glcd_init(&glcd_init_data);
000706 01de      	MOVW R26,R28
000707 940e 08b2 	CALL _glcd_init
                 ; 0000 0223 
                 ; 0000 0224 // Global enable interrupts
                 ; 0000 0225 #asm("sei")
000709 9478      	sei
                 ; 0000 0226 
                 ; 0000 0227 delay_ms(1000);
00070a eea8      	LDI  R26,LOW(1000)
00070b e0b3      	LDI  R27,HIGH(1000)
00070c 940e 11fd 	CALL _delay_ms
                 ; 0000 0228 //wifi_connect();
                 ; 0000 0229 
                 ; 0000 022A RF_Init_RX();
00070e dd74      	RCALL _RF_Init_RX
                 ; 0000 022B config();
00070f dd0d      	RCALL _config
                 ; 0000 022C RF_Config_RX();
000710 ddd6      	RCALL _RF_Config_RX
                 ; 0000 022D count = 1;
000711 940e 10c5 	CALL SUBOPT_0x24
                 ; 0000 022E glcd_clear();
000713 940e 093b 	CALL _glcd_clear
                 ; 0000 022F 
                 ; 0000 0230 while (1){
                 _0xDE:
                 ; 0000 0231     if (menu==0){
000715 999b      	SBIC 0x13,3
000716 c047      	RJMP _0xE1
                 ; 0000 0232         while(1){
                 _0xE2:
                 ; 0000 0233             RF_Mode_RX();
000717 ddc9      	RCALL _RF_Mode_RX
                 ; 0000 0234             if(IRQ == 0){
000718 99c8      	SBIC 0x19,0
000719 c043      	RJMP _0xE5
                 ; 0000 0235                 RF_Read_RX_3();
00071a 940e 10cc 	CALL SUBOPT_0x25
                 ; 0000 0236                 if(station_receive.flag == count){
00071c f009      	BREQ PC+2
00071d c03f      	RJMP _0xE6
                 ; 0000 0237                     border();
00071e de04      	RCALL _border
                 ; 0000 0238                     glcd_moveto(40, 3);
00071f e2e8      	LDI  R30,LOW(40)
000720 940e 1069 	CALL SUBOPT_0x13
                 ; 0000 0239                     itoa(station_receive.flag, buff);
000722 940e 10d6 	CALL SUBOPT_0x26
                 ; 0000 023A                     glcd_outtext(buff);
                 ; 0000 023B                     glcd_moveto(46, 18);
000724 e2ee      	LDI  R30,LOW(46)
000725 940e 1072 	CALL SUBOPT_0x15
                 ; 0000 023C                     sprintf(buff, "%d", station_receive.temp);
000727 940e 1015 	CALL SUBOPT_0x7
000729 940e 10db 	CALL SUBOPT_0x27
00072b 940e 109c 	CALL SUBOPT_0x1D
00072d 940e 10e0 	CALL SUBOPT_0x28
                 ; 0000 023D                     glcd_outtext(buff);
                 ; 0000 023E                     glcd_moveto(46, 28);
00072f 940e 1076 	CALL SUBOPT_0x16
                 ; 0000 023F                     sprintf(buff, "%d", station_receive.humi);
000731 940e 1015 	CALL SUBOPT_0x7
000733 940e 10db 	CALL SUBOPT_0x27
000735 940e 10ab 	CALL SUBOPT_0x20
000737 940e 10e0 	CALL SUBOPT_0x28
                 ; 0000 0240                     glcd_outtext(buff);
                 ; 0000 0241                     glcd_moveto(46, 37);
000739 940e 107a 	CALL SUBOPT_0x17
                 ; 0000 0242                     sprintf(buff, "%d", station_receive.sm);
00073b 940e 1015 	CALL SUBOPT_0x7
00073d 940e 10db 	CALL SUBOPT_0x27
00073f 940e 10b0 	CALL SUBOPT_0x21
000741 940e 10ee 	CALL SUBOPT_0x29
                 ; 0000 0243                     glcd_outtext(buff);
                 ; 0000 0244                     read_and_send(key[count]);
000743 940e 0ff4 	CALL SUBOPT_0x1
000745 e5ad      	LDI  R26,LOW(_key)
000746 e0b8      	LDI  R27,HIGH(_key)
000747 0fee      	LSL  R30
000748 1fff      	ROL  R31
000749 0fae      	ADD  R26,R30
00074a 1fbf      	ADC  R27,R31
00074b 940e 122c 	CALL __GETW1P
00074d 01df      	MOVW R26,R30
00074e de22      	RCALL _read_and_send
                 ; 0000 0245                     delay_ms(800);
00074f 940e 10fa 	CALL SUBOPT_0x2A
                 ; 0000 0246                     count++;
                 ; 0000 0247                     if(count == 5)
000751 91a0 07df 	LDS  R26,_count
000753 91b0 07e0 	LDS  R27,_count+1
000755 9715      	SBIW R26,5
000756 f411      	BRNE _0xE7
                 ; 0000 0248                         count = 1;
000757 940e 10c5 	CALL SUBOPT_0x24
                 ; 0000 0249                     dem = 0;
                 _0xE7:
000759 940e 1003 	CALL SUBOPT_0x4
                 ; 0000 024A                     flag = true;
00075b e0e1      	LDI  R30,LOW(1)
00075c 2e6e      	MOV  R6,R30
                 ; 0000 024B                 }
                 ; 0000 024C             }
                 _0xE6:
                 ; 0000 024D         }
                 _0xE5:
00075d cfb9      	RJMP _0xE2
                 ; 0000 024E     }
                 ; 0000 024F     if (back==0){
                 _0xE1:
00075e 999a      	SBIC 0x13,2
00075f c054      	RJMP _0xE8
                 ; 0000 0250         while(1){
                 _0xE9:
                 ; 0000 0251             check_rain();
000760 dece      	RCALL _check_rain
                 ; 0000 0252             RF_Mode_RX();
000761 dd7f      	RCALL _RF_Mode_RX
                 ; 0000 0253             if(IRQ == 0){
000762 99c8      	SBIC 0x19,0
000763 c04f      	RJMP _0xEC
                 ; 0000 0254                 RF_Read_RX_3();
000764 940e 10cc 	CALL SUBOPT_0x25
                 ; 0000 0255                 if(station_receive.flag == count){
000766 f009      	BREQ PC+2
000767 c04b      	RJMP _0xED
                 ; 0000 0256                     border();
000768 ddba      	RCALL _border
                 ; 0000 0257                     glcd_moveto(40, 3);
000769 e2e8      	LDI  R30,LOW(40)
00076a 940e 1069 	CALL SUBOPT_0x13
                 ; 0000 0258                     itoa(station_receive.flag, buff);
00076c 940e 10d6 	CALL SUBOPT_0x26
                 ; 0000 0259                     glcd_outtext(buff);
                 ; 0000 025A                     glcd_moveto(46, 18);
00076e e2ee      	LDI  R30,LOW(46)
00076f 940e 1072 	CALL SUBOPT_0x15
                 ; 0000 025B                     sprintf(buff, "%d", station_receive.temp);
000771 940e 1015 	CALL SUBOPT_0x7
000773 940e 10db 	CALL SUBOPT_0x27
000775 940e 109c 	CALL SUBOPT_0x1D
000777 940e 10e0 	CALL SUBOPT_0x28
                 ; 0000 025C                     glcd_outtext(buff);
                 ; 0000 025D                     glcd_moveto(46, 28);
000779 940e 1076 	CALL SUBOPT_0x16
                 ; 0000 025E                     sprintf(buff, "%d", station_receive.humi);
00077b 940e 1015 	CALL SUBOPT_0x7
00077d 940e 10db 	CALL SUBOPT_0x27
00077f 940e 10ab 	CALL SUBOPT_0x20
000781 940e 10e0 	CALL SUBOPT_0x28
                 ; 0000 025F                     glcd_outtext(buff);
                 ; 0000 0260                     glcd_moveto(46, 37);
000783 940e 107a 	CALL SUBOPT_0x17
                 ; 0000 0261                     sprintf(buff, "%d", station_receive.sm);
000785 940e 1015 	CALL SUBOPT_0x7
000787 940e 10db 	CALL SUBOPT_0x27
000789 940e 10b0 	CALL SUBOPT_0x21
00078b 940e 10ee 	CALL SUBOPT_0x29
                 ; 0000 0262                     glcd_outtext(buff);
                 ; 0000 0263                     delay_ms(800);
00078d 940e 10fa 	CALL SUBOPT_0x2A
                 ; 0000 0264                     count++;
                 ; 0000 0265                     if(station_receive.light == 1){
                +
00078f 91a0 083a+LDS R26 , _station_receive + ( 2 )
000791 91b0 083b+LDS R27 , _station_receive + ( 2 ) + 1
                 	__GETW2MN _station_receive,2
000793 9711      	SBIW R26,1
000794 f451      	BRNE _0xEE
                 ; 0000 0266                         //rtc_get_time(&start_h, &start_m, &start_s);
                 ; 0000 0267                         start_rain = true;
000795 e0e1      	LDI  R30,LOW(1)
000796 93e0 07ef 	STS  _start_rain,R30
                 ; 0000 0268                         rain_state[count] = 1;
000798 940e 0ff4 	CALL SUBOPT_0x1
00079a 940e 0ff9 	CALL SUBOPT_0x2
00079c e0e1      	LDI  R30,LOW(1)
00079d e0f0      	LDI  R31,HIGH(1)
00079e c006      	RJMP _0xF2
                 ; 0000 0269 
                 ; 0000 026A                     }
                 ; 0000 026B                     else {
                 _0xEE:
                 ; 0000 026C                         rain_state[count] = 0;
00079f 940e 0ff4 	CALL SUBOPT_0x1
0007a1 940e 0ff9 	CALL SUBOPT_0x2
0007a3 e0e0      	LDI  R30,LOW(0)
0007a4 e0f0      	LDI  R31,HIGH(0)
                 _0xF2:
0007a5 93ed      	ST   X+,R30
0007a6 93fc      	ST   X,R31
                 ; 0000 026D                     }
                 ; 0000 026E 
                 ; 0000 026F                     if(count == 5)
0007a7 91a0 07df 	LDS  R26,_count
0007a9 91b0 07e0 	LDS  R27,_count+1
0007ab 9715      	SBIW R26,5
0007ac f411      	BRNE _0xF0
                 ; 0000 0270                         count = 1;
0007ad 940e 10c5 	CALL SUBOPT_0x24
                 ; 0000 0271                     dem = 0;
                 _0xF0:
0007af 940e 1003 	CALL SUBOPT_0x4
                 ; 0000 0272                     flag = true;
0007b1 e0e1      	LDI  R30,LOW(1)
0007b2 2e6e      	MOV  R6,R30
                 ; 0000 0273                 }
                 ; 0000 0274             }
                 _0xED:
                 ; 0000 0275         }
                 _0xEC:
0007b3 cfac      	RJMP _0xE9
                 ; 0000 0276     }
                 ; 0000 0277 }
                 _0xE8:
0007b4 cf60      	RJMP _0xDE
                 ; 0000 0278 }
                 _0xF1:
0007b5 cfff      	RJMP _0xF1
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
0007b6 93aa      	ST   -Y,R26
0007b7 81ea      	LDD  R30,Y+2
0007b8 70e3      	ANDI R30,LOW(0x3)
0007b9 83ea      	STD  Y+2,R30
0007ba 81e9      	LDD  R30,Y+1
0007bb 30e0      	CPI  R30,0
0007bc f019      	BREQ _0x2000003
0007bd 81ea      	LDD  R30,Y+2
0007be 61e0      	ORI  R30,0x10
0007bf 83ea      	STD  Y+2,R30
                 _0x2000003:
0007c0 81e8      	LD   R30,Y
0007c1 30e0      	CPI  R30,0
0007c2 f019      	BREQ _0x2000004
0007c3 81ea      	LDD  R30,Y+2
0007c4 68e0      	ORI  R30,0x80
0007c5 83ea      	STD  Y+2,R30
                 _0x2000004:
0007c6 940e 11b1 	CALL _i2c_start
0007c8 eda0      	LDI  R26,LOW(208)
0007c9 940e 11e5 	CALL _i2c_write
0007cb e0a7      	LDI  R26,LOW(7)
0007cc 940e 11e5 	CALL _i2c_write
0007ce 81aa      	LDD  R26,Y+2
0007cf 940e 11e5 	CALL _i2c_write
0007d1 940e 11c0 	CALL _i2c_stop
0007d3 940c 088b 	JMP  _0x216000E
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0007d5 93ba      	ST   -Y,R27
0007d6 93aa      	ST   -Y,R26
0007d7 81b9          ldd  r27,y+1
0007d8 81a8          ld   r26,y
0007d9 9610          adiw r26,0
0007da f031          breq memset1
0007db 81fc          ldd  r31,y+4
0007dc 81eb          ldd  r30,y+3
0007dd 816a          ldd  r22,y+2
                 memset0:
0007de 9361          st   z+,r22
0007df 9711          sbiw r26,1
0007e0 f7e9          brne memset0
                 memset1:
0007e1 81eb          ldd  r30,y+3
0007e2 81fc          ldd  r31,y+4
0007e3 940c 0e13 	JMP  _0x2160005
                 ; .FEND
                 _strcat:
                 ; .FSTART _strcat
0007e5 93ba      	ST   -Y,R27
0007e6 93aa      	ST   -Y,R26
0007e7 91e9          ld   r30,y+
0007e8 91f9          ld   r31,y+
0007e9 91a9          ld   r26,y+
0007ea 91b9          ld   r27,y+
0007eb 01cd          movw r24,r26
                 strcat0:
0007ec 916d          ld   r22,x+
0007ed 2366          tst  r22
0007ee f7e9          brne strcat0
0007ef 9711          sbiw r26,1
                 strcat1:
0007f0 9161          ld   r22,z+
0007f1 936d          st   x+,r22
0007f2 2366          tst  r22
0007f3 f7e1          brne strcat1
0007f4 01fc          movw r30,r24
0007f5 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0007f6 93ba      	ST   -Y,R27
0007f7 93aa      	ST   -Y,R26
0007f8 91a9          ld   r26,y+
0007f9 91b9          ld   r27,y+
0007fa 27ee          clr  r30
0007fb 27ff          clr  r31
                 strlen0:
0007fc 916d          ld   r22,x+
0007fd 2366          tst  r22
0007fe f011          breq strlen1
0007ff 9631          adiw r30,1
000800 cffb          rjmp strlen0
                 strlen1:
000801 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000802 93ba      	ST   -Y,R27
000803 93aa      	ST   -Y,R26
000804 27aa          clr  r26
000805 27bb          clr  r27
000806 91e9          ld   r30,y+
000807 91f9          ld   r31,y+
                 strlenf0:
000808 9005      	lpm  r0,z+
000809 2000          tst  r0
00080a f011          breq strlenf1
00080b 9611          adiw r26,1
00080c cffb          rjmp strlenf0
                 strlenf1:
00080d 01fd          movw r30,r26
00080e 9508          ret
                 ; .FEND
                 _strstr:
                 ; .FSTART _strstr
00080f 93ba      	ST   -Y,R27
000810 93aa      	ST   -Y,R26
000811 81aa          ldd  r26,y+2
000812 81bb          ldd  r27,y+3
000813 01cd          movw r24,r26
                 strstr0:
000814 81e8          ld   r30,y
000815 81f9          ldd  r31,y+1
                 strstr1:
000816 9171          ld   r23,z+
000817 2377          tst  r23
000818 f411          brne strstr2
000819 01fc          movw r30,r24
00081a c009          rjmp strstr3
                 strstr2:
00081b 916d          ld   r22,x+
00081c 1767          cp   r22,r23
00081d f3c1          breq strstr1
00081e 9601          adiw r24,1
00081f 01dc          movw r26,r24
000820 2366          tst  r22
000821 f791          brne strstr0
000822 27ee          clr  r30
000823 27ff          clr  r31
                 strstr3:
000824 940c 0957 	JMP  _0x216000B
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000826 93ba      	ST   -Y,R27
000827 93aa      	ST   -Y,R26
000828 91a9          ld   r26,y+
000829 91b9          ld   r27,y+
00082a 91e9          ld   r30,y+
00082b 91f9          ld   r31,y+
00082c 9630          adiw r30,0
00082d f42a          brpl __itoa0
00082e 95e0          com  r30
00082f 95f0          com  r31
000830 9631          adiw r30,1
000831 e26d          ldi  r22,'-'
000832 936d          st   x+,r22
                 __itoa0:
000833 94e8          clt
000834 e180          ldi  r24,low(10000)
000835 e297          ldi  r25,high(10000)
000836 d00d          rcall __itoa1
000837 ee88          ldi  r24,low(1000)
000838 e093          ldi  r25,high(1000)
000839 d00a          rcall __itoa1
00083a e684          ldi  r24,100
00083b 2799          clr  r25
00083c d007          rcall __itoa1
00083d e08a          ldi  r24,10
00083e d005          rcall __itoa1
00083f 2f6e          mov  r22,r30
000840 d010          rcall __itoa5
000841 2766          clr  r22
000842 936c          st   x,r22
000843 9508          ret
                 
                 __itoa1:
000844 2766          clr	 r22
                 __itoa2:
000845 17e8          cp   r30,r24
000846 07f9          cpc  r31,r25
000847 f020          brlo __itoa3
000848 9563          inc  r22
000849 1be8          sub  r30,r24
00084a 0bf9          sbc  r31,r25
00084b f7c9          brne __itoa2
                 __itoa3:
00084c 2366          tst  r22
00084d f411          brne __itoa4
00084e f016          brts __itoa5
00084f 9508          ret
                 __itoa4:
000850 9468          set
                 __itoa5:
000851 5d60          subi r22,-0x30
000852 936d          st   x+,r22
000853 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G103:
                 ; .FSTART _pcd8544_delay_G103
000854 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G103:
                 ; .FSTART _pcd8544_wrbus_G103
000855 93aa      	ST   -Y,R26
000856 931a      	ST   -Y,R17
000857 98ad      	CBI  0x15,5
000858 e018      	LDI  R17,LOW(8)
                 _0x2060004:
000859 dffa      	RCALL _pcd8544_delay_G103
00085a 81e9      	LDD  R30,Y+1
00085b 78e0      	ANDI R30,LOW(0x80)
00085c f011      	BREQ _0x2060006
00085d 9aaf      	SBI  0x15,7
00085e c001      	RJMP _0x2060007
                 _0x2060006:
00085f 98af      	CBI  0x15,7
                 _0x2060007:
000860 81e9      	LDD  R30,Y+1
000861 0fee      	LSL  R30
000862 83e9      	STD  Y+1,R30
000863 dff0      	RCALL _pcd8544_delay_G103
000864 9adf      	SBI  0x1B,7
000865 dfee      	RCALL _pcd8544_delay_G103
000866 98df      	CBI  0x1B,7
000867 5011      	SUBI R17,LOW(1)
000868 f781      	BRNE _0x2060004
000869 9aad      	SBI  0x15,5
00086a 8118      	LDD  R17,Y+0
00086b c03a      	RJMP _0x216000D
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
00086c 93aa      	ST   -Y,R26
00086d 98ae      	CBI  0x15,6
00086e 81a8      	LD   R26,Y
00086f dfe5      	RCALL _pcd8544_wrbus_G103
000870 c0c8      	RJMP _0x216000C
                 ; .FEND
                 _pcd8544_wrdata_G103:
                 ; .FSTART _pcd8544_wrdata_G103
000871 93aa      	ST   -Y,R26
000872 9aae      	SBI  0x15,6
000873 81a8      	LD   R26,Y
000874 dfe0      	RCALL _pcd8544_wrbus_G103
000875 c0c3      	RJMP _0x216000C
                 ; .FEND
                 _pcd8544_setaddr_G103:
                 ; .FSTART _pcd8544_setaddr_G103
000876 93aa      	ST   -Y,R26
000877 931a      	ST   -Y,R17
000878 81e9      	LDD  R30,Y+1
000879 95e6      	LSR  R30
00087a 95e6      	LSR  R30
00087b 95e6      	LSR  R30
00087c 2f1e      	MOV  R17,R30
00087d e5e4      	LDI  R30,LOW(84)
00087e 9fe1      	MUL  R30,R17
00087f 01f0      	MOVW R30,R0
000880 01df      	MOVW R26,R30
000881 81ea      	LDD  R30,Y+2
000882 e0f0      	LDI  R31,0
000883 0fea      	ADD  R30,R26
000884 1ffb      	ADC  R31,R27
000885 93e0 086b 	STS  _gfx_addr_G103,R30
000887 93f0 086c 	STS  _gfx_addr_G103+1,R31
000889 2fe1      	MOV  R30,R17
00088a 8118      	LDD  R17,Y+0
                 _0x216000E:
00088b 9623      	ADIW R28,3
00088c 9508      	RET
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
00088d 93aa      	ST   -Y,R26
00088e 81e9      	LDD  R30,Y+1
00088f 68e0      	ORI  R30,0x80
000890 2fae      	MOV  R26,R30
000891 dfda      	RCALL _pcd8544_wrcmd
000892 81e9      	LDD  R30,Y+1
000893 93ea      	ST   -Y,R30
000894 81a9      	LDD  R26,Y+1
000895 dfe0      	RCALL _pcd8544_setaddr_G103
000896 64e0      	ORI  R30,0x40
000897 2fae      	MOV  R26,R30
000898 dfd3      	RCALL _pcd8544_wrcmd
000899 c00c      	RJMP _0x216000D
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
00089a 93aa      	ST   -Y,R26
00089b 81e9      	LDD  R30,Y+1
00089c 93ea      	ST   -Y,R30
00089d 81a9      	LDD  R26,Y+1
00089e dfee      	RCALL _pcd8544_gotoxy
00089f 91e0 086b 	LDS  R30,_gfx_addr_G103
0008a1 91f0 086c 	LDS  R31,_gfx_addr_G103+1
0008a3 59e3      	SUBI R30,LOW(-_gfx_buffer_G103)
0008a4 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
0008a5 81e0      	LD   R30,Z
                 _0x216000D:
0008a6 9622      	ADIW R28,2
0008a7 9508      	RET
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
0008a8 93aa      	ST   -Y,R26
0008a9 940e 10ff 	CALL SUBOPT_0x2B
0008ab 9731      	SBIW R30,1
0008ac 59e3      	SUBI R30,LOW(-_gfx_buffer_G103)
0008ad 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
0008ae 81a8      	LD   R26,Y
0008af 83a0      	STD  Z+0,R26
0008b0 dfc0      	RCALL _pcd8544_wrdata_G103
0008b1 c087      	RJMP _0x216000C
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0008b2 93ba      	ST   -Y,R27
0008b3 93aa      	ST   -Y,R26
0008b4 940e 1266 	CALL __SAVELOCR4
0008b6 9aa5      	SBI  0x14,5
0008b7 9aad      	SBI  0x15,5
0008b8 9ad7      	SBI  0x1A,7
0008b9 98df      	CBI  0x1B,7
0008ba 9aa7      	SBI  0x14,7
0008bb 9aa6      	SBI  0x14,6
0008bc 9aa4      	SBI  0x14,4
0008bd 98ac      	CBI  0x15,4
0008be e0aa      	LDI  R26,LOW(10)
0008bf e0b0      	LDI  R27,0
0008c0 940e 11fd 	CALL _delay_ms
0008c2 9aac      	SBI  0x15,4
0008c3 81ec      	LDD  R30,Y+4
0008c4 81fd      	LDD  R31,Y+4+1
0008c5 9730      	SBIW R30,0
0008c6 f121      	BREQ _0x2060008
0008c7 81e6      	LDD  R30,Z+6
0008c8 70e3      	ANDI R30,LOW(0x3)
0008c9 2f1e      	MOV  R17,R30
0008ca 81ec      	LDD  R30,Y+4
0008cb 81fd      	LDD  R31,Y+4+1
0008cc 81e6      	LDD  R30,Z+6
0008cd 95e6      	LSR  R30
0008ce 95e6      	LSR  R30
0008cf 70e7      	ANDI R30,LOW(0x7)
0008d0 2f0e      	MOV  R16,R30
0008d1 81ec      	LDD  R30,Y+4
0008d2 81fd      	LDD  R31,Y+4+1
0008d3 81e7      	LDD  R30,Z+7
0008d4 77ef      	ANDI R30,0x7F
0008d5 2f3e      	MOV  R19,R30
0008d6 81ac      	LDD  R26,Y+4
0008d7 81bd      	LDD  R27,Y+4+1
0008d8 940e 122c 	CALL __GETW1P
                +
0008da 93e0 0680+STS _glcd_state + ( 4 ) , R30
0008dc 93f0 0681+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
0008de 9612      	ADIW R26,2
0008df 940e 122c 	CALL __GETW1P
                +
0008e1 93e0 0695+STS _glcd_state + ( 25 ) , R30
0008e3 93f0 0696+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
0008e5 81ac      	LDD  R26,Y+4
0008e6 81bd      	LDD  R27,Y+4+1
0008e7 9614      	ADIW R26,4
0008e8 940e 122c 	CALL __GETW1P
0008ea c00d      	RJMP _0x20600A0
                 _0x2060008:
0008eb e010      	LDI  R17,LOW(0)
0008ec e003      	LDI  R16,LOW(3)
0008ed e332      	LDI  R19,LOW(50)
0008ee e0e0      	LDI  R30,LOW(0)
0008ef e0f0      	LDI  R31,HIGH(0)
                +
0008f0 93e0 0680+STS _glcd_state + ( 4 ) , R30
0008f2 93f0 0681+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
0008f4 93e0 0695+STS _glcd_state + ( 25 ) , R30
0008f6 93f0 0696+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20600A0:
                +
0008f8 93e0 0697+STS _glcd_state + ( 27 ) , R30
0008fa 93f0 0698+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
0008fc e2a1      	LDI  R26,LOW(33)
0008fd df6e      	RCALL _pcd8544_wrcmd
0008fe 2fe1      	MOV  R30,R17
0008ff 60e4      	ORI  R30,4
000900 2fae      	MOV  R26,R30
000901 df6a      	RCALL _pcd8544_wrcmd
000902 2fe0      	MOV  R30,R16
000903 61e0      	ORI  R30,0x10
000904 2fae      	MOV  R26,R30
000905 df66      	RCALL _pcd8544_wrcmd
000906 2fe3      	MOV  R30,R19
000907 68e0      	ORI  R30,0x80
000908 2fae      	MOV  R26,R30
000909 df62      	RCALL _pcd8544_wrcmd
00090a e2a0      	LDI  R26,LOW(32)
00090b df60      	RCALL _pcd8544_wrcmd
00090c e0a1      	LDI  R26,LOW(1)
00090d d022      	RCALL _glcd_display
00090e e0e1      	LDI  R30,LOW(1)
00090f 93e0 067c 	STS  _glcd_state,R30
000911 e0e0      	LDI  R30,LOW(0)
                +
000912 93e0 067d+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000914 e0e1      	LDI  R30,LOW(1)
                +
000915 93e0 0682+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000917 93e0 0683+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
000919 93e0 0684+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
00091b efef      	LDI  R30,LOW(255)
                +
00091c 93e0 0685+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
00091e e0e1      	LDI  R30,LOW(1)
                +
00091f 93e0 068c+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000921 e8ed     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000922 e0f6     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000923 93fa      	ST   -Y,R31
000924 93ea      	ST   -Y,R30
000925 efef      	LDI  R30,LOW(255)
000926 93ea      	ST   -Y,R30
000927 e0a8      	LDI  R26,LOW(8)
000928 e0b0      	LDI  R27,0
000929 940e 07d5 	CALL _memset
00092b d00f      	RCALL _glcd_clear
00092c e0e1      	LDI  R30,LOW(1)
00092d 940e 126d 	CALL __LOADLOCR4
00092f c082      	RJMP _0x216000A
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
000930 93aa      	ST   -Y,R26
000931 81e8      	LD   R30,Y
000932 30e0      	CPI  R30,0
000933 f011      	BREQ _0x206000A
000934 e0ec      	LDI  R30,LOW(12)
000935 c001      	RJMP _0x206000B
                 _0x206000A:
000936 e0e8      	LDI  R30,LOW(8)
                 _0x206000B:
000937 2fae      	MOV  R26,R30
000938 df33      	RCALL _pcd8544_wrcmd
                 _0x216000C:
000939 9621      	ADIW R28,1
00093a 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
00093b 940e 1266 	CALL __SAVELOCR4
00093d e030      	LDI  R19,0
                +
00093e 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000940 30e0      	CPI  R30,0
000941 f009      	BREQ _0x206000D
000942 ef3f      	LDI  R19,LOW(255)
                 _0x206000D:
000943 e0e0      	LDI  R30,LOW(0)
000944 93ea      	ST   -Y,R30
000945 e0a0      	LDI  R26,LOW(0)
000946 df46      	RCALL _pcd8544_gotoxy
                +
000947 ef08     +LDI R16 , LOW ( 504 )
000948 e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x206000E:
000949 01f8      	MOVW R30,R16
                +
00094a 5001     +SUBI R16 , LOW ( 1 )
00094b 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00094c 9730      	SBIW R30,0
00094d f019      	BREQ _0x2060010
00094e 2fa3      	MOV  R26,R19
00094f df58      	RCALL _pcd8544_wrbyte
000950 cff8      	RJMP _0x206000E
                 _0x2060010:
000951 e0e0      	LDI  R30,LOW(0)
000952 93ea      	ST   -Y,R30
000953 e0a0      	LDI  R26,LOW(0)
000954 d384      	RCALL _glcd_moveto
000955 940e 126d 	CALL __LOADLOCR4
                 _0x216000B:
000957 9624      	ADIW R28,4
000958 9508      	RET
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
000959 93aa      	ST   -Y,R26
00095a 931a      	ST   -Y,R17
00095b 930a      	ST   -Y,R16
00095c 81ac      	LDD  R26,Y+4
00095d 35a4      	CPI  R26,LOW(0x54)
00095e f418      	BRSH _0x2060012
00095f 81ab      	LDD  R26,Y+3
000960 33a0      	CPI  R26,LOW(0x30)
000961 f010      	BRLO _0x2060011
                 _0x2060012:
000962 940c 0e11 	JMP  _0x2160004
                 _0x2060011:
000964 81ec      	LDD  R30,Y+4
000965 93ea      	ST   -Y,R30
000966 81ac      	LDD  R26,Y+4
000967 df32      	RCALL _pcd8544_rdbyte
000968 2f1e      	MOV  R17,R30
000969 81eb      	LDD  R30,Y+3
00096a 70e7      	ANDI R30,LOW(0x7)
00096b e0a1      	LDI  R26,LOW(1)
00096c 940e 120f 	CALL __LSLB12
00096e 2f0e      	MOV  R16,R30
00096f 81ea      	LDD  R30,Y+2
000970 30e0      	CPI  R30,0
000971 f011      	BREQ _0x2060014
000972 2b10      	OR   R17,R16
000973 c003      	RJMP _0x2060015
                 _0x2060014:
000974 2fe0      	MOV  R30,R16
000975 95e0      	COM  R30
000976 231e      	AND  R17,R30
                 _0x2060015:
000977 2fa1      	MOV  R26,R17
000978 df2f      	RCALL _pcd8544_wrbyte
000979 940c 0e11 	JMP  _0x2160004
                 ; .FEND
                 _pcd8544_wrmasked_G103:
                 ; .FSTART _pcd8544_wrmasked_G103
00097b 93aa      	ST   -Y,R26
00097c 931a      	ST   -Y,R17
00097d 81ed      	LDD  R30,Y+5
00097e 93ea      	ST   -Y,R30
00097f 81ad      	LDD  R26,Y+5
000980 df19      	RCALL _pcd8544_rdbyte
000981 2f1e      	MOV  R17,R30
000982 81e9      	LDD  R30,Y+1
000983 30e7      	CPI  R30,LOW(0x7)
000984 f011      	BREQ _0x2060020
000985 30e8      	CPI  R30,LOW(0x8)
000986 f439      	BRNE _0x2060021
                 _0x2060020:
000987 81eb      	LDD  R30,Y+3
000988 93ea      	ST   -Y,R30
000989 81aa      	LDD  R26,Y+2
00098a 940e 0f88 	CALL _glcd_mappixcolor1bit
00098c 83eb      	STD  Y+3,R30
00098d c008      	RJMP _0x2060022
                 _0x2060021:
00098e 30e3      	CPI  R30,LOW(0x3)
00098f f421      	BRNE _0x2060024
000990 81eb      	LDD  R30,Y+3
000991 95e0      	COM  R30
000992 83eb      	STD  Y+3,R30
000993 c002      	RJMP _0x2060025
                 _0x2060024:
000994 30e0      	CPI  R30,0
000995 f421      	BRNE _0x2060026
                 _0x2060025:
                 _0x2060022:
000996 81ea      	LDD  R30,Y+2
000997 95e0      	COM  R30
000998 231e      	AND  R17,R30
000999 c002      	RJMP _0x2060027
                 _0x2060026:
00099a 30e2      	CPI  R30,LOW(0x2)
00099b f429      	BRNE _0x2060028
                 _0x2060027:
00099c 81ea      	LDD  R30,Y+2
00099d 81ab      	LDD  R26,Y+3
00099e 23ea      	AND  R30,R26
00099f 2b1e      	OR   R17,R30
0009a0 c00e      	RJMP _0x206001E
                 _0x2060028:
0009a1 30e1      	CPI  R30,LOW(0x1)
0009a2 f429      	BRNE _0x2060029
0009a3 81ea      	LDD  R30,Y+2
0009a4 81ab      	LDD  R26,Y+3
0009a5 23ea      	AND  R30,R26
0009a6 271e      	EOR  R17,R30
0009a7 c007      	RJMP _0x206001E
                 _0x2060029:
0009a8 30e4      	CPI  R30,LOW(0x4)
0009a9 f429      	BRNE _0x206001E
0009aa 81ea      	LDD  R30,Y+2
0009ab 95e0      	COM  R30
0009ac 81ab      	LDD  R26,Y+3
0009ad 2bea      	OR   R30,R26
0009ae 231e      	AND  R17,R30
                 _0x206001E:
0009af 2fa1      	MOV  R26,R17
0009b0 def7      	RCALL _pcd8544_wrbyte
0009b1 8118      	LDD  R17,Y+0
                 _0x216000A:
0009b2 9626      	ADIW R28,6
0009b3 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
0009b4 93aa      	ST   -Y,R26
0009b5 9723      	SBIW R28,3
0009b6 940e 1264 	CALL __SAVELOCR6
0009b8 89a8      	LDD  R26,Y+16
0009b9 35a4      	CPI  R26,LOW(0x54)
0009ba f448      	BRSH _0x206002C
0009bb 85af      	LDD  R26,Y+15
0009bc 33a0      	CPI  R26,LOW(0x30)
0009bd f430      	BRSH _0x206002C
0009be 85ae      	LDD  R26,Y+14
0009bf 30a0      	CPI  R26,LOW(0x0)
0009c0 f019      	BREQ _0x206002C
0009c1 85ad      	LDD  R26,Y+13
0009c2 30a0      	CPI  R26,LOW(0x0)
0009c3 f409      	BRNE _0x206002B
                 _0x206002C:
0009c4 c1d5      	RJMP _0x2160009
                 _0x206002B:
0009c5 85ee      	LDD  R30,Y+14
0009c6 87e8      	STD  Y+8,R30
0009c7 89a8      	LDD  R26,Y+16
0009c8 27bb      	CLR  R27
0009c9 85ee      	LDD  R30,Y+14
0009ca e0f0      	LDI  R31,0
0009cb 0fae      	ADD  R26,R30
0009cc 1fbf      	ADC  R27,R31
0009cd 35a5      	CPI  R26,LOW(0x55)
0009ce e0e0      	LDI  R30,HIGH(0x55)
0009cf 07be      	CPC  R27,R30
0009d0 f020      	BRLO _0x206002E
0009d1 89a8      	LDD  R26,Y+16
0009d2 e5e4      	LDI  R30,LOW(84)
0009d3 1bea      	SUB  R30,R26
0009d4 87ee      	STD  Y+14,R30
                 _0x206002E:
0009d5 852d      	LDD  R18,Y+13
0009d6 85af      	LDD  R26,Y+15
0009d7 27bb      	CLR  R27
0009d8 85ed      	LDD  R30,Y+13
0009d9 e0f0      	LDI  R31,0
0009da 0fae      	ADD  R26,R30
0009db 1fbf      	ADC  R27,R31
0009dc 97d1      	SBIW R26,49
0009dd f020      	BRLO _0x206002F
0009de 85af      	LDD  R26,Y+15
0009df e3e0      	LDI  R30,LOW(48)
0009e0 1bea      	SUB  R30,R26
0009e1 87ed      	STD  Y+13,R30
                 _0x206002F:
0009e2 85a9      	LDD  R26,Y+9
0009e3 30a6      	CPI  R26,LOW(0x6)
0009e4 f009      	BREQ PC+2
0009e5 c05b      	RJMP _0x2060030
0009e6 85ec      	LDD  R30,Y+12
0009e7 30e1      	CPI  R30,LOW(0x1)
0009e8 f409      	BRNE _0x2060034
0009e9 c1b0      	RJMP _0x2160009
                 _0x2060034:
0009ea 30e3      	CPI  R30,LOW(0x3)
0009eb f439      	BRNE _0x2060037
                +
0009ec 91e0 0697+LDS R30 , _glcd_state + ( 27 )
0009ee 91f0 0698+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
0009f0 9730      	SBIW R30,0
0009f1 f409      	BRNE _0x2060036
0009f2 c1a7      	RJMP _0x2160009
                 _0x2060036:
                 _0x2060037:
0009f3 8508      	LDD  R16,Y+8
0009f4 85ed      	LDD  R30,Y+13
0009f5 95e6      	LSR  R30
0009f6 95e6      	LSR  R30
0009f7 95e6      	LSR  R30
0009f8 2f3e      	MOV  R19,R30
0009f9 2fe2      	MOV  R30,R18
0009fa 70e7      	ANDI R30,LOW(0x7)
0009fb f419      	BRNE _0x2060039
0009fc 85ad      	LDD  R26,Y+13
0009fd 172a      	CP   R18,R26
0009fe f0e9      	BREQ _0x2060038
                 _0x2060039:
0009ff 2fa0      	MOV  R26,R16
000a00 27bb      	CLR  R27
000a01 2fe3      	MOV  R30,R19
000a02 e0f0      	LDI  R31,0
000a03 940e 1224 	CALL __MULW12U
000a05 85aa      	LDD  R26,Y+10
000a06 85bb      	LDD  R27,Y+10+1
000a07 940e 1102 	CALL SUBOPT_0x2C
000a09 9526      	LSR  R18
000a0a 9526      	LSR  R18
000a0b 9526      	LSR  R18
000a0c 2f53      	MOV  R21,R19
                 _0x206003B:
000a0d 935f      	PUSH R21
000a0e 5f5f      	SUBI R21,-1
000a0f 2fe2      	MOV  R30,R18
000a10 91af      	POP  R26
000a11 17ea      	CP   R30,R26
000a12 f048      	BRLO _0x206003D
000a13 2f10      	MOV  R17,R16
                 _0x206003E:
000a14 2fe1      	MOV  R30,R17
000a15 5011      	SUBI R17,1
000a16 30e0      	CPI  R30,0
000a17 f019      	BREQ _0x2060040
000a18 940e 1107 	CALL SUBOPT_0x2D
000a1a cff9      	RJMP _0x206003E
                 _0x2060040:
000a1b cff1      	RJMP _0x206003B
                 _0x206003D:
                 _0x2060038:
000a1c 85ae      	LDD  R26,Y+14
000a1d 170a      	CP   R16,R26
000a1e f111      	BREQ _0x2060041
000a1f 85ee      	LDD  R30,Y+14
000a20 85aa      	LDD  R26,Y+10
000a21 85bb      	LDD  R27,Y+10+1
000a22 e0f0      	LDI  R31,0
000a23 940e 1102 	CALL SUBOPT_0x2C
000a25 85ed      	LDD  R30,Y+13
000a26 70e7      	ANDI R30,LOW(0x7)
000a27 f009      	BREQ _0x2060042
000a28 5f3f      	SUBI R19,-LOW(1)
                 _0x2060042:
000a29 e020      	LDI  R18,LOW(0)
                 _0x2060043:
000a2a 932f      	PUSH R18
000a2b 5f2f      	SUBI R18,-1
000a2c 2fe3      	MOV  R30,R19
000a2d 91af      	POP  R26
000a2e 17ae      	CP   R26,R30
000a2f f488      	BRSH _0x2060045
000a30 851e      	LDD  R17,Y+14
                 _0x2060046:
000a31 931f      	PUSH R17
000a32 5f1f      	SUBI R17,-1
000a33 2fe0      	MOV  R30,R16
000a34 91af      	POP  R26
000a35 17ae      	CP   R26,R30
000a36 f418      	BRSH _0x2060048
000a37 940e 1107 	CALL SUBOPT_0x2D
000a39 cff7      	RJMP _0x2060046
                 _0x2060048:
000a3a 85ee      	LDD  R30,Y+14
000a3b 81ae      	LDD  R26,Y+6
000a3c 81bf      	LDD  R27,Y+6+1
000a3d e0f0      	LDI  R31,0
000a3e 940e 1102 	CALL SUBOPT_0x2C
000a40 cfe9      	RJMP _0x2060043
                 _0x2060045:
                 _0x2060041:
                 _0x2060030:
000a41 85ef      	LDD  R30,Y+15
000a42 70e7      	ANDI R30,LOW(0x7)
000a43 2f3e      	MOV  R19,R30
                 _0x2060049:
000a44 85ed      	LDD  R30,Y+13
000a45 30e0      	CPI  R30,0
000a46 f409      	BRNE PC+2
000a47 c152      	RJMP _0x206004B
000a48 85ea      	LDD  R30,Y+10
000a49 85fb      	LDD  R31,Y+10+1
000a4a 83ee      	STD  Y+6,R30
000a4b 83ff      	STD  Y+6+1,R31
000a4c e010      	LDI  R17,LOW(0)
000a4d 8908      	LDD  R16,Y+16
000a4e 3030      	CPI  R19,0
000a4f f009      	BREQ PC+2
000a50 c066      	RJMP _0x206004C
000a51 85ad      	LDD  R26,Y+13
000a52 30a8      	CPI  R26,LOW(0x8)
000a53 f408      	BRSH PC+2
000a54 c05d      	RJMP _0x206004D
000a55 85e9      	LDD  R30,Y+9
000a56 30e0      	CPI  R30,0
000a57 f011      	BREQ _0x2060052
000a58 30e3      	CPI  R30,LOW(0x3)
000a59 f409      	BRNE _0x2060053
                 _0x2060052:
000a5a c002      	RJMP _0x2060054
                 _0x2060053:
000a5b 30e7      	CPI  R30,LOW(0x7)
000a5c f409      	BRNE _0x2060055
                 _0x2060054:
000a5d c002      	RJMP _0x2060056
                 _0x2060055:
000a5e 30e8      	CPI  R30,LOW(0x8)
000a5f f409      	BRNE _0x2060057
                 _0x2060056:
000a60 c002      	RJMP _0x2060058
                 _0x2060057:
000a61 30e9      	CPI  R30,LOW(0x9)
000a62 f409      	BRNE _0x2060059
                 _0x2060058:
000a63 c002      	RJMP _0x206005A
                 _0x2060059:
000a64 30ea      	CPI  R30,LOW(0xA)
000a65 f421      	BRNE _0x206005B
                 _0x206005A:
000a66 930a      	ST   -Y,R16
000a67 89a8      	LDD  R26,Y+16
000a68 de24      	RCALL _pcd8544_gotoxy
000a69 c004      	RJMP _0x2060050
                 _0x206005B:
000a6a 30e6      	CPI  R30,LOW(0x6)
000a6b f411      	BRNE _0x2060050
000a6c 940e 1114 	CALL SUBOPT_0x2E
                 _0x2060050:
                 _0x206005D:
000a6e 931f      	PUSH R17
000a6f 5f1f      	SUBI R17,-1
000a70 85ee      	LDD  R30,Y+14
000a71 91af      	POP  R26
000a72 17ae      	CP   R26,R30
000a73 f5b8      	BRSH _0x206005F
000a74 85a9      	LDD  R26,Y+9
000a75 30a6      	CPI  R26,LOW(0x6)
000a76 f469      	BRNE _0x2060060
000a77 940e 1118 	CALL SUBOPT_0x2F
000a79 93fa      	ST   -Y,R31
000a7a 93ea      	ST   -Y,R30
000a7b 940e 10ff 	CALL SUBOPT_0x2B
000a7d 9731      	SBIW R30,1
000a7e 59e3      	SUBI R30,LOW(-_gfx_buffer_G103)
000a7f 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000a80 81a0      	LD   R26,Z
000a81 940e 0fcf 	CALL _glcd_writemem
000a83 c026      	RJMP _0x2060061
                 _0x2060060:
000a84 85e9      	LDD  R30,Y+9
000a85 30e9      	CPI  R30,LOW(0x9)
000a86 f411      	BRNE _0x2060065
000a87 e050      	LDI  R21,LOW(0)
000a88 c00e      	RJMP _0x2060066
                 _0x2060065:
000a89 30ea      	CPI  R30,LOW(0xA)
000a8a f411      	BRNE _0x2060064
000a8b ef5f      	LDI  R21,LOW(255)
000a8c c00a      	RJMP _0x2060066
                 _0x2060064:
000a8d 940e 1118 	CALL SUBOPT_0x2F
000a8f 940e 1121 	CALL SUBOPT_0x30
000a91 2f5e      	MOV  R21,R30
000a92 85e9      	LDD  R30,Y+9
000a93 30e7      	CPI  R30,LOW(0x7)
000a94 f011      	BREQ _0x206006D
000a95 30e8      	CPI  R30,LOW(0x8)
000a96 f421      	BRNE _0x206006E
                 _0x206006D:
                 _0x2060066:
000a97 940e 1127 	CALL SUBOPT_0x31
000a99 2f5e      	MOV  R21,R30
000a9a c006      	RJMP _0x206006F
                 _0x206006E:
000a9b 30e3      	CPI  R30,LOW(0x3)
000a9c f411      	BRNE _0x2060071
000a9d 9550      	COM  R21
000a9e c002      	RJMP _0x2060072
                 _0x2060071:
000a9f 30e0      	CPI  R30,0
000aa0 f419      	BRNE _0x2060074
                 _0x2060072:
                 _0x206006F:
000aa1 2fa5      	MOV  R26,R21
000aa2 ddce      	RCALL _pcd8544_wrdata_G103
000aa3 c006      	RJMP _0x206006B
                 _0x2060074:
000aa4 940e 112b 	CALL SUBOPT_0x32
000aa6 efef      	LDI  R30,LOW(255)
000aa7 93ea      	ST   -Y,R30
000aa8 85ad      	LDD  R26,Y+13
000aa9 ded1      	RCALL _pcd8544_wrmasked_G103
                 _0x206006B:
                 _0x2060061:
000aaa cfc3      	RJMP _0x206005D
                 _0x206005F:
000aab 85ef      	LDD  R30,Y+15
000aac 5fe8      	SUBI R30,-LOW(8)
000aad 87ef      	STD  Y+15,R30
000aae 85ed      	LDD  R30,Y+13
000aaf 50e8      	SUBI R30,LOW(8)
000ab0 87ed      	STD  Y+13,R30
000ab1 c0df      	RJMP _0x2060075
                 _0x206004D:
000ab2 855d      	LDD  R21,Y+13
000ab3 e020      	LDI  R18,LOW(0)
000ab4 e0e0      	LDI  R30,LOW(0)
000ab5 87ed      	STD  Y+13,R30
000ab6 c081      	RJMP _0x2060076
                 _0x206004C:
000ab7 2fe3      	MOV  R30,R19
000ab8 85ad      	LDD  R26,Y+13
000ab9 0fae      	ADD  R26,R30
000aba 30a9      	CPI  R26,LOW(0x9)
000abb f420      	BRSH _0x2060077
000abc 852d      	LDD  R18,Y+13
000abd e0e0      	LDI  R30,LOW(0)
000abe 87ed      	STD  Y+13,R30
000abf c003      	RJMP _0x2060078
                 _0x2060077:
000ac0 e0e8      	LDI  R30,LOW(8)
000ac1 1be3      	SUB  R30,R19
000ac2 2f2e      	MOV  R18,R30
                 _0x2060078:
000ac3 933a      	ST   -Y,R19
000ac4 2fa2      	MOV  R26,R18
000ac5 940e 0f7d 	CALL _glcd_getmask
000ac7 2f4e      	MOV  R20,R30
000ac8 85e9      	LDD  R30,Y+9
000ac9 30e6      	CPI  R30,LOW(0x6)
000aca f529      	BRNE _0x206007C
000acb 940e 1114 	CALL SUBOPT_0x2E
                 _0x206007D:
000acd 931f      	PUSH R17
000ace 5f1f      	SUBI R17,-1
000acf 85ee      	LDD  R30,Y+14
000ad0 91af      	POP  R26
000ad1 17ae      	CP   R26,R30
000ad2 f4e0      	BRSH _0x206007F
000ad3 940e 10ff 	CALL SUBOPT_0x2B
000ad5 9731      	SBIW R30,1
000ad6 59e3      	SUBI R30,LOW(-_gfx_buffer_G103)
000ad7 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000ad8 81e0      	LD   R30,Z
000ad9 23e4      	AND  R30,R20
000ada 2fae      	MOV  R26,R30
000adb 2fe3      	MOV  R30,R19
000adc 940e 1217 	CALL __LSRB12
000ade 940e 1131 	CALL SUBOPT_0x33
000ae0 2fe3      	MOV  R30,R19
000ae1 2fa4      	MOV  R26,R20
000ae2 940e 1217 	CALL __LSRB12
000ae4 95e0      	COM  R30
000ae5 21e1      	AND  R30,R1
000ae6 2b5e      	OR   R21,R30
000ae7 940e 1118 	CALL SUBOPT_0x2F
000ae9 93fa      	ST   -Y,R31
000aea 93ea      	ST   -Y,R30
000aeb 2fa5      	MOV  R26,R21
000aec 940e 0fcf 	CALL _glcd_writemem
000aee cfde      	RJMP _0x206007D
                 _0x206007F:
000aef c02c      	RJMP _0x206007B
                 _0x206007C:
000af0 30e9      	CPI  R30,LOW(0x9)
000af1 f411      	BRNE _0x2060080
000af2 e050      	LDI  R21,LOW(0)
000af3 c003      	RJMP _0x2060081
                 _0x2060080:
000af4 30ea      	CPI  R30,LOW(0xA)
000af5 f4a9      	BRNE _0x2060087
000af6 ef5f      	LDI  R21,LOW(255)
                 _0x2060081:
000af7 940e 1127 	CALL SUBOPT_0x31
000af9 2fae      	MOV  R26,R30
000afa 2fe3      	MOV  R30,R19
000afb 940e 120f 	CALL __LSLB12
000afd 2f5e      	MOV  R21,R30
                 _0x2060084:
000afe 931f      	PUSH R17
000aff 5f1f      	SUBI R17,-1
000b00 85ee      	LDD  R30,Y+14
000b01 91af      	POP  R26
000b02 17ae      	CP   R26,R30
000b03 f430      	BRSH _0x2060086
000b04 940e 112b 	CALL SUBOPT_0x32
000b06 934a      	ST   -Y,R20
000b07 e0a0      	LDI  R26,LOW(0)
000b08 de72      	RCALL _pcd8544_wrmasked_G103
000b09 cff4      	RJMP _0x2060084
                 _0x2060086:
000b0a c011      	RJMP _0x206007B
                 _0x2060087:
                 _0x2060088:
000b0b 931f      	PUSH R17
000b0c 5f1f      	SUBI R17,-1
000b0d 85ee      	LDD  R30,Y+14
000b0e 91af      	POP  R26
000b0f 17ae      	CP   R26,R30
000b10 f458      	BRSH _0x206008A
000b11 940e 113c 	CALL SUBOPT_0x34
000b13 2fae      	MOV  R26,R30
000b14 2fe3      	MOV  R30,R19
000b15 940e 120f 	CALL __LSLB12
000b17 93ea      	ST   -Y,R30
000b18 934a      	ST   -Y,R20
000b19 85ad      	LDD  R26,Y+13
000b1a de60      	RCALL _pcd8544_wrmasked_G103
000b1b cfef      	RJMP _0x2060088
                 _0x206008A:
                 _0x206007B:
000b1c 85ed      	LDD  R30,Y+13
000b1d 30e0      	CPI  R30,0
000b1e f409      	BRNE _0x206008B
000b1f c07a      	RJMP _0x206004B
                 _0x206008B:
000b20 85ad      	LDD  R26,Y+13
000b21 30a8      	CPI  R26,LOW(0x8)
000b22 f428      	BRSH _0x206008C
000b23 85ed      	LDD  R30,Y+13
000b24 1be2      	SUB  R30,R18
000b25 2f5e      	MOV  R21,R30
000b26 e0e0      	LDI  R30,LOW(0)
000b27 c003      	RJMP _0x20600A1
                 _0x206008C:
000b28 2f53      	MOV  R21,R19
000b29 85ed      	LDD  R30,Y+13
000b2a 50e8      	SUBI R30,LOW(8)
                 _0x20600A1:
000b2b 87ed      	STD  Y+13,R30
000b2c e010      	LDI  R17,LOW(0)
000b2d 85ef      	LDD  R30,Y+15
000b2e 5fe8      	SUBI R30,-LOW(8)
000b2f 87ef      	STD  Y+15,R30
000b30 e0e8      	LDI  R30,LOW(8)
000b31 1be3      	SUB  R30,R19
000b32 2f2e      	MOV  R18,R30
000b33 8908      	LDD  R16,Y+16
000b34 85ea      	LDD  R30,Y+10
000b35 85fb      	LDD  R31,Y+10+1
000b36 83ee      	STD  Y+6,R30
000b37 83ff      	STD  Y+6+1,R31
                 _0x2060076:
000b38 2fe5      	MOV  R30,R21
000b39 e0f0      	LDI  R31,0
000b3a 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000b3b 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000b3c 9144      	LPM  R20,Z
000b3d 85e9      	LDD  R30,Y+9
000b3e 30e6      	CPI  R30,LOW(0x6)
000b3f f529      	BRNE _0x2060091
000b40 940e 1114 	CALL SUBOPT_0x2E
                 _0x2060092:
000b42 931f      	PUSH R17
000b43 5f1f      	SUBI R17,-1
000b44 85ee      	LDD  R30,Y+14
000b45 91af      	POP  R26
000b46 17ae      	CP   R26,R30
000b47 f4e0      	BRSH _0x2060094
000b48 940e 10ff 	CALL SUBOPT_0x2B
000b4a 9731      	SBIW R30,1
000b4b 59e3      	SUBI R30,LOW(-_gfx_buffer_G103)
000b4c 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G103)
000b4d 81e0      	LD   R30,Z
000b4e 23e4      	AND  R30,R20
000b4f 2fae      	MOV  R26,R30
000b50 2fe2      	MOV  R30,R18
000b51 940e 120f 	CALL __LSLB12
000b53 940e 1131 	CALL SUBOPT_0x33
000b55 2fe2      	MOV  R30,R18
000b56 2fa4      	MOV  R26,R20
000b57 940e 120f 	CALL __LSLB12
000b59 95e0      	COM  R30
000b5a 21e1      	AND  R30,R1
000b5b 2b5e      	OR   R21,R30
000b5c 940e 1118 	CALL SUBOPT_0x2F
000b5e 93fa      	ST   -Y,R31
000b5f 93ea      	ST   -Y,R30
000b60 2fa5      	MOV  R26,R21
000b61 940e 0fcf 	CALL _glcd_writemem
000b63 cfde      	RJMP _0x2060092
                 _0x2060094:
000b64 c02c      	RJMP _0x2060090
                 _0x2060091:
000b65 30e9      	CPI  R30,LOW(0x9)
000b66 f411      	BRNE _0x2060095
000b67 e050      	LDI  R21,LOW(0)
000b68 c003      	RJMP _0x2060096
                 _0x2060095:
000b69 30ea      	CPI  R30,LOW(0xA)
000b6a f4a9      	BRNE _0x206009C
000b6b ef5f      	LDI  R21,LOW(255)
                 _0x2060096:
000b6c 940e 1127 	CALL SUBOPT_0x31
000b6e 2fae      	MOV  R26,R30
000b6f 2fe2      	MOV  R30,R18
000b70 940e 1217 	CALL __LSRB12
000b72 2f5e      	MOV  R21,R30
                 _0x2060099:
000b73 931f      	PUSH R17
000b74 5f1f      	SUBI R17,-1
000b75 85ee      	LDD  R30,Y+14
000b76 91af      	POP  R26
000b77 17ae      	CP   R26,R30
000b78 f430      	BRSH _0x206009B
000b79 940e 112b 	CALL SUBOPT_0x32
000b7b 934a      	ST   -Y,R20
000b7c e0a0      	LDI  R26,LOW(0)
000b7d ddfd      	RCALL _pcd8544_wrmasked_G103
000b7e cff4      	RJMP _0x2060099
                 _0x206009B:
000b7f c011      	RJMP _0x2060090
                 _0x206009C:
                 _0x206009D:
000b80 931f      	PUSH R17
000b81 5f1f      	SUBI R17,-1
000b82 85ee      	LDD  R30,Y+14
000b83 91af      	POP  R26
000b84 17ae      	CP   R26,R30
000b85 f458      	BRSH _0x206009F
000b86 940e 113c 	CALL SUBOPT_0x34
000b88 2fae      	MOV  R26,R30
000b89 2fe2      	MOV  R30,R18
000b8a 940e 1217 	CALL __LSRB12
000b8c 93ea      	ST   -Y,R30
000b8d 934a      	ST   -Y,R20
000b8e 85ad      	LDD  R26,Y+13
000b8f ddeb      	RCALL _pcd8544_wrmasked_G103
000b90 cfef      	RJMP _0x206009D
                 _0x206009F:
                 _0x2060090:
                 _0x2060075:
000b91 85e8      	LDD  R30,Y+8
000b92 85aa      	LDD  R26,Y+10
000b93 85bb      	LDD  R27,Y+10+1
000b94 e0f0      	LDI  R31,0
000b95 0fea      	ADD  R30,R26
000b96 1ffb      	ADC  R31,R27
000b97 87ea      	STD  Y+10,R30
000b98 87fb      	STD  Y+10+1,R31
000b99 ceaa      	RJMP _0x2060049
                 _0x206004B:
                 _0x2160009:
000b9a 940e 126b 	CALL __LOADLOCR6
000b9c 9661      	ADIW R28,17
000b9d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000b9e 940e 1009 	CALL SUBOPT_0x5
000ba0 940e 1260 	CALL __CPW02
000ba2 f024      	BRLT _0x2080003
000ba3 e0e0      	LDI  R30,LOW(0)
000ba4 e0f0      	LDI  R31,HIGH(0)
000ba5 940c 0f86 	JMP  _0x2160002
                 _0x2080003:
000ba7 81a8      	LD   R26,Y
000ba8 81b9      	LDD  R27,Y+1
000ba9 35a4      	CPI  R26,LOW(0x54)
000baa e0e0      	LDI  R30,HIGH(0x54)
000bab 07be      	CPC  R27,R30
000bac f024      	BRLT _0x2080004
000bad e5e3      	LDI  R30,LOW(83)
000bae e0f0      	LDI  R31,HIGH(83)
000baf 940c 0f86 	JMP  _0x2160002
                 _0x2080004:
000bb1 81e8      	LD   R30,Y
000bb2 81f9      	LDD  R31,Y+1
000bb3 940c 0f86 	JMP  _0x2160002
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000bb5 940e 1009 	CALL SUBOPT_0x5
000bb7 940e 1260 	CALL __CPW02
000bb9 f024      	BRLT _0x2080005
000bba e0e0      	LDI  R30,LOW(0)
000bbb e0f0      	LDI  R31,HIGH(0)
000bbc 940c 0f86 	JMP  _0x2160002
                 _0x2080005:
000bbe 81a8      	LD   R26,Y
000bbf 81b9      	LDD  R27,Y+1
000bc0 97d0      	SBIW R26,48
000bc1 f024      	BRLT _0x2080006
000bc2 e2ef      	LDI  R30,LOW(47)
000bc3 e0f0      	LDI  R31,HIGH(47)
000bc4 940c 0f86 	JMP  _0x2160002
                 _0x2080006:
000bc6 81e8      	LD   R30,Y
000bc7 81f9      	LDD  R31,Y+1
000bc8 940c 0f86 	JMP  _0x2160002
                 ; .FEND
                 _glcd_getcharw_G104:
                 ; .FSTART _glcd_getcharw_G104
000bca 93ba      	ST   -Y,R27
000bcb 93aa      	ST   -Y,R26
000bcc 9723      	SBIW R28,3
000bcd 940e 1149 	CALL SUBOPT_0x35
000bcf 018f      	MOVW R16,R30
000bd0 2e00      	MOV  R0,R16
000bd1 2a01      	OR   R0,R17
000bd2 f419      	BRNE _0x208000B
000bd3 e0e0      	LDI  R30,LOW(0)
000bd4 e0f0      	LDI  R31,HIGH(0)
000bd5 c05f      	RJMP _0x2160008
                 _0x208000B:
000bd6 940e 1150 	CALL SUBOPT_0x36
000bd8 820f      	STD  Y+7,R0
000bd9 940e 1150 	CALL SUBOPT_0x36
000bdb 820e      	STD  Y+6,R0
000bdc 940e 1150 	CALL SUBOPT_0x36
000bde 8608      	STD  Y+8,R0
000bdf 85eb      	LDD  R30,Y+11
000be0 85a8      	LDD  R26,Y+8
000be1 17ea      	CP   R30,R26
000be2 f418      	BRSH _0x208000C
000be3 e0e0      	LDI  R30,LOW(0)
000be4 e0f0      	LDI  R31,HIGH(0)
000be5 c04f      	RJMP _0x2160008
                 _0x208000C:
000be6 01f8      	MOVW R30,R16
                +
000be7 5f0f     +SUBI R16 , LOW ( - 1 )
000be8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000be9 9154      	LPM  R21,Z
000bea 85a8      	LDD  R26,Y+8
000beb 27bb      	CLR  R27
000bec 27ee      	CLR  R30
000bed 0fa5      	ADD  R26,R21
000bee 1fbe      	ADC  R27,R30
000bef 85eb      	LDD  R30,Y+11
000bf0 e0f0      	LDI  R31,0
000bf1 17ea      	CP   R30,R26
000bf2 07fb      	CPC  R31,R27
000bf3 f018      	BRLO _0x208000D
000bf4 e0e0      	LDI  R30,LOW(0)
000bf5 e0f0      	LDI  R31,HIGH(0)
000bf6 c03e      	RJMP _0x2160008
                 _0x208000D:
000bf7 81ee      	LDD  R30,Y+6
000bf8 95e6      	LSR  R30
000bf9 95e6      	LSR  R30
000bfa 95e6      	LSR  R30
000bfb 2f4e      	MOV  R20,R30
000bfc 81ee      	LDD  R30,Y+6
000bfd 70e7      	ANDI R30,LOW(0x7)
000bfe f009      	BREQ _0x208000E
000bff 5f4f      	SUBI R20,-LOW(1)
                 _0x208000E:
000c00 81ef      	LDD  R30,Y+7
000c01 30e0      	CPI  R30,0
000c02 f0a1      	BREQ _0x208000F
000c03 85a9      	LDD  R26,Y+9
000c04 85ba      	LDD  R27,Y+9+1
000c05 93ec      	ST   X,R30
000c06 85a8      	LDD  R26,Y+8
000c07 85eb      	LDD  R30,Y+11
000c08 1bea      	SUB  R30,R26
000c09 e0f0      	LDI  R31,0
000c0a 01df      	MOVW R26,R30
000c0b 81ef      	LDD  R30,Y+7
000c0c e0f0      	LDI  R31,0
000c0d 940e 1224 	CALL __MULW12U
000c0f 01df      	MOVW R26,R30
000c10 2fe4      	MOV  R30,R20
000c11 e0f0      	LDI  R31,0
000c12 940e 1224 	CALL __MULW12U
000c14 0fe0      	ADD  R30,R16
000c15 1ff1      	ADC  R31,R17
000c16 c01e      	RJMP _0x2160008
                 _0x208000F:
000c17 0198      	MOVW R18,R16
000c18 2fe5      	MOV  R30,R21
000c19 e0f0      	LDI  R31,0
                +
000c1a 0f0e     +ADD R16 , R30
000c1b 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2080010:
000c1c 85a8      	LDD  R26,Y+8
000c1d 5faf      	SUBI R26,-LOW(1)
000c1e 87a8      	STD  Y+8,R26
000c1f 50a1      	SUBI R26,LOW(1)
000c20 85eb      	LDD  R30,Y+11
000c21 17ae      	CP   R26,R30
000c22 f460      	BRSH _0x2080012
000c23 01f9      	MOVW R30,R18
                +
000c24 5f2f     +SUBI R18 , LOW ( - 1 )
000c25 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000c26 91a4      	LPM  R26,Z
000c27 e0b0      	LDI  R27,0
000c28 2fe4      	MOV  R30,R20
000c29 e0f0      	LDI  R31,0
000c2a 940e 1224 	CALL __MULW12U
                +
000c2c 0f0e     +ADD R16 , R30
000c2d 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000c2e cfed      	RJMP _0x2080010
                 _0x2080012:
000c2f 01f9      	MOVW R30,R18
000c30 91e4      	LPM  R30,Z
000c31 85a9      	LDD  R26,Y+9
000c32 85ba      	LDD  R27,Y+9+1
000c33 93ec      	ST   X,R30
000c34 01f8      	MOVW R30,R16
                 _0x2160008:
000c35 940e 126b 	CALL __LOADLOCR6
000c37 962c      	ADIW R28,12
000c38 9508      	RET
                 ; .FEND
                 _glcd_new_line_G104:
                 ; .FSTART _glcd_new_line_G104
000c39 e0e0      	LDI  R30,LOW(0)
                +
000c3a 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000c3c 91a0 067f+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000c3e 27bb      	CLR  R27
000c3f 940e 1155 	CALL SUBOPT_0x37
000c41 e0f0      	LDI  R31,0
000c42 0fae      	ADD  R26,R30
000c43 1fbf      	ADC  R27,R31
                +
000c44 91e0 0683+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000c46 e0f0      	LDI  R31,0
000c47 0fae      	ADD  R26,R30
000c48 1fbf      	ADC  R27,R31
000c49 df6b      	RCALL _glcd_clipy
                +
000c4a 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000c4c 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000c4d 93aa      	ST   -Y,R26
000c4e 9721      	SBIW R28,1
000c4f 940e 1149 	CALL SUBOPT_0x35
000c51 9730      	SBIW R30,0
000c52 f409      	BRNE PC+2
000c53 c055      	RJMP _0x208001F
000c54 81af      	LDD  R26,Y+7
000c55 30aa      	CPI  R26,LOW(0xA)
000c56 f409      	BRNE _0x2080020
000c57 c04f      	RJMP _0x2080021
                 _0x2080020:
000c58 81ef      	LDD  R30,Y+7
000c59 93ea      	ST   -Y,R30
000c5a 01de      	MOVW R26,R28
000c5b 9617      	ADIW R26,7
000c5c df6d      	RCALL _glcd_getcharw_G104
000c5d 01af      	MOVW R20,R30
000c5e 9730      	SBIW R30,0
000c5f f409      	BRNE _0x2080022
000c60 c04a      	RJMP _0x2160007
                 _0x2080022:
                +
000c61 91e0 0682+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000c63 81ae      	LDD  R26,Y+6
000c64 0fea      	ADD  R30,R26
000c65 2f3e      	MOV  R19,R30
                +
000c66 91a0 067e+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000c68 27bb      	CLR  R27
000c69 e0f0      	LDI  R31,0
000c6a 0fea      	ADD  R30,R26
000c6b 1ffb      	ADC  R31,R27
000c6c 018f      	MOVW R16,R30
                +
000c6d 3505     +CPI R16 , LOW ( 85 )
000c6e e0e0     +LDI R30 , HIGH ( 85 )
000c6f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
000c70 f018      	BRLO _0x2080023
000c71 2f03      	MOV  R16,R19
000c72 2711      	CLR  R17
000c73 dfc5      	RCALL _glcd_new_line_G104
                 _0x2080023:
                +
000c74 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000c76 93ea      	ST   -Y,R30
                +
000c77 91e0 067f+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000c79 93ea      	ST   -Y,R30
000c7a 85e8      	LDD  R30,Y+8
000c7b 93ea      	ST   -Y,R30
000c7c 940e 1155 	CALL SUBOPT_0x37
000c7e 93ea      	ST   -Y,R30
000c7f e0e1      	LDI  R30,LOW(1)
000c80 93ea      	ST   -Y,R30
000c81 935a      	ST   -Y,R21
000c82 934a      	ST   -Y,R20
000c83 e0a7      	LDI  R26,LOW(7)
000c84 dd2f      	RCALL _glcd_block
                +
000c85 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000c87 81ae      	LDD  R26,Y+6
000c88 0fea      	ADD  R30,R26
000c89 93ea      	ST   -Y,R30
                +
000c8a 91e0 067f+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000c8c 93ea      	ST   -Y,R30
                +
000c8d 91e0 0682+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000c8f 93ea      	ST   -Y,R30
000c90 940e 1155 	CALL SUBOPT_0x37
000c92 940e 115c 	CALL SUBOPT_0x38
                +
000c94 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000c96 93ea      	ST   -Y,R30
                +
000c97 91a0 067f+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000c99 940e 1155 	CALL SUBOPT_0x37
000c9b 0fea      	ADD  R30,R26
000c9c 93ea      	ST   -Y,R30
000c9d 933a      	ST   -Y,R19
                +
000c9e 91e0 0683+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000ca0 940e 115c 	CALL SUBOPT_0x38
000ca2 e5e4      	LDI  R30,LOW(84)
000ca3 e0f0      	LDI  R31,HIGH(84)
000ca4 17e0      	CP   R30,R16
000ca5 07f1      	CPC  R31,R17
000ca6 f411      	BRNE _0x2080024
                 _0x2080021:
000ca7 df91      	RCALL _glcd_new_line_G104
000ca8 c002      	RJMP _0x2160007
                 _0x2080024:
                 _0x208001F:
                +
000ca9 9300 067e+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2160007:
000cab 940e 126b 	CALL __LOADLOCR6
000cad 9628      	ADIW R28,8
000cae 9508      	RET
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000caf 93ba      	ST   -Y,R27
000cb0 93aa      	ST   -Y,R26
000cb1 931a      	ST   -Y,R17
                 _0x208002E:
000cb2 81a9      	LDD  R26,Y+1
000cb3 81ba      	LDD  R27,Y+1+1
000cb4 91ed      	LD   R30,X+
000cb5 83a9      	STD  Y+1,R26
000cb6 83ba      	STD  Y+1+1,R27
000cb7 2f1e      	MOV  R17,R30
000cb8 30e0      	CPI  R30,0
000cb9 f019      	BREQ _0x2080030
000cba 2fa1      	MOV  R26,R17
000cbb df91      	RCALL _glcd_putchar
000cbc cff5      	RJMP _0x208002E
                 _0x2080030:
000cbd 8118      	LDD  R17,Y+0
000cbe c30e      	RJMP _0x2160001
                 ; .FEND
                 _glcd_putpixelm_G104:
                 ; .FSTART _glcd_putpixelm_G104
000cbf 93aa      	ST   -Y,R26
000cc0 81ea      	LDD  R30,Y+2
000cc1 93ea      	ST   -Y,R30
000cc2 81ea      	LDD  R30,Y+2
000cc3 93ea      	ST   -Y,R30
                +
000cc4 91e0 0685+LDS R30 , _glcd_state + ( 9 )
                 	__GETB1MN _glcd_state,9
000cc6 81aa      	LDD  R26,Y+2
000cc7 23ea      	AND  R30,R26
000cc8 f019      	BREQ _0x208003E
000cc9 91e0 067c 	LDS  R30,_glcd_state
000ccb c002      	RJMP _0x208003F
                 _0x208003E:
                +
000ccc 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
                 _0x208003F:
000cce 2fae      	MOV  R26,R30
000ccf dc89      	RCALL _glcd_putpixel
000cd0 81e8      	LD   R30,Y
000cd1 0fee      	LSL  R30
000cd2 83e8      	ST   Y,R30
000cd3 30e0      	CPI  R30,0
000cd4 f411      	BRNE _0x2080041
000cd5 e0e1      	LDI  R30,LOW(1)
000cd6 83e8      	ST   Y,R30
                 _0x2080041:
000cd7 81e8      	LD   R30,Y
000cd8 c2f4      	RJMP _0x2160001
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000cd9 93aa      	ST   -Y,R26
000cda 81a9      	LDD  R26,Y+1
000cdb 27bb      	CLR  R27
000cdc dec1      	RCALL _glcd_clipx
                +
000cdd 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000cdf 81a8      	LD   R26,Y
000ce0 27bb      	CLR  R27
000ce1 ded3      	RCALL _glcd_clipy
                +
000ce2 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000ce4 c2a1      	RJMP _0x2160002
                 ; .FEND
                 _glcd_line:
                 ; .FSTART _glcd_line
000ce5 93aa      	ST   -Y,R26
000ce6 972b      	SBIW R28,11
000ce7 940e 1264 	CALL __SAVELOCR6
000ce9 89ac      	LDD  R26,Y+20
000cea 27bb      	CLR  R27
000ceb deb2      	RCALL _glcd_clipx
000cec 8bec      	STD  Y+20,R30
000ced 89aa      	LDD  R26,Y+18
000cee 27bb      	CLR  R27
000cef deae      	RCALL _glcd_clipx
000cf0 8bea      	STD  Y+18,R30
000cf1 89ab      	LDD  R26,Y+19
000cf2 27bb      	CLR  R27
000cf3 dec1      	RCALL _glcd_clipy
000cf4 8beb      	STD  Y+19,R30
000cf5 89a9      	LDD  R26,Y+17
000cf6 27bb      	CLR  R27
000cf7 debd      	RCALL _glcd_clipy
000cf8 8be9      	STD  Y+17,R30
000cf9 89ea      	LDD  R30,Y+18
                +
000cfa 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000cfc 89e9      	LDD  R30,Y+17
                +
000cfd 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000cff e0e1      	LDI  R30,LOW(1)
000d00 87e8      	STD  Y+8,R30
000d01 89e9      	LDD  R30,Y+17
000d02 89ab      	LDD  R26,Y+19
000d03 17ea      	CP   R30,R26
000d04 f571      	BRNE _0x2080042
000d05 891c      	LDD  R17,Y+20
000d06 89aa      	LDD  R26,Y+18
000d07 171a      	CP   R17,R26
000d08 f431      	BRNE _0x2080043
000d09 931a      	ST   -Y,R17
000d0a 89ec      	LDD  R30,Y+20
000d0b 93ea      	ST   -Y,R30
000d0c e0a1      	LDI  R26,LOW(1)
000d0d dfb1      	RCALL _glcd_putpixelm_G104
000d0e c0c8      	RJMP _0x2160006
                 _0x2080043:
000d0f 89aa      	LDD  R26,Y+18
000d10 171a      	CP   R17,R26
000d11 f430      	BRSH _0x2080044
000d12 89ea      	LDD  R30,Y+18
000d13 1be1      	SUB  R30,R17
000d14 2f0e      	MOV  R16,R30
                +
000d15 e041     +LDI R20 , LOW ( 1 )
000d16 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000d17 c006      	RJMP _0x2080045
                 _0x2080044:
000d18 89aa      	LDD  R26,Y+18
000d19 2fe1      	MOV  R30,R17
000d1a 1bea      	SUB  R30,R26
000d1b 2f0e      	MOV  R16,R30
                +
000d1c ef4f     +LDI R20 , LOW ( - 1 )
000d1d ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
                 _0x2080045:
                 _0x2080047:
000d1e 893b      	LDD  R19,Y+19
000d1f e0e0      	LDI  R30,LOW(0)
000d20 83ee      	STD  Y+6,R30
                 _0x2080049:
000d21 940e 1166 	CALL SUBOPT_0x39
000d23 f438      	BRSH _0x208004B
000d24 931a      	ST   -Y,R17
000d25 933a      	ST   -Y,R19
000d26 9533      	INC  R19
000d27 85aa      	LDD  R26,Y+10
000d28 df96      	RCALL _glcd_putpixelm_G104
000d29 83ef      	STD  Y+7,R30
000d2a cff6      	RJMP _0x2080049
                 _0x208004B:
000d2b 81ef      	LDD  R30,Y+7
000d2c 87e8      	STD  Y+8,R30
000d2d 0f14      	ADD  R17,R20
000d2e 2fe0      	MOV  R30,R16
000d2f 5001      	SUBI R16,1
000d30 30e0      	CPI  R30,0
000d31 f761      	BRNE _0x2080047
000d32 c0a4      	RJMP _0x208004C
                 _0x2080042:
000d33 89ea      	LDD  R30,Y+18
000d34 89ac      	LDD  R26,Y+20
000d35 17ea      	CP   R30,R26
000d36 f539      	BRNE _0x208004D
000d37 893b      	LDD  R19,Y+19
000d38 89a9      	LDD  R26,Y+17
000d39 173a      	CP   R19,R26
000d3a f430      	BRSH _0x208004E
000d3b 89e9      	LDD  R30,Y+17
000d3c 1be3      	SUB  R30,R19
000d3d 2f2e      	MOV  R18,R30
000d3e e0e1      	LDI  R30,LOW(1)
000d3f e0f0      	LDI  R31,HIGH(1)
000d40 c006      	RJMP _0x208011B
                 _0x208004E:
000d41 89a9      	LDD  R26,Y+17
000d42 2fe3      	MOV  R30,R19
000d43 1bea      	SUB  R30,R26
000d44 2f2e      	MOV  R18,R30
000d45 efef      	LDI  R30,LOW(65535)
000d46 efff      	LDI  R31,HIGH(65535)
                 _0x208011B:
000d47 87ed      	STD  Y+13,R30
000d48 87fe      	STD  Y+13+1,R31
                 _0x2080051:
000d49 891c      	LDD  R17,Y+20
000d4a e0e0      	LDI  R30,LOW(0)
000d4b 83ee      	STD  Y+6,R30
                 _0x2080053:
000d4c 940e 1166 	CALL SUBOPT_0x39
000d4e f430      	BRSH _0x2080055
000d4f 931a      	ST   -Y,R17
000d50 9513      	INC  R17
000d51 940e 116e 	CALL SUBOPT_0x3A
000d53 83ef      	STD  Y+7,R30
000d54 cff7      	RJMP _0x2080053
                 _0x2080055:
000d55 81ef      	LDD  R30,Y+7
000d56 87e8      	STD  Y+8,R30
000d57 85ed      	LDD  R30,Y+13
000d58 0f3e      	ADD  R19,R30
000d59 2fe2      	MOV  R30,R18
000d5a 5021      	SUBI R18,1
000d5b 30e0      	CPI  R30,0
000d5c f761      	BRNE _0x2080051
000d5d c079      	RJMP _0x2080056
                 _0x208004D:
000d5e e0e0      	LDI  R30,LOW(0)
000d5f 83ee      	STD  Y+6,R30
                 _0x2080057:
000d60 940e 1166 	CALL SUBOPT_0x39
000d62 f008      	BRLO PC+2
000d63 c073      	RJMP _0x2080059
000d64 891c      	LDD  R17,Y+20
000d65 893b      	LDD  R19,Y+19
000d66 e0e1      	LDI  R30,LOW(1)
000d67 2f2e      	MOV  R18,R30
000d68 2f0e      	MOV  R16,R30
000d69 89aa      	LDD  R26,Y+18
000d6a 27bb      	CLR  R27
000d6b 89ec      	LDD  R30,Y+20
000d6c e0f0      	LDI  R31,0
000d6d 1bae      	SUB  R26,R30
000d6e 0bbf      	SBC  R27,R31
000d6f 01ad      	MOVW R20,R26
000d70 2355      	TST  R21
000d71 f42a      	BRPL _0x208005A
000d72 ef0f      	LDI  R16,LOW(255)
000d73 01fa      	MOVW R30,R20
000d74 940e 120b 	CALL __ANEGW1
000d76 01af      	MOVW R20,R30
                 _0x208005A:
000d77 01fa      	MOVW R30,R20
000d78 0fee      	LSL  R30
000d79 1fff      	ROL  R31
000d7a 87ef      	STD  Y+15,R30
000d7b 8bf8      	STD  Y+15+1,R31
000d7c 89a9      	LDD  R26,Y+17
000d7d 27bb      	CLR  R27
000d7e 89eb      	LDD  R30,Y+19
000d7f e0f0      	LDI  R31,0
000d80 1bae      	SUB  R26,R30
000d81 0bbf      	SBC  R27,R31
000d82 87ad      	STD  Y+13,R26
000d83 87be      	STD  Y+13+1,R27
000d84 85ae      	LDD  R26,Y+14
000d85 23aa      	TST  R26
000d86 f43a      	BRPL _0x208005B
000d87 ef2f      	LDI  R18,LOW(255)
000d88 85ed      	LDD  R30,Y+13
000d89 85fe      	LDD  R31,Y+13+1
000d8a 940e 120b 	CALL __ANEGW1
000d8c 87ed      	STD  Y+13,R30
000d8d 87fe      	STD  Y+13+1,R31
                 _0x208005B:
000d8e 85ed      	LDD  R30,Y+13
000d8f 85fe      	LDD  R31,Y+13+1
000d90 0fee      	LSL  R30
000d91 1fff      	ROL  R31
000d92 87eb      	STD  Y+11,R30
000d93 87fc      	STD  Y+11+1,R31
000d94 931a      	ST   -Y,R17
000d95 933a      	ST   -Y,R19
000d96 e0a1      	LDI  R26,LOW(1)
000d97 df27      	RCALL _glcd_putpixelm_G104
000d98 87e8      	STD  Y+8,R30
000d99 e0e0      	LDI  R30,LOW(0)
000d9a 87e9      	STD  Y+9,R30
000d9b 87ea      	STD  Y+9+1,R30
000d9c 85ad      	LDD  R26,Y+13
000d9d 85be      	LDD  R27,Y+13+1
000d9e 174a      	CP   R20,R26
000d9f 075b      	CPC  R21,R27
000da0 f0bc      	BRLT _0x208005C
                 _0x208005E:
000da1 0f10      	ADD  R17,R16
000da2 85eb      	LDD  R30,Y+11
000da3 85fc      	LDD  R31,Y+11+1
000da4 940e 1172 	CALL SUBOPT_0x3B
000da6 85a9      	LDD  R26,Y+9
000da7 85ba      	LDD  R27,Y+9+1
000da8 174a      	CP   R20,R26
000da9 075b      	CPC  R21,R27
000daa f42c      	BRGE _0x2080060
000dab 0f32      	ADD  R19,R18
000dac 85af      	LDD  R26,Y+15
000dad 89b8      	LDD  R27,Y+15+1
000dae 940e 1179 	CALL SUBOPT_0x3C
                 _0x2080060:
000db0 931a      	ST   -Y,R17
000db1 940e 116e 	CALL SUBOPT_0x3A
000db3 87e8      	STD  Y+8,R30
000db4 89ea      	LDD  R30,Y+18
000db5 17e1      	CP   R30,R17
000db6 f751      	BRNE _0x208005E
000db7 c018      	RJMP _0x2080061
                 _0x208005C:
                 _0x2080063:
000db8 0f32      	ADD  R19,R18
000db9 85ef      	LDD  R30,Y+15
000dba 89f8      	LDD  R31,Y+15+1
000dbb 940e 1172 	CALL SUBOPT_0x3B
000dbd 85ed      	LDD  R30,Y+13
000dbe 85fe      	LDD  R31,Y+13+1
000dbf 85a9      	LDD  R26,Y+9
000dc0 85ba      	LDD  R27,Y+9+1
000dc1 17ea      	CP   R30,R26
000dc2 07fb      	CPC  R31,R27
000dc3 f42c      	BRGE _0x2080065
000dc4 0f10      	ADD  R17,R16
000dc5 85ab      	LDD  R26,Y+11
000dc6 85bc      	LDD  R27,Y+11+1
000dc7 940e 1179 	CALL SUBOPT_0x3C
                 _0x2080065:
000dc9 931a      	ST   -Y,R17
000dca 940e 116e 	CALL SUBOPT_0x3A
000dcc 87e8      	STD  Y+8,R30
000dcd 89e9      	LDD  R30,Y+17
000dce 17e3      	CP   R30,R19
000dcf f741      	BRNE _0x2080063
                 _0x2080061:
000dd0 89eb      	LDD  R30,Y+19
000dd1 5fef      	SUBI R30,-LOW(1)
000dd2 8beb      	STD  Y+19,R30
000dd3 89e9      	LDD  R30,Y+17
000dd4 5fef      	SUBI R30,-LOW(1)
000dd5 8be9      	STD  Y+17,R30
000dd6 cf89      	RJMP _0x2080057
                 _0x2080059:
                 _0x2080056:
                 _0x208004C:
                 _0x2160006:
000dd7 940e 126b 	CALL __LOADLOCR6
000dd9 9665      	ADIW R28,21
000dda 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G106:
                 ; .FSTART _put_buff_G106
000ddb 93ba      	ST   -Y,R27
000ddc 93aa      	ST   -Y,R26
000ddd 931a      	ST   -Y,R17
000dde 930a      	ST   -Y,R16
000ddf 81aa      	LDD  R26,Y+2
000de0 81bb      	LDD  R27,Y+2+1
000de1 9612      	ADIW R26,2
000de2 940e 122c 	CALL __GETW1P
000de4 9730      	SBIW R30,0
000de5 f129      	BREQ _0x20C0010
000de6 81aa      	LDD  R26,Y+2
000de7 81bb      	LDD  R27,Y+2+1
000de8 9614      	ADIW R26,4
000de9 940e 122c 	CALL __GETW1P
000deb 018f      	MOVW R16,R30
000dec 9730      	SBIW R30,0
000ded f061      	BREQ _0x20C0012
                +
000dee 3002     +CPI R16 , LOW ( 2 )
000def e0e0     +LDI R30 , HIGH ( 2 )
000df0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000df1 f080      	BRLO _0x20C0013
000df2 01f8      	MOVW R30,R16
000df3 9731      	SBIW R30,1
000df4 018f      	MOVW R16,R30
                +
000df5 81aa     +LDD R26 , Y + 2
000df6 81bb     +LDD R27 , Y + 2 + 1
000df7 9614     +ADIW R26 , 4
000df8 93ed     +ST X + , R30
000df9 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x20C0012:
000dfa 81aa      	LDD  R26,Y+2
000dfb 81bb      	LDD  R27,Y+2+1
000dfc 9612      	ADIW R26,2
000dfd 940e 0fee 	CALL SUBOPT_0x0
000dff 9731      	SBIW R30,1
000e00 81ac      	LDD  R26,Y+4
000e01 83a0      	STD  Z+0,R26
                 _0x20C0013:
000e02 81aa      	LDD  R26,Y+2
000e03 81bb      	LDD  R27,Y+2+1
000e04 940e 122c 	CALL __GETW1P
000e06 23ff      	TST  R31
000e07 f012      	BRMI _0x20C0014
000e08 940e 0fee 	CALL SUBOPT_0x0
                 _0x20C0014:
000e0a c006      	RJMP _0x20C0015
                 _0x20C0010:
000e0b 81aa      	LDD  R26,Y+2
000e0c 81bb      	LDD  R27,Y+2+1
000e0d efef      	LDI  R30,LOW(65535)
000e0e efff      	LDI  R31,HIGH(65535)
000e0f 93ed      	ST   X+,R30
000e10 93fc      	ST   X,R31
                 _0x20C0015:
                 _0x2160004:
000e11 8119      	LDD  R17,Y+1
000e12 8108      	LDD  R16,Y+0
                 _0x2160005:
000e13 9625      	ADIW R28,5
000e14 9508      	RET
                 ; .FEND
                 __print_G106:
                 ; .FSTART __print_G106
000e15 93ba      	ST   -Y,R27
000e16 93aa      	ST   -Y,R26
000e17 9726      	SBIW R28,6
000e18 940e 1264 	CALL __SAVELOCR6
000e1a e010      	LDI  R17,0
000e1b 85ac      	LDD  R26,Y+12
000e1c 85bd      	LDD  R27,Y+12+1
000e1d e0e0      	LDI  R30,LOW(0)
000e1e e0f0      	LDI  R31,HIGH(0)
000e1f 93ed      	ST   X+,R30
000e20 93fc      	ST   X,R31
                 _0x20C0016:
000e21 89ea      	LDD  R30,Y+18
000e22 89fb      	LDD  R31,Y+18+1
000e23 9631      	ADIW R30,1
000e24 8bea      	STD  Y+18,R30
000e25 8bfb      	STD  Y+18+1,R31
000e26 9731      	SBIW R30,1
000e27 91e4      	LPM  R30,Z
000e28 2f2e      	MOV  R18,R30
000e29 30e0      	CPI  R30,0
000e2a f409      	BRNE PC+2
000e2b c115      	RJMP _0x20C0018
000e2c 2fe1      	MOV  R30,R17
000e2d 30e0      	CPI  R30,0
000e2e f439      	BRNE _0x20C001C
000e2f 3225      	CPI  R18,37
000e30 f411      	BRNE _0x20C001D
000e31 e011      	LDI  R17,LOW(1)
000e32 c002      	RJMP _0x20C001E
                 _0x20C001D:
000e33 940e 1180 	CALL SUBOPT_0x3D
                 _0x20C001E:
000e35 c10a      	RJMP _0x20C001B
                 _0x20C001C:
000e36 30e1      	CPI  R30,LOW(0x1)
000e37 f4a9      	BRNE _0x20C001F
000e38 3225      	CPI  R18,37
000e39 f419      	BRNE _0x20C0020
000e3a 940e 1180 	CALL SUBOPT_0x3D
000e3c c102      	RJMP _0x20C00CC
                 _0x20C0020:
000e3d e012      	LDI  R17,LOW(2)
000e3e e040      	LDI  R20,LOW(0)
000e3f e000      	LDI  R16,LOW(0)
000e40 322d      	CPI  R18,45
000e41 f411      	BRNE _0x20C0021
000e42 e001      	LDI  R16,LOW(1)
000e43 c0fc      	RJMP _0x20C001B
                 _0x20C0021:
000e44 322b      	CPI  R18,43
000e45 f411      	BRNE _0x20C0022
000e46 e24b      	LDI  R20,LOW(43)
000e47 c0f8      	RJMP _0x20C001B
                 _0x20C0022:
000e48 3220      	CPI  R18,32
000e49 f411      	BRNE _0x20C0023
000e4a e240      	LDI  R20,LOW(32)
000e4b c0f4      	RJMP _0x20C001B
                 _0x20C0023:
000e4c c002      	RJMP _0x20C0024
                 _0x20C001F:
000e4d 30e2      	CPI  R30,LOW(0x2)
000e4e f439      	BRNE _0x20C0025
                 _0x20C0024:
000e4f e050      	LDI  R21,LOW(0)
000e50 e013      	LDI  R17,LOW(3)
000e51 3320      	CPI  R18,48
000e52 f411      	BRNE _0x20C0026
000e53 6800      	ORI  R16,LOW(128)
000e54 c0eb      	RJMP _0x20C001B
                 _0x20C0026:
000e55 c003      	RJMP _0x20C0027
                 _0x20C0025:
000e56 30e3      	CPI  R30,LOW(0x3)
000e57 f009      	BREQ PC+2
000e58 c0e7      	RJMP _0x20C001B
                 _0x20C0027:
000e59 3320      	CPI  R18,48
000e5a f010      	BRLO _0x20C002A
000e5b 332a      	CPI  R18,58
000e5c f008      	BRLO _0x20C002B
                 _0x20C002A:
000e5d c007      	RJMP _0x20C0029
                 _0x20C002B:
000e5e e0aa      	LDI  R26,LOW(10)
000e5f 9f5a      	MUL  R21,R26
000e60 2d50      	MOV  R21,R0
000e61 2fe2      	MOV  R30,R18
000e62 53e0      	SUBI R30,LOW(48)
000e63 0f5e      	ADD  R21,R30
000e64 c0db      	RJMP _0x20C001B
                 _0x20C0029:
000e65 2fe2      	MOV  R30,R18
000e66 36e3      	CPI  R30,LOW(0x63)
000e67 f449      	BRNE _0x20C002F
000e68 940e 1187 	CALL SUBOPT_0x3E
000e6a 89e8      	LDD  R30,Y+16
000e6b 89f9      	LDD  R31,Y+16+1
000e6c 81a4      	LDD  R26,Z+4
000e6d 93aa      	ST   -Y,R26
000e6e 940e 118d 	CALL SUBOPT_0x3F
000e70 c0ce      	RJMP _0x20C0030
                 _0x20C002F:
000e71 37e3      	CPI  R30,LOW(0x73)
000e72 f441      	BRNE _0x20C0032
000e73 940e 1187 	CALL SUBOPT_0x3E
000e75 940e 1193 	CALL SUBOPT_0x40
000e77 940e 07f6 	CALL _strlen
000e79 2f1e      	MOV  R17,R30
000e7a c00a      	RJMP _0x20C0033
                 _0x20C0032:
000e7b 37e0      	CPI  R30,LOW(0x70)
000e7c f461      	BRNE _0x20C0035
000e7d 940e 1187 	CALL SUBOPT_0x3E
000e7f 940e 1193 	CALL SUBOPT_0x40
000e81 940e 0802 	CALL _strlenf
000e83 2f1e      	MOV  R17,R30
000e84 6008      	ORI  R16,LOW(8)
                 _0x20C0033:
000e85 6002      	ORI  R16,LOW(2)
000e86 770f      	ANDI R16,LOW(127)
000e87 e030      	LDI  R19,LOW(0)
000e88 c034      	RJMP _0x20C0036
                 _0x20C0035:
000e89 36e4      	CPI  R30,LOW(0x64)
000e8a f011      	BREQ _0x20C0039
000e8b 36e9      	CPI  R30,LOW(0x69)
000e8c f411      	BRNE _0x20C003A
                 _0x20C0039:
000e8d 6004      	ORI  R16,LOW(4)
000e8e c002      	RJMP _0x20C003B
                 _0x20C003A:
000e8f 37e5      	CPI  R30,LOW(0x75)
000e90 f431      	BRNE _0x20C003C
                 _0x20C003B:
000e91 e7ea      	LDI  R30,LOW(_tbl10_G106*2)
000e92 e0f2      	LDI  R31,HIGH(_tbl10_G106*2)
000e93 83ee      	STD  Y+6,R30
000e94 83ff      	STD  Y+6+1,R31
000e95 e015      	LDI  R17,LOW(5)
000e96 c00c      	RJMP _0x20C003D
                 _0x20C003C:
000e97 35e8      	CPI  R30,LOW(0x58)
000e98 f411      	BRNE _0x20C003F
000e99 6008      	ORI  R16,LOW(8)
000e9a c003      	RJMP _0x20C0040
                 _0x20C003F:
000e9b 37e8      	CPI  R30,LOW(0x78)
000e9c f009      	BREQ PC+2
000e9d c0a1      	RJMP _0x20C0071
                 _0x20C0040:
000e9e e8e4      	LDI  R30,LOW(_tbl16_G106*2)
000e9f e0f2      	LDI  R31,HIGH(_tbl16_G106*2)
000ea0 83ee      	STD  Y+6,R30
000ea1 83ff      	STD  Y+6+1,R31
000ea2 e014      	LDI  R17,LOW(4)
                 _0x20C003D:
000ea3 ff02      	SBRS R16,2
000ea4 c014      	RJMP _0x20C0042
000ea5 940e 1187 	CALL SUBOPT_0x3E
000ea7 940e 119d 	CALL SUBOPT_0x41
000ea9 85ab      	LDD  R26,Y+11
000eaa 23aa      	TST  R26
000eab f43a      	BRPL _0x20C0043
000eac 85ea      	LDD  R30,Y+10
000ead 85fb      	LDD  R31,Y+10+1
000eae 940e 120b 	CALL __ANEGW1
000eb0 87ea      	STD  Y+10,R30
000eb1 87fb      	STD  Y+10+1,R31
000eb2 e24d      	LDI  R20,LOW(45)
                 _0x20C0043:
000eb3 3040      	CPI  R20,0
000eb4 f011      	BREQ _0x20C0044
000eb5 5f1f      	SUBI R17,-LOW(1)
000eb6 c001      	RJMP _0x20C0045
                 _0x20C0044:
000eb7 7f0b      	ANDI R16,LOW(251)
                 _0x20C0045:
000eb8 c004      	RJMP _0x20C0046
                 _0x20C0042:
000eb9 940e 1187 	CALL SUBOPT_0x3E
000ebb 940e 119d 	CALL SUBOPT_0x41
                 _0x20C0046:
                 _0x20C0036:
000ebd fd00      	SBRC R16,0
000ebe c011      	RJMP _0x20C0047
                 _0x20C0048:
000ebf 1715      	CP   R17,R21
000ec0 f478      	BRSH _0x20C004A
000ec1 ff07      	SBRS R16,7
000ec2 c008      	RJMP _0x20C004B
000ec3 ff02      	SBRS R16,2
000ec4 c004      	RJMP _0x20C004C
000ec5 7f0b      	ANDI R16,LOW(251)
000ec6 2f24      	MOV  R18,R20
000ec7 5011      	SUBI R17,LOW(1)
000ec8 c001      	RJMP _0x20C004D
                 _0x20C004C:
000ec9 e320      	LDI  R18,LOW(48)
                 _0x20C004D:
000eca c001      	RJMP _0x20C004E
                 _0x20C004B:
000ecb e220      	LDI  R18,LOW(32)
                 _0x20C004E:
000ecc 940e 1180 	CALL SUBOPT_0x3D
000ece 5051      	SUBI R21,LOW(1)
000ecf cfef      	RJMP _0x20C0048
                 _0x20C004A:
                 _0x20C0047:
000ed0 2f31      	MOV  R19,R17
000ed1 ff01      	SBRS R16,1
000ed2 c017      	RJMP _0x20C004F
                 _0x20C0050:
000ed3 3030      	CPI  R19,0
000ed4 f0a1      	BREQ _0x20C0052
000ed5 ff03      	SBRS R16,3
000ed6 c006      	RJMP _0x20C0053
000ed7 81ee      	LDD  R30,Y+6
000ed8 81ff      	LDD  R31,Y+6+1
000ed9 9125      	LPM  R18,Z+
000eda 83ee      	STD  Y+6,R30
000edb 83ff      	STD  Y+6+1,R31
000edc c005      	RJMP _0x20C0054
                 _0x20C0053:
000edd 81ae      	LDD  R26,Y+6
000ede 81bf      	LDD  R27,Y+6+1
000edf 912d      	LD   R18,X+
000ee0 83ae      	STD  Y+6,R26
000ee1 83bf      	STD  Y+6+1,R27
                 _0x20C0054:
000ee2 940e 1180 	CALL SUBOPT_0x3D
000ee4 3050      	CPI  R21,0
000ee5 f009      	BREQ _0x20C0055
000ee6 5051      	SUBI R21,LOW(1)
                 _0x20C0055:
000ee7 5031      	SUBI R19,LOW(1)
000ee8 cfea      	RJMP _0x20C0050
                 _0x20C0052:
000ee9 c04b      	RJMP _0x20C0056
                 _0x20C004F:
                 _0x20C0058:
000eea e320      	LDI  R18,LOW(48)
000eeb 81ee      	LDD  R30,Y+6
000eec 81ff      	LDD  R31,Y+6+1
000eed 940e 123a 	CALL __GETW1PF
000eef 87e8      	STD  Y+8,R30
000ef0 87f9      	STD  Y+8+1,R31
000ef1 81ee      	LDD  R30,Y+6
000ef2 81ff      	LDD  R31,Y+6+1
000ef3 9632      	ADIW R30,2
000ef4 83ee      	STD  Y+6,R30
000ef5 83ff      	STD  Y+6+1,R31
                 _0x20C005A:
000ef6 85e8      	LDD  R30,Y+8
000ef7 85f9      	LDD  R31,Y+8+1
000ef8 85aa      	LDD  R26,Y+10
000ef9 85bb      	LDD  R27,Y+10+1
000efa 17ae      	CP   R26,R30
000efb 07bf      	CPC  R27,R31
000efc f050      	BRLO _0x20C005C
000efd 5f2f      	SUBI R18,-LOW(1)
000efe 85a8      	LDD  R26,Y+8
000eff 85b9      	LDD  R27,Y+8+1
000f00 85ea      	LDD  R30,Y+10
000f01 85fb      	LDD  R31,Y+10+1
000f02 1bea      	SUB  R30,R26
000f03 0bfb      	SBC  R31,R27
000f04 87ea      	STD  Y+10,R30
000f05 87fb      	STD  Y+10+1,R31
000f06 cfef      	RJMP _0x20C005A
                 _0x20C005C:
000f07 332a      	CPI  R18,58
000f08 f028      	BRLO _0x20C005D
000f09 ff03      	SBRS R16,3
000f0a c002      	RJMP _0x20C005E
000f0b 5f29      	SUBI R18,-LOW(7)
000f0c c001      	RJMP _0x20C005F
                 _0x20C005E:
000f0d 5d29      	SUBI R18,-LOW(39)
                 _0x20C005F:
                 _0x20C005D:
000f0e fd04      	SBRC R16,4
000f0f c01a      	RJMP _0x20C0061
000f10 3321      	CPI  R18,49
000f11 f420      	BRSH _0x20C0063
000f12 85a8      	LDD  R26,Y+8
000f13 85b9      	LDD  R27,Y+8+1
000f14 9711      	SBIW R26,1
000f15 f409      	BRNE _0x20C0062
                 _0x20C0063:
000f16 c009      	RJMP _0x20C00CD
                 _0x20C0062:
000f17 1753      	CP   R21,R19
000f18 f010      	BRLO _0x20C0067
000f19 ff00      	SBRS R16,0
000f1a c001      	RJMP _0x20C0068
                 _0x20C0067:
000f1b c013      	RJMP _0x20C0066
                 _0x20C0068:
000f1c e220      	LDI  R18,LOW(32)
000f1d ff07      	SBRS R16,7
000f1e c00b      	RJMP _0x20C0069
000f1f e320      	LDI  R18,LOW(48)
                 _0x20C00CD:
000f20 6100      	ORI  R16,LOW(16)
000f21 ff02      	SBRS R16,2
000f22 c007      	RJMP _0x20C006A
000f23 7f0b      	ANDI R16,LOW(251)
000f24 934a      	ST   -Y,R20
000f25 940e 118d 	CALL SUBOPT_0x3F
000f27 3050      	CPI  R21,0
000f28 f009      	BREQ _0x20C006B
000f29 5051      	SUBI R21,LOW(1)
                 _0x20C006B:
                 _0x20C006A:
                 _0x20C0069:
                 _0x20C0061:
000f2a 940e 1180 	CALL SUBOPT_0x3D
000f2c 3050      	CPI  R21,0
000f2d f009      	BREQ _0x20C006C
000f2e 5051      	SUBI R21,LOW(1)
                 _0x20C006C:
                 _0x20C0066:
000f2f 5031      	SUBI R19,LOW(1)
000f30 85a8      	LDD  R26,Y+8
000f31 85b9      	LDD  R27,Y+8+1
000f32 9712      	SBIW R26,2
000f33 f008      	BRLO _0x20C0059
000f34 cfb5      	RJMP _0x20C0058
                 _0x20C0059:
                 _0x20C0056:
000f35 ff00      	SBRS R16,0
000f36 c008      	RJMP _0x20C006D
                 _0x20C006E:
000f37 3050      	CPI  R21,0
000f38 f031      	BREQ _0x20C0070
000f39 5051      	SUBI R21,LOW(1)
000f3a e2e0      	LDI  R30,LOW(32)
000f3b 93ea      	ST   -Y,R30
000f3c 940e 118d 	CALL SUBOPT_0x3F
000f3e cff8      	RJMP _0x20C006E
                 _0x20C0070:
                 _0x20C006D:
                 _0x20C0071:
                 _0x20C0030:
                 _0x20C00CC:
000f3f e010      	LDI  R17,LOW(0)
                 _0x20C001B:
000f40 cee0      	RJMP _0x20C0016
                 _0x20C0018:
000f41 85ac      	LDD  R26,Y+12
000f42 85bd      	LDD  R27,Y+12+1
000f43 940e 122c 	CALL __GETW1P
000f45 940e 126b 	CALL __LOADLOCR6
000f47 9664      	ADIW R28,20
000f48 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000f49 92ff      	PUSH R15
000f4a 2ef8      	MOV  R15,R24
000f4b 9726      	SBIW R28,6
000f4c 940e 1266 	CALL __SAVELOCR4
000f4e 940e 11a5 	CALL SUBOPT_0x42
000f50 9730      	SBIW R30,0
000f51 f419      	BRNE _0x20C0072
000f52 efef      	LDI  R30,LOW(65535)
000f53 efff      	LDI  R31,HIGH(65535)
000f54 c023      	RJMP _0x2160003
                 _0x20C0072:
000f55 01de      	MOVW R26,R28
000f56 9616      	ADIW R26,6
000f57 940e 1207 	CALL __ADDW2R15
000f59 018d      	MOVW R16,R26
000f5a 940e 11a5 	CALL SUBOPT_0x42
000f5c 83ee      	STD  Y+6,R30
000f5d 83ff      	STD  Y+6+1,R31
000f5e e0e0      	LDI  R30,LOW(0)
000f5f 87e8      	STD  Y+8,R30
000f60 87e9      	STD  Y+8+1,R30
000f61 01de      	MOVW R26,R28
000f62 961a      	ADIW R26,10
000f63 940e 1207 	CALL __ADDW2R15
000f65 940e 122c 	CALL __GETW1P
000f67 93fa      	ST   -Y,R31
000f68 93ea      	ST   -Y,R30
000f69 931a      	ST   -Y,R17
000f6a 930a      	ST   -Y,R16
000f6b edeb      	LDI  R30,LOW(_put_buff_G106)
000f6c e0fd      	LDI  R31,HIGH(_put_buff_G106)
000f6d 93fa      	ST   -Y,R31
000f6e 93ea      	ST   -Y,R30
000f6f 01de      	MOVW R26,R28
000f70 961a      	ADIW R26,10
000f71 dea3      	RCALL __print_G106
000f72 019f      	MOVW R18,R30
000f73 81ae      	LDD  R26,Y+6
000f74 81bf      	LDD  R27,Y+6+1
000f75 e0e0      	LDI  R30,LOW(0)
000f76 93ec      	ST   X,R30
000f77 01f9      	MOVW R30,R18
                 _0x2160003:
000f78 940e 126d 	CALL __LOADLOCR4
000f7a 962a      	ADIW R28,10
000f7b 90ff      	POP  R15
000f7c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000f7d 93aa      	ST   -Y,R26
000f7e 81e8      	LD   R30,Y
000f7f e0f0      	LDI  R31,0
000f80 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000f81 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000f82 91a4      	LPM  R26,Z
000f83 81e9      	LDD  R30,Y+1
000f84 940e 120f 	CALL __LSLB12
                 _0x2160002:
000f86 9622      	ADIW R28,2
000f87 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000f88 93aa      	ST   -Y,R26
000f89 931a      	ST   -Y,R17
000f8a 81e9      	LDD  R30,Y+1
000f8b 30e7      	CPI  R30,LOW(0x7)
000f8c f011      	BREQ _0x2140007
000f8d 30ea      	CPI  R30,LOW(0xA)
000f8e f419      	BRNE _0x2140008
                 _0x2140007:
000f8f 9110 067c 	LDS  R17,_glcd_state
000f91 c009      	RJMP _0x2140009
                 _0x2140008:
000f92 30e9      	CPI  R30,LOW(0x9)
000f93 f419      	BRNE _0x214000B
                +
000f94 9110 067d+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000f96 c004      	RJMP _0x2140009
                 _0x214000B:
000f97 30e8      	CPI  R30,LOW(0x8)
000f98 f4a1      	BRNE _0x2140005
                +
000f99 9110 068c+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2140009:
                +
000f9b 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000f9d 30e0      	CPI  R30,0
000f9e f049      	BREQ _0x214000E
000f9f 3010      	CPI  R17,0
000fa0 f019      	BREQ _0x214000F
000fa1 efef      	LDI  R30,LOW(255)
000fa2 8118      	LDD  R17,Y+0
000fa3 c029      	RJMP _0x2160001
                 _0x214000F:
000fa4 81ea      	LDD  R30,Y+2
000fa5 95e0      	COM  R30
000fa6 8118      	LDD  R17,Y+0
000fa7 c025      	RJMP _0x2160001
                 _0x214000E:
000fa8 3010      	CPI  R17,0
000fa9 f419      	BRNE _0x2140011
000faa e0e0      	LDI  R30,LOW(0)
000fab 8118      	LDD  R17,Y+0
000fac c020      	RJMP _0x2160001
                 _0x2140011:
                 _0x2140005:
000fad 81ea      	LDD  R30,Y+2
000fae 8118      	LDD  R17,Y+0
000faf c01d      	RJMP _0x2160001
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000fb0 93ba      	ST   -Y,R27
000fb1 93aa      	ST   -Y,R26
000fb2 81ea      	LDD  R30,Y+2
000fb3 30e1      	CPI  R30,LOW(0x1)
000fb4 f421      	BRNE _0x2140015
000fb5 81e8      	LD   R30,Y
000fb6 81f9      	LDD  R31,Y+1
000fb7 91e4      	LPM  R30,Z
000fb8 c014      	RJMP _0x2160001
                 _0x2140015:
000fb9 30e2      	CPI  R30,LOW(0x2)
000fba f429      	BRNE _0x2140016
000fbb 81a8      	LD   R26,Y
000fbc 81b9      	LDD  R27,Y+1
000fbd 940e 1243 	CALL __EEPROMRDB
000fbf c00d      	RJMP _0x2160001
                 _0x2140016:
000fc0 30e3      	CPI  R30,LOW(0x3)
000fc1 f441      	BRNE _0x2140018
000fc2 81a8      	LD   R26,Y
000fc3 81b9      	LDD  R27,Y+1
                +
000fc4 91e0 0695+LDS R30 , _glcd_state + ( 25 )
000fc6 91f0 0696+LDS R31 , _glcd_state + ( 25 ) + 1
000fc8 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000fc9 c003      	RJMP _0x2160001
                 _0x2140018:
000fca 81a8      	LD   R26,Y
000fcb 81b9      	LDD  R27,Y+1
000fcc 91ec      	LD   R30,X
                 _0x2160001:
000fcd 9623      	ADIW R28,3
000fce 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000fcf 93aa      	ST   -Y,R26
000fd0 81eb      	LDD  R30,Y+3
000fd1 30e0      	CPI  R30,0
000fd2 f429      	BRNE _0x214001C
000fd3 81e8      	LD   R30,Y
000fd4 81a9      	LDD  R26,Y+1
000fd5 81ba      	LDD  R27,Y+1+1
000fd6 93ec      	ST   X,R30
000fd7 c014      	RJMP _0x214001B
                 _0x214001C:
000fd8 30e2      	CPI  R30,LOW(0x2)
000fd9 f431      	BRNE _0x214001D
000fda 81e8      	LD   R30,Y
000fdb 81a9      	LDD  R26,Y+1
000fdc 81ba      	LDD  R27,Y+1+1
000fdd 940e 124f 	CALL __EEPROMWRB
000fdf c00c      	RJMP _0x214001B
                 _0x214001D:
000fe0 30e3      	CPI  R30,LOW(0x3)
000fe1 f451      	BRNE _0x214001B
000fe2 81e9      	LDD  R30,Y+1
000fe3 81fa      	LDD  R31,Y+1+1
000fe4 93fa      	ST   -Y,R31
000fe5 93ea      	ST   -Y,R30
000fe6 81aa      	LDD  R26,Y+2
                +
000fe7 91e0 0697+LDS R30 , _glcd_state + ( 27 )
000fe9 91f0 0698+LDS R31 , _glcd_state + ( 27 ) + 1
000feb 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x214001B:
000fec 9624      	ADIW R28,4
000fed 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _glcd_state:
00067c           	.BYTE 0x1D
                 _rx_buffer0:
000699           	.BYTE 0x40
                 _buff:
0006d9           	.BYTE 0x104
                 _dem:
0007dd           	.BYTE 0x2
                 _count:
0007df           	.BYTE 0x2
                 _rain_state:
0007e1           	.BYTE 0xA
                 _rain_count:
0007eb           	.BYTE 0x4
                 _start_rain:
0007ef           	.BYTE 0x1
                 _tx_buffer0:
0007f0           	.BYTE 0x40
                 _tx_wr_index0:
000830           	.BYTE 0x1
                 _tx_rd_index0:
000831           	.BYTE 0x1
                 _tx_counter0:
000832           	.BYTE 0x1
                 _P_Add:
000833           	.BYTE 0x1
                 _Code_tay_cam1:
000834           	.BYTE 0x1
                 _Code_tay_cam2:
000835           	.BYTE 0x1
                 _Code_tay_cam3:
000836           	.BYTE 0x1
                 _Code_tay_cam4:
000837           	.BYTE 0x1
                 _station_receive:
000838           	.BYTE 0xA
                 _tay_cam_receive:
000842           	.BYTE 0x8
                 _data_receive:
00084a           	.BYTE 0x12
                 _result:
00085c           	.BYTE 0x1
                 _key:
00085d           	.BYTE 0xA
                 __seed_G102:
000867           	.BYTE 0x4
                 _gfx_addr_G103:
00086b           	.BYTE 0x2
                 _gfx_buffer_G103:
00086d           	.BYTE 0x1F8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x0:
000fee 91ed      	LD   R30,X+
000fef 91fd      	LD   R31,X+
000ff0 9631      	ADIW R30,1
000ff1 93fe      	ST   -X,R31
000ff2 93ee      	ST   -X,R30
000ff3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000ff4 91e0 07df 	LDS  R30,_count
000ff6 91f0 07e0 	LDS  R31,_count+1
000ff8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000ff9 eea1      	LDI  R26,LOW(_rain_state)
000ffa e0b7      	LDI  R27,HIGH(_rain_state)
000ffb 0fee      	LSL  R30
000ffc 1fff      	ROL  R31
000ffd 0fae      	ADD  R26,R30
000ffe 1fbf      	ADC  R27,R31
000fff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
001000 edaf      	LDI  R26,LOW(_count)
001001 e0b7      	LDI  R27,HIGH(_count)
001002 cfeb      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
001003 e0e0      	LDI  R30,LOW(0)
001004 93e0 07dd 	STS  _dem,R30
001006 93e0 07de 	STS  _dem+1,R30
001008 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
001009 93ba      	ST   -Y,R27
00100a 93aa      	ST   -Y,R26
00100b 81a8      	LD   R26,Y
00100c 81b9      	LDD  R27,Y+1
00100d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00100e 1ba2      	SUB  R26,R18
00100f 0bb3      	SBC  R27,R19
001010 a5ee      	LDD  R30,Y+46
001011 a5ff      	LDD  R31,Y+46+1
001012 17ea      	CP   R30,R26
001013 07fb      	CPC  R31,R27
001014 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
001015 ede9      	LDI  R30,LOW(_buff)
001016 e0f6      	LDI  R31,HIGH(_buff)
001017 93fa      	ST   -Y,R31
001018 93ea      	ST   -Y,R30
001019 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00101a e0e7      	LDI  R30,LOW(7)
00101b 93ea      	ST   -Y,R30
00101c e7ae      	LDI  R26,LOW(126)
00101d 940e 048b 	CALL _RF_Write_RX
00101f eea2      	LDI  R26,LOW(226)
001020 940c 04b1 	JMP  _RF_Command_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x9:
                +
001022 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
001023 958a     +DEC R24
001024 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
001025 81e9      	LDD  R30,Y+1
001026 0fee      	LSL  R30
001027 83e9      	STD  Y+1,R30
001028 9adc      	SBI  0x1B,4
                +
001029 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00102a 958a     +DEC R24
00102b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00102c e0e0      	LDI  R30,0
00102d 99cd      	SBIC 0x19,5
00102e e0e1      	LDI  R30,1
00102f 81a9      	LDD  R26,Y+1
001030 2bea      	OR   R30,R26
001031 83e9      	STD  Y+1,R30
001032 98dc      	CBI  0x1B,4
001033 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
001034 93aa      	ST   -Y,R26
001035 98da      	CBI  0x1B,2
001036 81e9      	LDD  R30,Y+1
001037 62e0      	ORI  R30,0x20
001038 2fae      	MOV  R26,R30
001039 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00103a 9ada      	SBI  0x1B,2
                +
00103b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00103c 958a     +DEC R24
00103d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00103e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
00103f 940e 0457 	CALL _SPI_RW_RX
001041 81a8      	LD   R26,Y
001042 940c 0457 	JMP  _SPI_RW_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
001044 940e 0457 	CALL _SPI_RW_RX
001046 91a0 0835 	LDS  R26,_Code_tay_cam2
001048 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
001049 940e 04a1 	CALL _RF_Write3_RX
00104b e1e0      	LDI  R30,LOW(16)
00104c 93ea      	ST   -Y,R30
00104d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00104e 93ea      	ST   -Y,R30
00104f e0af      	LDI  R26,LOW(15)
001050 940c 048b 	JMP  _RF_Write_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
001052 e0f0      	LDI  R31,0
001053 93ed      	ST   X+,R30
001054 93fc      	ST   X,R31
001055 940c 046a 	JMP  _SPI_Read_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
001057 93ea      	ST   -Y,R30
001058 e3e0      	LDI  R30,LOW(48)
001059 93ea      	ST   -Y,R30
00105a e0af      	LDI  R26,LOW(15)
00105b 940e 0ce5 	CALL _glcd_line
00105d e0e0      	LDI  R30,LOW(0)
00105e 93ea      	ST   -Y,R30
00105f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
001060 93ea      	ST   -Y,R30
001061 e5e4      	LDI  R30,LOW(84)
001062 93ea      	ST   -Y,R30
001063 e3a0      	LDI  R26,LOW(48)
001064 940e 0ce5 	CALL _glcd_line
001066 e0e0      	LDI  R30,LOW(0)
001067 93ea      	ST   -Y,R30
001068 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
001069 93ea      	ST   -Y,R30
00106a e0a3      	LDI  R26,LOW(3)
00106b 940c 0cd9 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
00106d 940e 0caf 	CALL _glcd_outtext
00106f e0e4      	LDI  R30,LOW(4)
001070 93ea      	ST   -Y,R30
001071 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
001072 93ea      	ST   -Y,R30
001073 e1a2      	LDI  R26,LOW(18)
001074 940c 0cd9 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
001076 93ea      	ST   -Y,R30
001077 e1ac      	LDI  R26,LOW(28)
001078 940c 0cd9 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00107a 93ea      	ST   -Y,R30
00107b e2a5      	LDI  R26,LOW(37)
00107c 940c 0cd9 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x18:
00107e 93fa      	ST   -Y,R31
00107f 93ea      	ST   -Y,R30
001080 e0e0      	LDI  R30,LOW(0)
001081 93ea      	ST   -Y,R30
001082 e1a4      	LDI  R26,LOW(20)
001083 e0b0      	LDI  R27,0
001084 940c 07d5 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
                +
001086 01de     +MOVW R26 , R28
001087 5aaf     +SUBI R26 , LOW ( - 81 )
001088 4fbf     +SBCI R27 , HIGH ( - 81 )
001089 900d     +LD R0 , X +
00108a 91bc     +LD R27 , X
00108b 2da0     +MOV R26 , R0
                 	__GETW2SX 81
00108c 91ec      	LD   R30,X
00108d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
00108e 940e 03a1 	CALL _put_string
001090 e2ac      	LDI  R26,LOW(300)
001091 e0b1      	LDI  R27,HIGH(300)
001092 940c 11fd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1B:
001094 01fe      	MOVW R30,R28
001095 96bc      	ADIW R30,44
001096 93fa      	ST   -Y,R31
001097 93ea      	ST   -Y,R30
001098 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
001099 940e 07e5 	CALL _strcat
00109b cff8      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
                +
00109c 91e0 083e+LDS R30 , _station_receive + ( 6 )
00109e 91f0 083f+LDS R31 , _station_receive + ( 6 ) + 1
                 	__GETW1MN _station_receive,6
0010a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
0010a1 93fa      	ST   -Y,R31
0010a2 93ea      	ST   -Y,R30
0010a3 01de      	MOVW R26,R28
0010a4 965a      	ADIW R26,26
0010a5 940e 0826 	CALL _itoa
0010a7 cfec      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0010a8 01de      	MOVW R26,R28
0010a9 965a      	ADIW R26,26
0010aa cfee      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
                +
0010ab 91e0 083c+LDS R30 , _station_receive + ( 4 )
0010ad 91f0 083d+LDS R31 , _station_receive + ( 4 ) + 1
                 	__GETW1MN _station_receive,4
0010af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
0010b0 91e0 0840+LDS R30 , _station_receive + ( 8 )
0010b2 91f0 0841+LDS R31 , _station_receive + ( 8 ) + 1
                 	__GETW1MN _station_receive,8
0010b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0010b5 93fa      	ST   -Y,R31
0010b6 93ea      	ST   -Y,R30
0010b7 e0a5      	LDI  R26,LOW(5)
0010b8 e0b0      	LDI  R27,0
0010b9 940c 03c1 	JMP  _wait_until
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x23:
0010bb 93fa      	ST   -Y,R31
0010bc 93ea      	ST   -Y,R30
0010bd eda9      	LDI  R26,LOW(_buff)
0010be e0b6      	LDI  R27,HIGH(_buff)
0010bf 940e 0826 	CALL _itoa
0010c1 eda9      	LDI  R26,LOW(_buff)
0010c2 e0b6      	LDI  R27,HIGH(_buff)
0010c3 940c 0caf 	JMP  _glcd_outtext
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x24:
0010c5 e0e1      	LDI  R30,LOW(1)
0010c6 e0f0      	LDI  R31,HIGH(1)
0010c7 93e0 07df 	STS  _count,R30
0010c9 93f0 07e0 	STS  _count+1,R31
0010cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
0010cc 940e 04fd 	CALL _RF_Read_RX_3
0010ce df25      	RCALL SUBOPT_0x1
0010cf 91a0 0838 	LDS  R26,_station_receive
0010d1 91b0 0839 	LDS  R27,_station_receive+1
0010d3 17ea      	CP   R30,R26
0010d4 07fb      	CPC  R31,R27
0010d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
0010d6 91e0 0838 	LDS  R30,_station_receive
0010d8 91f0 0839 	LDS  R31,_station_receive+1
0010da cfe0      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x27:
                +
0010db e1e9     +LDI R30 , LOW ( 2 * _0x0 + ( 349 ) )
0010dc e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 349 ) )
                 	__POINTW1FN _0x0,349
0010dd 93fa      	ST   -Y,R31
0010de 93ea      	ST   -Y,R30
0010df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x28:
0010e0 940e 121f 	CALL __CWD1
0010e2 940e 123e 	CALL __PUTPARD1
0010e4 e084      	LDI  R24,4
0010e5 940e 0f49 	CALL _sprintf
0010e7 9628      	ADIW R28,8
0010e8 eda9      	LDI  R26,LOW(_buff)
0010e9 e0b6      	LDI  R27,HIGH(_buff)
0010ea 940e 0caf 	CALL _glcd_outtext
0010ec e2ee      	LDI  R30,LOW(46)
0010ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x29:
0010ee 940e 121f 	CALL __CWD1
0010f0 940e 123e 	CALL __PUTPARD1
0010f2 e084      	LDI  R24,4
0010f3 940e 0f49 	CALL _sprintf
0010f5 9628      	ADIW R28,8
0010f6 eda9      	LDI  R26,LOW(_buff)
0010f7 e0b6      	LDI  R27,HIGH(_buff)
0010f8 940c 0caf 	JMP  _glcd_outtext
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
0010fa e2a0      	LDI  R26,LOW(800)
0010fb e0b3      	LDI  R27,HIGH(800)
0010fc 940e 11fd 	CALL _delay_ms
0010fe cf01      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2B:
0010ff e6ab      	LDI  R26,LOW(_gfx_addr_G103)
001100 e0b8      	LDI  R27,HIGH(_gfx_addr_G103)
001101 ceec      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
001102 0fea      	ADD  R30,R26
001103 1ffb      	ADC  R31,R27
001104 83ee      	STD  Y+6,R30
001105 83ff      	STD  Y+6+1,R31
001106 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2D:
001107 85ec      	LDD  R30,Y+12
001108 93ea      	ST   -Y,R30
001109 81ef      	LDD  R30,Y+7
00110a 85f8      	LDD  R31,Y+7+1
00110b 9631      	ADIW R30,1
00110c 83ef      	STD  Y+7,R30
00110d 87f8      	STD  Y+7+1,R31
00110e 9731      	SBIW R30,1
00110f 93fa      	ST   -Y,R31
001110 93ea      	ST   -Y,R30
001111 e0a0      	LDI  R26,LOW(0)
001112 940c 0fcf 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
001114 930a      	ST   -Y,R16
001115 89a8      	LDD  R26,Y+16
001116 940c 0876 	JMP  _pcd8544_setaddr_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2F:
001118 85ec      	LDD  R30,Y+12
001119 93ea      	ST   -Y,R30
00111a 81ef      	LDD  R30,Y+7
00111b 85f8      	LDD  R31,Y+7+1
00111c 9631      	ADIW R30,1
00111d 83ef      	STD  Y+7,R30
00111e 87f8      	STD  Y+7+1,R31
00111f 9731      	SBIW R30,1
001120 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
001121 2766      	CLR  R22
001122 2777      	CLR  R23
001123 01df      	MOVW R26,R30
001124 01cb      	MOVW R24,R22
001125 940c 0fb0 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
001127 935a      	ST   -Y,R21
001128 85aa      	LDD  R26,Y+10
001129 940c 0f88 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
00112b 930a      	ST   -Y,R16
00112c 9503      	INC  R16
00112d 89e8      	LDD  R30,Y+16
00112e 93ea      	ST   -Y,R30
00112f 935a      	ST   -Y,R21
001130 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
001131 2f5e      	MOV  R21,R30
001132 85ec      	LDD  R30,Y+12
001133 93ea      	ST   -Y,R30
001134 81af      	LDD  R26,Y+7
001135 85b8      	LDD  R27,Y+7+1
001136 2788      	CLR  R24
001137 2799      	CLR  R25
001138 940e 0fb0 	CALL _glcd_readmem
00113a 2e1e      	MOV  R1,R30
00113b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x34:
00113c 930a      	ST   -Y,R16
00113d 9503      	INC  R16
00113e 89e8      	LDD  R30,Y+16
00113f 93ea      	ST   -Y,R30
001140 85ee      	LDD  R30,Y+14
001141 93ea      	ST   -Y,R30
001142 85e9      	LDD  R30,Y+9
001143 85fa      	LDD  R31,Y+9+1
001144 9631      	ADIW R30,1
001145 87e9      	STD  Y+9,R30
001146 87fa      	STD  Y+9+1,R31
001147 9731      	SBIW R30,1
001148 cfd8      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
001149 940e 1264 	CALL __SAVELOCR6
                +
00114b 91e0 0680+LDS R30 , _glcd_state + ( 4 )
00114d 91f0 0681+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
00114f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
001150 01f8      	MOVW R30,R16
                +
001151 5f0f     +SUBI R16 , LOW ( - 1 )
001152 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001153 9004      	LPM  R0,Z
001154 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
                +
001155 91e0 0680+LDS R30 , _glcd_state + ( 4 )
001157 91f0 0681+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
001159 9631      	ADIW R30,1
00115a 91e4      	LPM  R30,Z
00115b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
00115c 93ea      	ST   -Y,R30
00115d e0e0      	LDI  R30,LOW(0)
00115e 93ea      	ST   -Y,R30
00115f e0e0      	LDI  R30,LOW(0)
001160 e0f0      	LDI  R31,HIGH(0)
001161 93fa      	ST   -Y,R31
001162 93ea      	ST   -Y,R30
001163 e0a9      	LDI  R26,LOW(9)
001164 940c 09b4 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x39:
001166 81ae      	LDD  R26,Y+6
001167 5faf      	SUBI R26,-LOW(1)
001168 83ae      	STD  Y+6,R26
001169 50a1      	SUBI R26,LOW(1)
                +
00116a 91e0 0684+LDS R30 , _glcd_state + ( 8 )
                 	__GETB1MN _glcd_state,8
00116c 17ae      	CP   R26,R30
00116d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
00116e 933a      	ST   -Y,R19
00116f 85aa      	LDD  R26,Y+10
001170 940c 0cbf 	JMP  _glcd_putpixelm_G104
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
001172 85a9      	LDD  R26,Y+9
001173 85ba      	LDD  R27,Y+9+1
001174 0fea      	ADD  R30,R26
001175 1ffb      	ADC  R31,R27
001176 87e9      	STD  Y+9,R30
001177 87fa      	STD  Y+9+1,R31
001178 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
001179 85e9      	LDD  R30,Y+9
00117a 85fa      	LDD  R31,Y+9+1
00117b 1bea      	SUB  R30,R26
00117c 0bfb      	SBC  R31,R27
00117d 87e9      	STD  Y+9,R30
00117e 87fa      	STD  Y+9+1,R31
00117f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3D:
001180 932a      	ST   -Y,R18
001181 85ad      	LDD  R26,Y+13
001182 85be      	LDD  R27,Y+13+1
001183 85ef      	LDD  R30,Y+15
001184 89f8      	LDD  R31,Y+15+1
001185 9509      	ICALL
001186 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
001187 89e8      	LDD  R30,Y+16
001188 89f9      	LDD  R31,Y+16+1
001189 9734      	SBIW R30,4
00118a 8be8      	STD  Y+16,R30
00118b 8bf9      	STD  Y+16+1,R31
00118c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
00118d 85ad      	LDD  R26,Y+13
00118e 85be      	LDD  R27,Y+13+1
00118f 85ef      	LDD  R30,Y+15
001190 89f8      	LDD  R31,Y+15+1
001191 9509      	ICALL
001192 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x40:
001193 89a8      	LDD  R26,Y+16
001194 89b9      	LDD  R27,Y+16+1
001195 9614      	ADIW R26,4
001196 940e 122c 	CALL __GETW1P
001198 83ee      	STD  Y+6,R30
001199 83ff      	STD  Y+6+1,R31
00119a 81ae      	LDD  R26,Y+6
00119b 81bf      	LDD  R27,Y+6+1
00119c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x41:
00119d 89a8      	LDD  R26,Y+16
00119e 89b9      	LDD  R27,Y+16+1
00119f 9614      	ADIW R26,4
0011a0 940e 122c 	CALL __GETW1P
0011a2 87ea      	STD  Y+10,R30
0011a3 87fb      	STD  Y+10+1,R31
0011a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
0011a5 01de      	MOVW R26,R28
0011a6 961c      	ADIW R26,12
0011a7 940e 1207 	CALL __ADDW2R15
0011a9 940e 122c 	CALL __GETW1P
0011ab 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0011ac 9890      	cbi  __i2c_port,__scl_bit
0011ad 9891      	cbi  __i2c_port,__sda_bit
0011ae 9a88      	sbi  __i2c_dir,__scl_bit
0011af 9889      	cbi  __i2c_dir,__sda_bit
0011b0 c015      	rjmp __i2c_delay2
                 _i2c_start:
0011b1 9889      	cbi  __i2c_dir,__sda_bit
0011b2 9888      	cbi  __i2c_dir,__scl_bit
0011b3 27ee      	clr  r30
0011b4 0000      	nop
0011b5 9b81      	sbis __i2c_pin,__sda_bit
0011b6 9508      	ret
0011b7 9b80      	sbis __i2c_pin,__scl_bit
0011b8 9508      	ret
0011b9 d004      	rcall __i2c_delay1
0011ba 9a89      	sbi  __i2c_dir,__sda_bit
0011bb d002      	rcall __i2c_delay1
0011bc 9a88      	sbi  __i2c_dir,__scl_bit
0011bd e0e1      	ldi  r30,1
                 __i2c_delay1:
0011be e06d      	ldi  r22,13
0011bf c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0011c0 9a89      	sbi  __i2c_dir,__sda_bit
0011c1 9a88      	sbi  __i2c_dir,__scl_bit
0011c2 d003      	rcall __i2c_delay2
0011c3 9888      	cbi  __i2c_dir,__scl_bit
0011c4 dff9      	rcall __i2c_delay1
0011c5 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0011c6 e16b      	ldi  r22,27
                 __i2c_delay2l:
0011c7 956a      	dec  r22
0011c8 f7f1      	brne __i2c_delay2l
0011c9 9508      	ret
                 _i2c_read:
0011ca e078      	ldi  r23,8
                 __i2c_read0:
0011cb 9888      	cbi  __i2c_dir,__scl_bit
0011cc dff1      	rcall __i2c_delay1
                 __i2c_read3:
0011cd 9b80      	sbis __i2c_pin,__scl_bit
0011ce cffe      	rjmp __i2c_read3
0011cf dfee      	rcall __i2c_delay1
0011d0 9488      	clc
0011d1 9981      	sbic __i2c_pin,__sda_bit
0011d2 9408      	sec
0011d3 9a88      	sbi  __i2c_dir,__scl_bit
0011d4 dff1      	rcall __i2c_delay2
0011d5 1fee      	rol  r30
0011d6 957a      	dec  r23
0011d7 f799      	brne __i2c_read0
0011d8 2f7a      	mov  r23,r26
0011d9 2377      	tst  r23
0011da f411      	brne __i2c_read1
0011db 9889      	cbi  __i2c_dir,__sda_bit
0011dc c001      	rjmp __i2c_read2
                 __i2c_read1:
0011dd 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0011de dfdf      	rcall __i2c_delay1
0011df 9888      	cbi  __i2c_dir,__scl_bit
0011e0 dfe5      	rcall __i2c_delay2
0011e1 9a88      	sbi  __i2c_dir,__scl_bit
0011e2 dfdb      	rcall __i2c_delay1
0011e3 9889      	cbi  __i2c_dir,__sda_bit
0011e4 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0011e5 e078      	ldi  r23,8
                 __i2c_write0:
0011e6 0faa      	lsl  r26
0011e7 f410      	brcc __i2c_write1
0011e8 9889      	cbi  __i2c_dir,__sda_bit
0011e9 c001      	rjmp __i2c_write2
                 __i2c_write1:
0011ea 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0011eb dfda      	rcall __i2c_delay2
0011ec 9888      	cbi  __i2c_dir,__scl_bit
0011ed dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0011ee 9b80      	sbis __i2c_pin,__scl_bit
0011ef cffe      	rjmp __i2c_write3
0011f0 dfcd      	rcall __i2c_delay1
0011f1 9a88      	sbi  __i2c_dir,__scl_bit
0011f2 957a      	dec  r23
0011f3 f791      	brne __i2c_write0
0011f4 9889      	cbi  __i2c_dir,__sda_bit
0011f5 dfc8      	rcall __i2c_delay1
0011f6 9888      	cbi  __i2c_dir,__scl_bit
0011f7 dfce      	rcall __i2c_delay2
0011f8 e0e1      	ldi  r30,1
0011f9 9981      	sbic __i2c_pin,__sda_bit
0011fa 27ee      	clr  r30
0011fb 9a88      	sbi  __i2c_dir,__scl_bit
0011fc cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0011fd 9610      	adiw r26,0
0011fe f039      	breq __delay_ms1
                 __delay_ms0:
                +
0011ff ed80     +LDI R24 , LOW ( 0x7D0 )
001200 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001201 9701     +SBIW R24 , 1
001202 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001203 95a8      	wdr
001204 9711      	sbiw r26,1
001205 f7c9      	brne __delay_ms0
                 __delay_ms1:
001206 9508      	ret
                 
                 __ADDW2R15:
001207 2400      	CLR  R0
001208 0daf      	ADD  R26,R15
001209 1db0      	ADC  R27,R0
00120a 9508      	RET
                 
                 __ANEGW1:
00120b 95f1      	NEG  R31
00120c 95e1      	NEG  R30
00120d 40f0      	SBCI R31,0
00120e 9508      	RET
                 
                 __LSLB12:
00120f 23ee      	TST  R30
001210 2e0e      	MOV  R0,R30
001211 2fea      	MOV  R30,R26
001212 f019      	BREQ __LSLB12R
                 __LSLB12L:
001213 0fee      	LSL  R30
001214 940a      	DEC  R0
001215 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001216 9508      	RET
                 
                 __LSRB12:
001217 23ee      	TST  R30
001218 2e0e      	MOV  R0,R30
001219 2fea      	MOV  R30,R26
00121a f019      	BREQ __LSRB12R
                 __LSRB12L:
00121b 95e6      	LSR  R30
00121c 940a      	DEC  R0
00121d f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00121e 9508      	RET
                 
                 __CWD1:
00121f 2f6f      	MOV  R22,R31
001220 0f66      	ADD  R22,R22
001221 0b66      	SBC  R22,R22
001222 2f76      	MOV  R23,R22
001223 9508      	RET
                 
                 __MULW12U:
001224 9ffa      	MUL  R31,R26
001225 2df0      	MOV  R31,R0
001226 9feb      	MUL  R30,R27
001227 0df0      	ADD  R31,R0
001228 9fea      	MUL  R30,R26
001229 2de0      	MOV  R30,R0
00122a 0df1      	ADD  R31,R1
00122b 9508      	RET
                 
                 __GETW1P:
00122c 91ed      	LD   R30,X+
00122d 91fc      	LD   R31,X
00122e 9711      	SBIW R26,1
00122f 9508      	RET
                 
                 __GETD1P_INC:
001230 91ed      	LD   R30,X+
001231 91fd      	LD   R31,X+
001232 916d      	LD   R22,X+
001233 917d      	LD   R23,X+
001234 9508      	RET
                 
                 __PUTDP1_DEC:
001235 937e      	ST   -X,R23
001236 936e      	ST   -X,R22
001237 93fe      	ST   -X,R31
001238 93ee      	ST   -X,R30
001239 9508      	RET
                 
                 __GETW1PF:
00123a 9005      	LPM  R0,Z+
00123b 91f4      	LPM  R31,Z
00123c 2de0      	MOV  R30,R0
00123d 9508      	RET
                 
                 __PUTPARD1:
00123e 937a      	ST   -Y,R23
00123f 936a      	ST   -Y,R22
001240 93fa      	ST   -Y,R31
001241 93ea      	ST   -Y,R30
001242 9508      	RET
                 
                 __EEPROMRDB:
001243 99e1      	SBIC EECR,EEWE
001244 cffe      	RJMP __EEPROMRDB
001245 93ff      	PUSH R31
001246 b7ff      	IN   R31,SREG
001247 94f8      	CLI
001248 bbae      	OUT  EEARL,R26
001249 bbbf      	OUT  EEARH,R27
00124a 9ae0      	SBI  EECR,EERE
00124b b3ed      	IN   R30,EEDR
00124c bfff      	OUT  SREG,R31
00124d 91ff      	POP  R31
00124e 9508      	RET
                 
                 __EEPROMWRB:
00124f 9be1      	SBIS EECR,EEWE
001250 c002      	RJMP __EEPROMWRB1
001251 95a8      	WDR
001252 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001253 b79f      	IN   R25,SREG
001254 94f8      	CLI
001255 bbae      	OUT  EEARL,R26
001256 bbbf      	OUT  EEARH,R27
001257 9ae0      	SBI  EECR,EERE
001258 b38d      	IN   R24,EEDR
001259 17e8      	CP   R30,R24
00125a f019      	BREQ __EEPROMWRB0
00125b bbed      	OUT  EEDR,R30
00125c 9ae2      	SBI  EECR,EEMWE
00125d 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00125e bf9f      	OUT  SREG,R25
00125f 9508      	RET
                 
                 __CPW02:
001260 2400      	CLR  R0
001261 160a      	CP   R0,R26
001262 060b      	CPC  R0,R27
001263 9508      	RET
                 
                 __SAVELOCR6:
001264 935a      	ST   -Y,R21
                 __SAVELOCR5:
001265 934a      	ST   -Y,R20
                 __SAVELOCR4:
001266 933a      	ST   -Y,R19
                 __SAVELOCR3:
001267 932a      	ST   -Y,R18
                 __SAVELOCR2:
001268 931a      	ST   -Y,R17
001269 930a      	ST   -Y,R16
00126a 9508      	RET
                 
                 __LOADLOCR6:
00126b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00126c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00126d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00126e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00126f 8119      	LDD  R17,Y+1
001270 8108      	LD   R16,Y
001271 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
001272 0fac      	ADD  R26,R28
001273 1fbd      	ADC  R27,R29
                 __INITLOC0:
001274 9005      	LPM  R0,Z+
001275 920d      	ST   X+,R0
001276 958a      	DEC  R24
001277 f7e1      	BRNE __INITLOC0
001278 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  38 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   4 r7 :   3 
r8 :   5 r9 :   2 r10:   4 r11:   2 r12:   6 r13:   1 r14:   0 r15:   4 
r16:  99 r17: 135 r18:  69 r19:  53 r20:  36 r21:  52 r22:  43 r23:  17 
r24:  47 r25:  12 r26: 524 r27: 192 r28:  60 r29:   2 r30:1134 r31: 256 
x  :  61 y  : 784 z  :  38 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  37 
adiw  :  74 and   :  10 andi  :  20 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  56 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   7 brmi  :   1 brne  : 118 brpl  :   4 brsh  :  26 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 319 
cbi   :  32 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  44 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :  10 
cp    :  41 cpc   :  17 cpi   : 113 cpse  :   0 dec   :  14 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 
ijmp  :   0 in    :  11 inc   :   7 jmp   :  78 ld    : 100 ldd   : 359 
ldi   : 451 lds   :  77 lpm   :  31 lsl   :  10 lsr   :  15 mov   : 113 
movw  :  89 mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   8 ori   :  16 out   :  59 pop   :  12 push  :  12 rcall : 114 
ret   :  94 reti  :   4 rjmp  : 190 rol   :   5 ror   :   0 sbc   :   7 
sbci  :  23 sbi   :  36 sbic  :  10 sbis  :   5 sbiw  :  52 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   1 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 289 std   : 114 sts   :  70 sub   :  16 subi  :  69 
swap  :   0 tst   :  14 wdr   :   2 
Instructions used: 72 out of 117 (61.5%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0024f2   8238   1220   9458  131072   7.2%
[.dseg] 0x000100 0x000a65      0   1381   1381    4096  33.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 18 warnings
