
AVRASM ver. 2.1.30  D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm Tue Sep 12 15:22:07 2017

D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1099): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R5
                 	.DEF _rx_rd_index0=R4
                 	.DEF _rx_counter0=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _time_flow=R10
                 	.DEF _time_flow_msb=R11
                 	.DEF _time_s=R12
                 	.DEF _time_s_msb=R13
                 	.DEF _tx_wr_index0=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02a8 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0335 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 02eb 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0311 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 0400
00004c 040a
00004d 0700      	.DB  0x0,0x0,0x0,0x4,0xA,0x4,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 _tbl10_G105:
00013d 2710
00013e 03e8
00013f 0064
000140 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000141 0001      	.DB  0x1,0x0
                 _tbl16_G105:
000142 1000
000143 0100
000144 0010
000145 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000146 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000147 0000
000148 0000      	.DB  0x0,0x0,0x0,0x0
000149 0000
00014a 0000      	.DB  0x0,0x0,0x0,0x0
00014b 0000      	.DB  0x0,0x0
                 
                 _0x2A:
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1226): warning: .cseg .db misalignment - padding zero byte
00014c 00a1      	.DB  0xA1
                 _0x2B:
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1228): warning: .cseg .db misalignment - padding zero byte
00014d 00a2      	.DB  0xA2
                 _0x2C:
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1230): warning: .cseg .db misalignment - padding zero byte
00014e 00a3      	.DB  0xA3
                 _0x2D:
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1232): warning: .cseg .db misalignment - padding zero byte
00014f 00a4      	.DB  0xA4
                 _0xCE:
000150 0506
000151 0507
000152 0518
000153 0529      	.DB  LOW(_0xCD),HIGH(_0xCD),LOW(_0xCD+1),HIGH(_0xCD+1),LOW(_0xCD+18),HIGH(_0xCD+18),LOW(_0xCD+35),HIGH(_0xCD+35)
000154 053a      	.DB  LOW(_0xCD+52),HIGH(_0xCD+52)
                 _0xD4:
000155 4547
000156 2054
000157 752f
000158 6470      	.DB  0x47,0x45,0x54,0x20,0x2F,0x75,0x70,0x64
000159 7461
00015a 3f65
00015b 656b
00015c 3d79      	.DB  0x61,0x74,0x65,0x3F,0x6B,0x65,0x79,0x3D
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1239): warning: .cseg .db misalignment - padding zero byte
00015d 0000      	.DB  0x0
                 _0x0:
00015e 5245
00015f 4f52
000160 0052
000161 5237      	.DB  0x45,0x52,0x52,0x4F,0x52,0x0,0x37,0x52
000162 4e36
000163 5953
000164 4846
000165 4642      	.DB  0x36,0x4E,0x53,0x59,0x46,0x48,0x42,0x46
000166 5552
000167 5241
000168 4b36
000169 3500      	.DB  0x52,0x55,0x41,0x52,0x36,0x4B,0x0,0x35
00016a 3049
00016b 3030
00016c 5257
00016d 584f      	.DB  0x49,0x30,0x30,0x30,0x57,0x52,0x4F,0x58
00016e 464f
00016f 3053
000170 3856
000171 0035      	.DB  0x4F,0x46,0x53,0x30,0x56,0x38,0x35,0x0
000172 4e36
000173 4648
000174 4858
000175 3730      	.DB  0x36,0x4E,0x48,0x46,0x58,0x48,0x30,0x37
000176 5336
000177 3043
000178 4432
000179 305a      	.DB  0x36,0x53,0x43,0x30,0x32,0x44,0x5A,0x30
00017a 5700
00017b 4955
00017c 3854
00017d 584c      	.DB  0x0,0x57,0x55,0x49,0x54,0x38,0x4C,0x58
00017e 4e37
00017f 3239
000180 3858
000181 344a      	.DB  0x37,0x4E,0x39,0x32,0x58,0x38,0x4A,0x34
000182 0057
000183 6f4e
000184 6564
000185 203a      	.DB  0x57,0x0,0x4E,0x6F,0x64,0x65,0x3A,0x20
000186 5400
000187 6d65
000188 3a70
000189 0020      	.DB  0x0,0x54,0x65,0x6D,0x70,0x3A,0x20,0x0
00018a 7548
00018b 696d
00018c 3a64
00018d 0020      	.DB  0x48,0x75,0x6D,0x69,0x64,0x3A,0x20,0x0
00018e 6157
00018f 6574
000190 3a72
000191 0020      	.DB  0x57,0x61,0x74,0x65,0x72,0x3A,0x20,0x0
000192 4321
000193 6300
000194 006d
000195 3132      	.DB  0x21,0x43,0x0,0x63,0x6D,0x0,0x32,0x31
000196 3700
000197 0035
000198 3534
000199 4200      	.DB  0x0,0x37,0x35,0x0,0x34,0x35,0x0,0x42
00019a 6f6f
00019b 6974
00019c 676e
00019d 4100      	.DB  0x6F,0x6F,0x74,0x69,0x6E,0x67,0x0,0x41
00019e 0d54
00019f 000a
0001a0 4b4f
0001a1 4100      	.DB  0x54,0xD,0xA,0x0,0x4F,0x4B,0x0,0x41
0001a2 2b54
0001a3 4943
0001a4 5350
0001a5 4154      	.DB  0x54,0x2B,0x43,0x49,0x50,0x53,0x54,0x41
0001a6 5554
0001a7 0d53
0001a8 000a
0001a9 5453      	.DB  0x54,0x55,0x53,0xD,0xA,0x0,0x53,0x54
0001aa 5441
0001ab 5355
0001ac 323a
0001ad 5700      	.DB  0x41,0x54,0x55,0x53,0x3A,0x32,0x0,0x57
0001ae 6669
0001af 2069
0001b0 6f43
0001b1 6e6e      	.DB  0x69,0x66,0x69,0x20,0x43,0x6F,0x6E,0x6E
0001b2 6365
0001b3 6574
0001b4 0d64
0001b5 000a      	.DB  0x65,0x63,0x74,0x65,0x64,0xD,0xA,0x0
0001b6 5441
0001b7 432b
0001b8 4d57
0001b9 444f      	.DB  0x41,0x54,0x2B,0x43,0x57,0x4D,0x4F,0x44
0001ba 3d45
0001bb 0d31
0001bc 000a
0001bd 5441      	.DB  0x45,0x3D,0x31,0xD,0xA,0x0,0x41,0x54
0001be 432b
0001bf 4a57
0001c0 5041
0001c1 223d      	.DB  0x2B,0x43,0x57,0x4A,0x41,0x50,0x3D,0x22
0001c2 6854
0001c3 7961
0001c4 545f
0001c5 6168      	.DB  0x54,0x68,0x61,0x79,0x5F,0x54,0x68,0x61
0001c6 5f6f
0001c7 6564
0001c8 5f6f
0001c9 6967      	.DB  0x6F,0x5F,0x64,0x65,0x6F,0x5F,0x67,0x69
0001ca 6961
0001cb 2c22
0001cc 6322
0001cd 6968      	.DB  0x61,0x69,0x22,0x2C,0x22,0x63,0x68,0x69
0001ce 686e
0001cf 6178
0001d0 2263
0001d1 0a0d      	.DB  0x6E,0x68,0x78,0x61,0x63,0x22,0xD,0xA
0001d2 4100
0001d3 2b54
0001d4 4943
0001d5 4d50      	.DB  0x0,0x41,0x54,0x2B,0x43,0x49,0x50,0x4D
0001d6 5855
0001d7 313d
0001d8 4100
0001d9 2b54      	.DB  0x55,0x58,0x3D,0x31,0x0,0x41,0x54,0x2B
0001da 4943
0001db 5350
0001dc 4154
0001dd 5452      	.DB  0x43,0x49,0x50,0x53,0x54,0x41,0x52,0x54
0001de 303d
0001df 222c
0001e0 4354
0001e1 2250      	.DB  0x3D,0x30,0x2C,0x22,0x54,0x43,0x50,0x22
0001e2 222c
0001e3 7061
0001e4 2e69
0001e5 6874      	.DB  0x2C,0x22,0x61,0x70,0x69,0x2E,0x74,0x68
0001e6 6e69
0001e7 7367
0001e8 6570
0001e9 6b61      	.DB  0x69,0x6E,0x67,0x73,0x70,0x65,0x61,0x6B
0001ea 632e
0001eb 6d6f
0001ec 2c22
0001ed 3038      	.DB  0x2E,0x63,0x6F,0x6D,0x22,0x2C,0x38,0x30
0001ee 2600
0001ef 6966
0001f0 6c65
0001f1 3164      	.DB  0x0,0x26,0x66,0x69,0x65,0x6C,0x64,0x31
0001f2 003d
0001f3 6626
0001f4 6569
0001f5 646c      	.DB  0x3D,0x0,0x26,0x66,0x69,0x65,0x6C,0x64
0001f6 3d32
0001f7 2600
0001f8 6966
0001f9 6c65      	.DB  0x32,0x3D,0x0,0x26,0x66,0x69,0x65,0x6C
0001fa 3364
0001fb 003d
0001fc 5441
0001fd 432b      	.DB  0x64,0x33,0x3D,0x0,0x41,0x54,0x2B,0x43
0001fe 5049
0001ff 4553
000200 444e
000201 303d      	.DB  0x49,0x50,0x53,0x45,0x4E,0x44,0x3D,0x30
000202 002c
000203 203e
000204 4100
000205 2b54      	.DB  0x2C,0x0,0x3E,0x20,0x0,0x41,0x54,0x2B
000206 4943
000207 4350
000208 4f4c
000209 4553      	.DB  0x43,0x49,0x50,0x43,0x4C,0x4F,0x53,0x45
00020a 303d
00020b 0a0d
00020c 2500
00020d 0064      	.DB  0x3D,0x30,0xD,0xA,0x0,0x25,0x64,0x0
                 _0x2020060:
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1286): warning: .cseg .db misalignment - padding zero byte
00020e 0001      	.DB  0x1
                 _0x2020000:
00020f 4e2d
000210 4e41
000211 4900
000212 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Dropbox\2017\project\Internet of Bin\code\Debug\List\center.asm(1289): warning: .cseg .db misalignment - padding zero byte
000213 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000214 0001      	.DW  0x01
000215 0002      	.DW  0x02
000216 028c      	.DW  __REG_BIT_VARS*2
                 
000217 000a      	.DW  0x0A
000218 0004      	.DW  0x04
000219 028e      	.DW  __REG_VARS*2
                 
00021a 0006      	.DW  0x06
00021b 0500      	.DW  _0x29
00021c 02bc      	.DW  _0x0*2
                 
00021d 0001      	.DW  0x01
00021e 0820      	.DW  _Code_tay_cam1
00021f 0298      	.DW  _0x2A*2
                 
000220 0001      	.DW  0x01
000221 0821      	.DW  _Code_tay_cam2
000222 029a      	.DW  _0x2B*2
                 
000223 0001      	.DW  0x01
000224 0822      	.DW  _Code_tay_cam3
000225 029c      	.DW  _0x2C*2
                 
000226 0001      	.DW  0x01
000227 0823      	.DW  _Code_tay_cam4
000228 029e      	.DW  _0x2D*2
                 
000229 0001      	.DW  0x01
00022a 0506      	.DW  _0xCD
00022b 02c1      	.DW  _0x0*2+5
                 
00022c 0011      	.DW  0x11
00022d 0507      	.DW  _0xCD+1
00022e 02c2      	.DW  _0x0*2+6
                 
00022f 0011      	.DW  0x11
000230 0518      	.DW  _0xCD+18
000231 02d3      	.DW  _0x0*2+23
                 
000232 0011      	.DW  0x11
000233 0529      	.DW  _0xCD+35
000234 02e4      	.DW  _0x0*2+40
                 
000235 0011      	.DW  0x11
000236 053a      	.DW  _0xCD+52
000237 02f5      	.DW  _0x0*2+57
                 
000238 000a      	.DW  0x0A
000239 084b      	.DW  _key
00023a 02a0      	.DW  _0xCE*2
                 
00023b 0007      	.DW  0x07
00023c 054b      	.DW  _0xCF
00023d 0306      	.DW  _0x0*2+74
                 
00023e 0007      	.DW  0x07
00023f 0552      	.DW  _0xCF+7
000240 030d      	.DW  _0x0*2+81
                 
000241 0008      	.DW  0x08
000242 0559      	.DW  _0xCF+14
000243 0314      	.DW  _0x0*2+88
                 
000244 0008      	.DW  0x08
000245 0561      	.DW  _0xCF+22
000246 031c      	.DW  _0x0*2+96
                 
000247 0003      	.DW  0x03
000248 0569      	.DW  _0xCF+30
000249 0324      	.DW  _0x0*2+104
                 
00024a 0003      	.DW  0x03
00024b 056c      	.DW  _0xCF+33
00024c 0327      	.DW  _0x0*2+107
                 
00024d 0003      	.DW  0x03
00024e 056f      	.DW  _0xD0
00024f 032a      	.DW  _0x0*2+110
                 
000250 0003      	.DW  0x03
000251 0572      	.DW  _0xD0+3
000252 032d      	.DW  _0x0*2+113
                 
000253 0003      	.DW  0x03
000254 0575      	.DW  _0xD0+6
000255 0330      	.DW  _0x0*2+116
                 
000256 0008      	.DW  0x08
000257 0578      	.DW  _0xD1
000258 0333      	.DW  _0x0*2+119
                 
000259 0005      	.DW  0x05
00025a 0580      	.DW  _0xD1+8
00025b 033b      	.DW  _0x0*2+127
                 
00025c 0003      	.DW  0x03
00025d 0585      	.DW  _0xD1+13
00025e 0340      	.DW  _0x0*2+132
                 
00025f 000f      	.DW  0x0F
000260 0588      	.DW  _0xD1+16
000261 0343      	.DW  _0x0*2+135
                 
000262 0003      	.DW  0x03
000263 0597      	.DW  _0xD1+31
000264 0340      	.DW  _0x0*2+132
                 
000265 0009      	.DW  0x09
000266 059a      	.DW  _0xD1+34
000267 0352      	.DW  _0x0*2+150
                 
000268 0011      	.DW  0x11
000269 05a3      	.DW  _0xD1+43
00026a 035b      	.DW  _0x0*2+159
                 
00026b 000e      	.DW  0x0E
00026c 05b4      	.DW  _0xD1+60
00026d 036c      	.DW  _0x0*2+176
                 
00026e 0003      	.DW  0x03
00026f 05c2      	.DW  _0xD1+74
000270 0340      	.DW  _0x0*2+132
                 
000271 002b      	.DW  0x2B
000272 05c5      	.DW  _0xD1+77
000273 037a      	.DW  _0x0*2+190
                 
000274 0003      	.DW  0x03
000275 05f0      	.DW  _0xD1+120
000276 0340      	.DW  _0x0*2+132
                 
000277 000c      	.DW  0x0C
000278 05f3      	.DW  _0xD8
000279 03a5      	.DW  _0x0*2+233
                 
00027a 0003      	.DW  0x03
00027b 05ff      	.DW  _0xD8+12
00027c 033d      	.DW  _0x0*2+129
                 
00027d 0003      	.DW  0x03
00027e 0602      	.DW  _0xD8+15
00027f 0340      	.DW  _0x0*2+132
                 
000280 002c      	.DW  0x2C
000281 0605      	.DW  _0xD8+18
000282 03b1      	.DW  _0x0*2+245
                 
000283 0003      	.DW  0x03
000284 0631      	.DW  _0xD8+62
000285 033d      	.DW  _0x0*2+129
                 
000286 0003      	.DW  0x03
000287 0634      	.DW  _0xD8+65
000288 0340      	.DW  _0x0*2+132
                 
000289 0009      	.DW  0x09
00028a 0637      	.DW  _0xD8+68
00028b 03dd      	.DW  _0x0*2+289
                 
00028c 0009      	.DW  0x09
00028d 0640      	.DW  _0xD8+77
00028e 03e6      	.DW  _0x0*2+298
                 
00028f 0009      	.DW  0x09
000290 0649      	.DW  _0xD8+86
000291 03ef      	.DW  _0x0*2+307
                 
000292 0003      	.DW  0x03
000293 0652      	.DW  _0xD8+95
000294 033d      	.DW  _0x0*2+129
                 
000295 000e      	.DW  0x0E
000296 0655      	.DW  _0xD8+98
000297 03f8      	.DW  _0x0*2+316
                 
000298 0003      	.DW  0x03
000299 0663      	.DW  _0xD8+112
00029a 033d      	.DW  _0x0*2+129
                 
00029b 0003      	.DW  0x03
00029c 0666      	.DW  _0xD8+115
00029d 0406      	.DW  _0x0*2+330
                 
00029e 0010      	.DW  0x10
00029f 0669      	.DW  _0xD8+118
0002a0 0409      	.DW  _0x0*2+333
                 
0002a1 0003      	.DW  0x03
0002a2 0679      	.DW  _0xD8+134
0002a3 0340      	.DW  _0x0*2+132
                 
0002a4 0001      	.DW  0x01
0002a5 0855      	.DW  __seed_G101
0002a6 041c      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
0002a7 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0002a8 94f8      	CLI
0002a9 27ee      	CLR  R30
0002aa bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002ab e0f1      	LDI  R31,1
0002ac bff5      	OUT  MCUCR,R31
0002ad bfe5      	OUT  MCUCR,R30
0002ae 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0002b0 e08d      	LDI  R24,(14-2)+1
0002b1 e0a2      	LDI  R26,2
0002b2 27bb      	CLR  R27
                 __CLEAR_REG:
0002b3 93ed      	ST   X+,R30
0002b4 958a      	DEC  R24
0002b5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002b6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002b7 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002b8 e0a0      	LDI  R26,LOW(__SRAM_START)
0002b9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0002ba 93ed      	ST   X+,R30
0002bb 9701      	SBIW R24,1
0002bc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002bd e2e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002be e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002bf 9185      	LPM  R24,Z+
0002c0 9195      	LPM  R25,Z+
0002c1 9700      	SBIW R24,0
0002c2 f061      	BREQ __GLOBAL_INI_END
0002c3 91a5      	LPM  R26,Z+
0002c4 91b5      	LPM  R27,Z+
0002c5 9005      	LPM  R0,Z+
0002c6 9015      	LPM  R1,Z+
0002c7 01bf      	MOVW R22,R30
0002c8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002c9 9005      	LPM  R0,Z+
0002ca 920d      	ST   X+,R0
0002cb 9701      	SBIW R24,1
0002cc f7e1      	BRNE __GLOBAL_INI_LOOP
0002cd 01fb      	MOVW R30,R22
0002ce cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0002cf bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002d0 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002d1 bfed      	OUT  SPL,R30
0002d2 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002d3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002d4 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002d5 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002d6 940c 063b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;// Graphic Display functions
                 ;#include <glcd.h>
                 ;// Font used for displaying text
                 ;// on the graphic display
                 ;#include <font5x7.h>
                 ;
                 ;// Declare your global variables here
                 ;#define menu PINC.3
                 ;#define back PINC.2
                 ;#define enter PINC.0
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;char buff[260];
                 ;int i = 0, time_flow = 0, time_s = 0;
                 ;
                 ;void del_string(unsigned char *s) {
                 ; 0000 0028 void del_string(unsigned char *s) {
                 
                 	.CSEG
                 _del_string:
                 ; .FSTART _del_string
                 ; 0000 0029     while (*s) {
0002d8 93ba      	ST   -Y,R27
0002d9 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x3:
0002da 81a8      	LD   R26,Y
0002db 81b9      	LDD  R27,Y+1
0002dc 91ec      	LD   R30,X
0002dd 30e0      	CPI  R30,0
0002de f041      	BREQ _0x5
                 ; 0000 002A         *s = '\0';
0002df e0e0      	LDI  R30,LOW(0)
0002e0 93ec      	ST   X,R30
                 ; 0000 002B         s++;
0002e1 81e8      	LD   R30,Y
0002e2 81f9      	LDD  R31,Y+1
0002e3 9631      	ADIW R30,1
0002e4 83e8      	ST   Y,R30
0002e5 83f9      	STD  Y+1,R31
                 ; 0000 002C     }
0002e6 cff3      	RJMP _0x3
                 _0x5:
                 ; 0000 002D     i = 0;
0002e7 2488      	CLR  R8
0002e8 2499      	CLR  R9
                 ; 0000 002E }
0002e9 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0000 0034 interrupt [19] void usart0_rx_isr(void) {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0002eb 93ea      	ST   -Y,R30
0002ec 93fa      	ST   -Y,R31
0002ed b7ef      	IN   R30,SREG
0002ee 93ea      	ST   -Y,R30
                 ; 0000 0035     char status,data;
                 ; 0000 0036     status=UCSR0A;
0002ef 931a      	ST   -Y,R17
0002f0 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0002f1 b11b      	IN   R17,11
                 ; 0000 0037     data=UDR0;
0002f2 b10c      	IN   R16,12
                 ; 0000 0038     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
0002f3 2fe1      	MOV  R30,R17
0002f4 71ec      	ANDI R30,LOW(0x1C)
0002f5 f489      	BRNE _0x6
                 ; 0000 0039         rx_buffer0[rx_wr_index0++]=data;
0002f6 2de5      	MOV  R30,R5
0002f7 9453      	INC  R5
0002f8 e0f0      	LDI  R31,0
0002f9 56e7      	SUBI R30,LOW(-_rx_buffer0)
0002fa 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0002fb 8300      	ST   Z,R16
                 ; 0000 003A #if RX_BUFFER_SIZE0 == 256
                 ; 0000 003B         // special case for receiver buffer size=256
                 ; 0000 003C         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 003D #else
                 ; 0000 003E         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0002fc e4e0      	LDI  R30,LOW(64)
0002fd 15e5      	CP   R30,R5
0002fe f409      	BRNE _0x7
0002ff 2455      	CLR  R5
                 ; 0000 003F         if (++rx_counter0 == RX_BUFFER_SIZE0) {
                 _0x7:
000300 9473      	INC  R7
000301 e4e0      	LDI  R30,LOW(64)
000302 15e7      	CP   R30,R7
000303 f419      	BRNE _0x8
                 ; 0000 0040             rx_counter0=0;
000304 2477      	CLR  R7
                 ; 0000 0041             rx_buffer_overflow0=1;
000305 9468      	SET
000306 f820      	BLD  R2,0
                 ; 0000 0042         }
                 ; 0000 0043 #endif
                 ; 0000 0044     }
                 _0x8:
                 ; 0000 0045     buff[i] = data;
                 _0x6:
000307 01f4      	MOVW R30,R8
000308 52e7      	SUBI R30,LOW(-_buff)
000309 4ff9      	SBCI R31,HIGH(-_buff)
00030a 8300      	ST   Z,R16
                 ; 0000 0046     i++;
00030b 01f4      	MOVW R30,R8
00030c 9631      	ADIW R30,1
00030d 014f      	MOVW R8,R30
                 ; 0000 0047 }
00030e 9109      	LD   R16,Y+
00030f 9119      	LD   R17,Y+
000310 c037      	RJMP _0xE9
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0000 004D char getchar(void) {
                 ; 0000 004E     char data;
                 ; 0000 004F     while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0050     data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0051 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0052     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0053 #endif
                 ; 0000 0054 #asm("cli")
                 ; 0000 0055     --rx_counter0;
                 ; 0000 0056 #asm("sei")
                 ; 0000 0057     return data;
                 ; 0000 0058 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void) {
                 ; 0000 006D interrupt [21] void usart0_tx_isr(void) {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000311 93aa      	ST   -Y,R26
000312 93ea      	ST   -Y,R30
000313 93fa      	ST   -Y,R31
000314 b7ef      	IN   R30,SREG
000315 93ea      	ST   -Y,R30
                 ; 0000 006E     if (tx_counter0) {
000316 91e0 081e 	LDS  R30,_tx_counter0
000318 30e0      	CPI  R30,0
000319 f0a9      	BREQ _0xD
                 ; 0000 006F         --tx_counter0;
00031a 50e1      	SUBI R30,LOW(1)
00031b 93e0 081e 	STS  _tx_counter0,R30
                 ; 0000 0070         UDR0=tx_buffer0[tx_rd_index0++];
00031d 91e0 081d 	LDS  R30,_tx_rd_index0
00031f 5fef      	SUBI R30,-LOW(1)
000320 93e0 081d 	STS  _tx_rd_index0,R30
000322 50e1      	SUBI R30,LOW(1)
000323 e0f0      	LDI  R31,0
000324 52e3      	SUBI R30,LOW(-_tx_buffer0)
000325 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000326 81e0      	LD   R30,Z
000327 b9ec      	OUT  0xC,R30
                 ; 0000 0071 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0072         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000328 91a0 081d 	LDS  R26,_tx_rd_index0
00032a 34a0      	CPI  R26,LOW(0x40)
00032b f419      	BRNE _0xE
00032c e0e0      	LDI  R30,LOW(0)
00032d 93e0 081d 	STS  _tx_rd_index0,R30
                 ; 0000 0073 #endif
                 ; 0000 0074     }
                 _0xE:
                 ; 0000 0075 }
                 _0xD:
00032f 91e9      	LD   R30,Y+
000330 bfef      	OUT  SREG,R30
000331 91f9      	LD   R31,Y+
000332 91e9      	LD   R30,Y+
000333 91a9      	LD   R26,Y+
000334 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0077 interrupt [17] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000335 93ea      	ST   -Y,R30
000336 93fa      	ST   -Y,R31
000337 b7ef      	IN   R30,SREG
000338 93ea      	ST   -Y,R30
                 ; 0000 0078     //0.02 ms => 50k = 1s.
                 ; 0000 0079     TCNT0=0x9C;
000339 e9ec      	LDI  R30,LOW(156)
00033a bfe2      	OUT  0x32,R30
                 ; 0000 007A     // Place your code here
                 ; 0000 007B     time_flow++;
00033b 01f5      	MOVW R30,R10
00033c 9631      	ADIW R30,1
00033d 015f      	MOVW R10,R30
                 ; 0000 007C 
                 ; 0000 007D     if (time_flow == 10000) {
00033e e1e0      	LDI  R30,LOW(10000)
00033f e2f7      	LDI  R31,HIGH(10000)
000340 15ea      	CP   R30,R10
000341 05fb      	CPC  R31,R11
000342 f429      	BRNE _0xF
                 ; 0000 007E         time_s++;
000343 01f6      	MOVW R30,R12
000344 9631      	ADIW R30,1
000345 016f      	MOVW R12,R30
                 ; 0000 007F         time_flow = 0;
000346 24aa      	CLR  R10
000347 24bb      	CLR  R11
                 ; 0000 0080     }
                 ; 0000 0081 }
                 _0xF:
                 _0xE9:
000348 91e9      	LD   R30,Y+
000349 bfef      	OUT  SREG,R30
00034a 91f9      	LD   R31,Y+
00034b 91e9      	LD   R30,Y+
00034c 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c) {
                 ; 0000 0087 void putchar(char c) {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0088     while (tx_counter0 == TX_BUFFER_SIZE0);
00034d 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x10:
00034e 91a0 081e 	LDS  R26,_tx_counter0
000350 34a0      	CPI  R26,LOW(0x40)
000351 f3e1      	BREQ _0x10
                 ; 0000 0089 #asm("cli")
000352 94f8      	cli
                 ; 0000 008A     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
000353 91e0 081e 	LDS  R30,_tx_counter0
000355 30e0      	CPI  R30,0
000356 f411      	BRNE _0x14
000357 995d      	SBIC 0xB,5
000358 c011      	RJMP _0x13
                 _0x14:
                 ; 0000 008B         tx_buffer0[tx_wr_index0++]=c;
000359 2de6      	MOV  R30,R6
00035a 9463      	INC  R6
00035b e0f0      	LDI  R31,0
00035c 52e3      	SUBI R30,LOW(-_tx_buffer0)
00035d 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
00035e 81a8      	LD   R26,Y
00035f 83a0      	STD  Z+0,R26
                 ; 0000 008C #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008D         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000360 e4e0      	LDI  R30,LOW(64)
000361 15e6      	CP   R30,R6
000362 f409      	BRNE _0x16
000363 2466      	CLR  R6
                 ; 0000 008E #endif
                 ; 0000 008F         ++tx_counter0;
                 _0x16:
000364 91e0 081e 	LDS  R30,_tx_counter0
000366 5fef      	SUBI R30,-LOW(1)
000367 93e0 081e 	STS  _tx_counter0,R30
                 ; 0000 0090     } else
000369 c002      	RJMP _0x17
                 _0x13:
                 ; 0000 0091         UDR0=c;
00036a 81e8      	LD   R30,Y
00036b b9ec      	OUT  0xC,R30
                 ; 0000 0092 #asm("sei")
                 _0x17:
00036c 9478      	sei
                 ; 0000 0093 }
00036d 940c 08ab 	JMP  _0x212000C
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void put_string (unsigned char *s) {
                 ; 0000 009A void put_string (unsigned char *s) {
                 _put_string:
                 ; .FSTART _put_string
                 ; 0000 009B     while(*s) {
00036f 93ba      	ST   -Y,R27
000370 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x18:
000371 81a8      	LD   R26,Y
000372 81b9      	LDD  R27,Y+1
000373 91ec      	LD   R30,X
000374 30e0      	CPI  R30,0
000375 f061      	BREQ _0x1A
                 ; 0000 009C         putchar(*s);
000376 91ac      	LD   R26,X
000377 dfd5      	RCALL _putchar
                 ; 0000 009D         delay_ms(50);
000378 e3a2      	LDI  R26,LOW(50)
000379 e0b0      	LDI  R27,0
00037a 940e 110f 	CALL _delay_ms
                 ; 0000 009E         s++;
00037c 81e8      	LD   R30,Y
00037d 81f9      	LDD  R31,Y+1
00037e 9631      	ADIW R30,1
00037f 83e8      	ST   Y,R30
000380 83f9      	STD  Y+1,R31
                 ; 0000 009F     }
000381 cfef      	RJMP _0x18
                 _0x1A:
                 ; 0000 00A0 }
000382 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;void refresh(int time_ms) {
                 ; 0000 00A2 void refresh(int time_ms) {
                 _refresh:
                 ; .FSTART _refresh
                 ; 0000 00A3 
                 ; 0000 00A4     delay_ms(time_ms);
000384 940e 0f60 	CALL SUBOPT_0x0
                 ;	time_ms -> Y+0
000386 940e 110f 	CALL _delay_ms
                 ; 0000 00A5    // glcd_clear();
                 ; 0000 00A6     //glcd_moveto(0,0);
                 ; 0000 00A7    // glcd_outtext(buff);
                 ; 0000 00A8     del_string(buff);
000388 eda9      	LDI  R26,LOW(_buff)
000389 e0b6      	LDI  R27,HIGH(_buff)
00038a df4d      	RCALL _del_string
                 ; 0000 00A9     i = 0;
00038b 2488      	CLR  R8
00038c 2499      	CLR  R9
                 ; 0000 00AA 
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD }
00038d 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;void wait_until(unsigned char *keyword, int time_out_s) {
                 ; 0000 00AF void wait_until(unsigned char *keyword, int time_out_s) {
                 _wait_until:
                 ; .FSTART _wait_until
                 ; 0000 00B0     /*     deu biet cai temp2 de lam gi nhung khong co thi no khong chay trong 1 so truong hop @@
                 ; 0000 00B1         Vi du nhap vao "Hell" thi no se tach thua ra them 2 char. Co the do vi tri o nho. Cha biet @@*/
                 ; 0000 00B2     char temp[20], temp2[20];
                 ; 0000 00B3     int i = 0, time_start, time_temp;
                 ; 0000 00B4 
                 ; 0000 00B5     del_string(temp);
00038f 93ba      	ST   -Y,R27
000390 93aa      	ST   -Y,R26
000391 97a8      	SBIW R28,40
000392 940e 116c 	CALL __SAVELOCR6
                 ;	*keyword -> Y+48
                 ;	time_out_s -> Y+46
                 ;	temp -> Y+26
                 ;	temp2 -> Y+6
                 ;	i -> R16,R17
                 ;	time_start -> R18,R19
                 ;	time_temp -> R20,R21
                +
000394 e000     +LDI R16 , LOW ( 0 )
000395 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000396 01de      	MOVW R26,R28
000397 965a      	ADIW R26,26
000398 df3f      	RCALL _del_string
                 ; 0000 00B6 
                 ; 0000 00B7     while (*keyword) {
                 _0x1B:
000399 a9a8      	LDD  R26,Y+48
00039a a9b9      	LDD  R27,Y+48+1
00039b 91ec      	LD   R30,X
00039c 30e0      	CPI  R30,0
00039d f101      	BREQ _0x1D
                 ; 0000 00B8         temp[i] = *keyword;
00039e 01f8      	MOVW R30,R16
00039f 01de      	MOVW R26,R28
0003a0 965a      	ADIW R26,26
0003a1 0fea      	ADD  R30,R26
0003a2 1ffb      	ADC  R31,R27
0003a3 010f      	MOVW R0,R30
0003a4 a9a8      	LDD  R26,Y+48
0003a5 a9b9      	LDD  R27,Y+48+1
0003a6 91ec      	LD   R30,X
0003a7 01d0      	MOVW R26,R0
0003a8 93ec      	ST   X,R30
                 ; 0000 00B9         temp2[i] = temp[i];
0003a9 01f8      	MOVW R30,R16
0003aa 01de      	MOVW R26,R28
0003ab 9616      	ADIW R26,6
0003ac 0fea      	ADD  R30,R26
0003ad 1ffb      	ADC  R31,R27
0003ae 010f      	MOVW R0,R30
0003af 01de      	MOVW R26,R28
0003b0 965a      	ADIW R26,26
0003b1 0fa0      	ADD  R26,R16
0003b2 1fb1      	ADC  R27,R17
0003b3 91ec      	LD   R30,X
0003b4 01d0      	MOVW R26,R0
0003b5 93ec      	ST   X,R30
                 ; 0000 00BA         keyword++;
0003b6 a9e8      	LDD  R30,Y+48
0003b7 a9f9      	LDD  R31,Y+48+1
0003b8 9631      	ADIW R30,1
0003b9 abe8      	STD  Y+48,R30
0003ba abf9      	STD  Y+48+1,R31
                 ; 0000 00BB         i++;
                +
0003bb 5f0f     +SUBI R16 , LOW ( - 1 )
0003bc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00BC     }
0003bd cfdb      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00BD 
                 ; 0000 00BE     time_start = time_s;
0003be 0196      	MOVW R18,R12
                 ; 0000 00BF 
                 ; 0000 00C0     while (1) {
                 _0x1E:
                 ; 0000 00C1         if (time_s < time_start) {
                +
0003bf 16c2     +CP R12 , R18
0003c0 06d3     +CPC R13 , R19
                 	__CPWRR 12,13,18,19
0003c1 f444      	BRGE _0x21
                 ; 0000 00C2             time_temp = time_s + 60;
0003c2 01f6      	MOVW R30,R12
0003c3 96fc      	ADIW R30,60
0003c4 01af      	MOVW R20,R30
                 ; 0000 00C3             if (time_temp - time_start > time_out_s) {
0003c5 01da      	MOVW R26,R20
0003c6 940e 0f65 	CALL SUBOPT_0x1
0003c8 f0f4      	BRLT _0x20
                 ; 0000 00C4             //    glcd_outtext("Timed out\r\n");
                 ; 0000 00C5                 break;
                 ; 0000 00C6             }
                 ; 0000 00C7         } else {
0003c9 c004      	RJMP _0x23
                 _0x21:
                 ; 0000 00C8             if (time_s - time_start > time_out_s) {
0003ca 01d6      	MOVW R26,R12
0003cb 940e 0f65 	CALL SUBOPT_0x1
0003cd f0cc      	BRLT _0x20
                 ; 0000 00C9             //    glcd_outtext("Timed out\r\n");
                 ; 0000 00CA                 break;
                 ; 0000 00CB             }
                 ; 0000 00CC         }
                 _0x23:
                 ; 0000 00CD 
                 ; 0000 00CE         if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
0003ce 940e 0f6c 	CALL SUBOPT_0x2
0003d0 01de      	MOVW R26,R28
0003d1 965c      	ADIW R26,28
0003d2 940e 0781 	CALL _strstr
0003d4 9730      	SBIW R30,0
0003d5 f441      	BRNE _0x26
0003d6 940e 0f6c 	CALL SUBOPT_0x2
0003d8 01de      	MOVW R26,R28
0003d9 9618      	ADIW R26,8
0003da 940e 0781 	CALL _strstr
0003dc 9730      	SBIW R30,0
0003dd f009      	BREQ _0x25
                 _0x26:
                 ; 0000 00CF             break;
0003de c008      	RJMP _0x20
                 ; 0000 00D0         }
                 ; 0000 00D1         if (strstr(buff, "ERROR")) {
                 _0x25:
0003df 940e 0f6c 	CALL SUBOPT_0x2
                +
0003e1 e0a0     +LDI R26 , LOW ( _0x29 + ( 0 ) )
0003e2 e0b5     +LDI R27 , HIGH ( _0x29 + ( 0 ) )
                 	__POINTW2MN _0x29,0
0003e3 940e 0781 	CALL _strstr
0003e5 9730      	SBIW R30,0
0003e6 f2c1      	BREQ _0x1E
                 ; 0000 00D2          //   glcd_outtext("Error found, attempting to continue..\r\n");
                 ; 0000 00D3           /*  delay_ms(3000);
                 ; 0000 00D4             glcd_clear();
                 ; 0000 00D5             glcd_moveto(0,0); */
                 ; 0000 00D6             break;
                 ; 0000 00D7             //nen lam them ve cai nay nua
                 ; 0000 00D8         }
                 ; 0000 00D9     }
                 _0x20:
                 ; 0000 00DA }
0003e7 940e 1173 	CALL __LOADLOCR6
0003e9 96e2      	ADIW R28,50
0003ea 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x29:
000500           	.BYTE 0x6
                 ;#define CE PORTA.3
                 ;#define CSN PORTA.2
                 ;#define SCK PORTA.4
                 ;#define MOSI PORTA.1
                 ;#define MISO PINA.5
                 ;#define IRQ PINA.0
                 ;
                 ;unsigned char P_Add, Code_tay_cam1 = 0xA1, Code_tay_cam2 = 0xA2, Code_tay_cam3 = 0xA3, Code_tay_cam4 = 0xA4;
                 ;#include "nrf_code.c"
                 ;#define _BV(x) (1<<(x))
                 ;#define RX_DR       6
                 ;#define TX_DS       5
                 ;#define MAX_RT      4
                 ;#define STATUS      0x07
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    float a;
                 ;    float b;
                 ;    float c;
                 ;    float d;
                 ;}data;
                 ;
                 ;
                 ;typedef struct
                 ;{
                 ;    int flag;
                 ;    int light;
                 ;    int humi;
                 ;    int temp;
                 ;    int sm;
                 ;}station_info;
                 ;
                 ;typedef struct
                 ;{
                 ;    int analog_l;
                 ;    int analog_r;
                 ;    int digital_l;
                 ;    int digital_r;
                 ;}tay_cam_info;
                 ;
                 ;station_info station_receive;
                 ;tay_cam_info tay_cam_receive;
                 ;
                 ;data data_receive;
                 ;unsigned char data_receive_2;
                 ;unsigned char result;
                 ;
                 ;
                 ;void config();
                 ;
                 ;
                 ;//-----------------------------TX Mode -----------------------------------------------//
                 ;unsigned char SPI_RW_TX(unsigned char Buff);                                       //Function used for text moving
                 ;void RF_Init_TX();                                                                 //Function allow to Initialize RF dev ...
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value  ...
                 ;void RF_Write_Address_TX(unsigned char Address);                                   //Function to write TX address for pi ...
                 ;void RF_Write_Address_2_TX(unsigned char Address);                                 //Function to write TX address for pi ...
                 ;void RX_Mode_Active_TX();                                                          //Function to put nRF in RX mode
                 ;void TX_Mode_Active_TX();                                                          //Function to put nRF in TX mode
                 ;void RF_Config_TX();                                                               //Function to config the nRF
                 ;void RF_TX_Send_TX(data send);                                                     //Function to send data Value to RX A ...
                 ;void RF_TX_Send_2_TX(data send);                                                   //Function to send data Value to RX a ...
                 ;
                 ;
                 ;//---------------------------------RX Mode----------------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff);                                       //Function used for text moving
                 ;unsigned char SPI_Read_RX(void);
                 ;void RF_Init_RX();                                                                 //Function allow to Initialize RF dev ...
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a regi ...
                 ;void RF_Command_RX(unsigned char command);                                         //Function to write a command
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;void RX_Mode_RX();                                                          //Function to put nRF in RX mode
                 ;void RF_Config_RX();                                                               //Function to config the nRF
                 ;void RF_Read_RX();                                                     //Function to read the data from RX FIFO
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value);
                 ;void RF_Read_RX_2();
                 ;
                 ;
                 ;
                 ;
                 ;void config()
                 ; 0000 00E3 {
                 
                 	.CSEG
                 _config:
                 ; .FSTART _config
                 ;RF_Write_RX(0x07,0b01111110);  // Clear flag
0003eb 940e 0f71 	CALL SUBOPT_0x3
                 ;RF_Command_RX(0b11100010);     //Flush RX
                 ;delay_us(10);
                +
0003ed e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0003ee 958a     +DEC R24
0003ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;RF_Write_TX(0x00,0b00011111);     //CONFIG 0x00
0003f0 e0e0      	LDI  R30,LOW(0)
0003f1 93ea      	ST   -Y,R30
0003f2 e1af      	LDI  R26,LOW(31)
0003f3 d024      	RCALL _RF_Write_TX
                 ;delay_ms(2);
0003f4 e0a2      	LDI  R26,LOW(2)
0003f5 e0b0      	LDI  R27,0
0003f6 940e 110f 	CALL _delay_ms
                 ;RF_Write_TX(0x07,0b01111110);
0003f8 e0e7      	LDI  R30,LOW(7)
0003f9 93ea      	ST   -Y,R30
0003fa e7ae      	LDI  R26,LOW(126)
0003fb d01c      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x1D, 0b00000100);
0003fc e1ed      	LDI  R30,LOW(29)
0003fd 93ea      	ST   -Y,R30
0003fe e0a4      	LDI  R26,LOW(4)
0003ff d018      	RCALL _RF_Write_TX
                 ;RF_Write_TX(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
000400 e0e5      	LDI  R30,LOW(5)
000401 93ea      	ST   -Y,R30
000402 e0a2      	LDI  R26,LOW(2)
000403 d014      	RCALL _RF_Write_TX
                 ;}
000404 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;unsigned char SPI_RW_TX(unsigned char Buff){
                 _SPI_RW_TX:
                 ; .FSTART _SPI_RW_TX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000405 93aa      	ST   -Y,R26
000406 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000407 e010      	LDI  R17,LOW(0)
                 _0x2F:
000408 3018      	CPI  R17,8
000409 f450      	BRSH _0x30
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00040a 81e9      	LDD  R30,Y+1
00040b 78e0      	ANDI R30,LOW(0x80)
00040c f411      	BRNE _0x31
00040d 98d9      	CBI  0x1B,1
00040e c001      	RJMP _0x32
                 _0x31:
00040f 9ad9      	SBI  0x1B,1
                 _0x32:
                 ;        delay_us(5);
000410 940e 0f79 	CALL SUBOPT_0x4
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
000412 5f1f      	SUBI R17,-1
000413 cff4      	RJMP _0x2F
                 _0x30:
                 ;    return(Buff);                     // return read uchar
000414 81e9      	LDD  R30,Y+1
000415 8118      	LDD  R17,Y+0
000416 940c 0818 	JMP  _0x212000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_TX()                                                    //Function allow to Initialize RF device
                 ;{
                 ;    CE=1;
                 ;    delay_us(700);
                 ;    CE=0;
                 ;    CSN=1;
                 ;}
                 ;
                 ;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register  ...
                 ;{
                 _RF_Write_TX:
                 ; .FSTART _RF_Write_TX
                 ;
                 ;    CSN=0;
000418 940e 0f8b 	CALL SUBOPT_0x5
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    result = SPI_RW_TX(0b00100000|Reg_Add);
00041a dfea      	RCALL _SPI_RW_TX
00041b 93e0 0848 	STS  _result,R30
                 ;    SPI_RW_TX(Value);
00041d 81a8      	LD   R26,Y
00041e dfe6      	RCALL _SPI_RW_TX
                 ;    CSN=1;
00041f 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;	return result;
000421 91e0 0848 	LDS  R30,_result
000423 940c 0818 	JMP  _0x212000D
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Write_Address_TX(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(Address);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Write_Address_TX_2(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 ;    CSN=0;
                 ;	Address -> Y+0
                 ;    RF_Write_TX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x0A);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_TX(0b00100000|0x10);
                 ;    SPI_RW_TX(Address);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;    SPI_RW_TX(0x02);
                 ;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Mode_TX()                                             //Function to put nRF in TX mode
                 ;{
                 ;    CE=0;
                 ;    RF_Write_TX(0x00,0b00011110);     //CONFIG 0x00
                 ;}
                 ;
                 ;void RF_Config_TX()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_TX_2()                                                  //Function to config the nRF
                 ;{
                 ;
                 ;RF_Write_TX(0x1C,0b00000001);
                 ;RF_Write_Address_TX_2(P_Add);
                 ;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Command_TX(unsigned char command)                            //Function to write a command
                 ;{
                 ;    CSN=0;
                 ;	command -> Y+0
                 ;    SPI_RW_TX(command);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;}
                 ;
                 ;void RF_Send_TX(station_info send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.light);
                 ;  SPI_RW_TX(send.humi);
                 ;  SPI_RW_TX(send.temp);
                 ;  SPI_RW_TX(send.sm);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;void RF_Send_TX_2(data send)     //Function to send data Value to a specify RX Address
                 ;{
                 ;
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;	send -> Y+0
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b11100001);
                 ;  CSN=1;
                 ;  delay_us(10);
                 ;  CSN=0;
                 ;  SPI_RW_TX(0b10100000);
                 ;  SPI_RW_TX(send.flag);
                 ;  SPI_RW_TX(send.a);
                 ;  SPI_RW_TX(send.b);
                 ;  SPI_RW_TX(send.c);
                 ;  SPI_RW_TX(send.d);
                 ;  CSN=1;
                 ;  CE=1;
                 ;  delay_us(500);
                 ;  CE=0;
                 ;  RF_Write_TX(0x07,0b01111110);
                 ;  RF_Write_Address_TX_2(P_Add);
                 ;  RF_Command_TX(0b11100001);
                 ;
                 ;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
                 ;  tx_ok = status & 0b00010000;
                 ;  return tx_ok; */
                 ;}
                 ;
                 ;
                 ;
                 ;//--------------------------------------------RX function------------------------------------//
                 ;unsigned char SPI_RW_RX(unsigned char Buff)
                 ;{
                 _SPI_RW_RX:
                 ; .FSTART _SPI_RW_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000425 93aa      	ST   -Y,R26
000426 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
000427 e010      	LDI  R17,LOW(0)
                 _0x7C:
000428 3018      	CPI  R17,8
000429 f450      	BRSH _0x7D
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00042a 81e9      	LDD  R30,Y+1
00042b 78e0      	ANDI R30,LOW(0x80)
00042c f411      	BRNE _0x7E
00042d 98d9      	CBI  0x1B,1
00042e c001      	RJMP _0x7F
                 _0x7E:
00042f 9ad9      	SBI  0x1B,1
                 _0x7F:
                 ;        delay_us(5);
000430 940e 0f79 	CALL SUBOPT_0x4
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
                 ;        SCK = 1;                      // Set SCK high..
                 ;        delay_us(5);
                 ;        Buff |= MISO;                 // capture current MISO bit
                 ;        SCK = 0;                      // ..then set SCK low again
                 ;       }
000432 5f1f      	SUBI R17,-1
000433 cff4      	RJMP _0x7C
                 _0x7D:
                 ;    return(Buff);                     // return read uchar
000434 81e9      	LDD  R30,Y+1
000435 8118      	LDD  R17,Y+0
000436 940c 0818 	JMP  _0x212000D
                 ;}
                 ; .FEND
                 ;
                 ;unsigned char SPI_Read_RX(void)
                 ;{   unsigned char Buff=0;
                 _SPI_Read_RX:
                 ; .FSTART _SPI_Read_RX
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000438 931a      	ST   -Y,R17
000439 930a      	ST   -Y,R16
                 ;	Buff -> R17
                 ;	bit_ctr -> R16
00043a e010      	LDI  R17,0
00043b e000      	LDI  R16,LOW(0)
                 _0x85:
00043c 3008      	CPI  R16,8
00043d f478      	BRSH _0x86
                 ;       {
                 ;        delay_us(5);
                +
00043e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00043f 958a     +DEC R24
000440 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000441 0f11      	LSL  R17
                 ;        SCK = 1;                      // Set SCK high..
000442 9adc      	SBI  0x1B,4
                 ;        delay_us(5);
                +
000443 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000444 958a     +DEC R24
000445 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff |= MISO;                 // capture current MISO bit
000446 e0e0      	LDI  R30,0
000447 99cd      	SBIC 0x19,5
000448 e0e1      	LDI  R30,1
000449 2b1e      	OR   R17,R30
                 ;        SCK = 0;                      // ..then set SCK low again
00044a 98dc      	CBI  0x1B,4
                 ;       }
00044b 5f0f      	SUBI R16,-1
00044c cfef      	RJMP _0x85
                 _0x86:
                 ;    return(Buff);                     // return read uchar
00044d 2fe1      	MOV  R30,R17
00044e 9109      	LD   R16,Y+
00044f 9119      	LD   R17,Y+
000450 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init_RX()                                                    //Function allow to Initialize RF device
                 ;{
                 _RF_Init_RX:
                 ; .FSTART _RF_Init_RX
                 ;    CE=1;
000451 9adb      	SBI  0x1B,3
                 ;    delay_us(700);
                +
000452 e788     +LDI R24 , LOW ( 1400 )
000453 e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
000454 9701     +SBIW R24 , 1
000455 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
000456 98db      	CBI  0x1B,3
                 ;    CSN=1;
000457 9ada      	SBI  0x1B,2
                 ;}
000458 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write_RX:
                 ; .FSTART _RF_Write_RX
                 ;    CSN=0;
000459 940e 0f8b 	CALL SUBOPT_0x5
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
00045b 940e 0f96 	CALL SUBOPT_0x7
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
00045d 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;}
00045f 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write2_RX:
                 ; .FSTART _RF_Write2_RX
                 ;    CSN=0;
000461 940e 0f8b 	CALL SUBOPT_0x5
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
000463 940e 0f96 	CALL SUBOPT_0x7
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
000465 81a8      	LD   R26,Y
000466 940e 0f96 	CALL SUBOPT_0x7
                 ;    SPI_RW_RX(Value);
                 ;    SPI_RW_RX(Value);
000468 81a8      	LD   R26,Y
000469 940e 0f96 	CALL SUBOPT_0x7
                 ;    SPI_RW_RX(Value);
                 ;    CSN=1;
00046b 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;}
00046d 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write3_RX:
                 ; .FSTART _RF_Write3_RX
                 ;    CSN=0;
00046f 940e 0f8b 	CALL SUBOPT_0x5
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
                 ;    SPI_RW_RX(0b00100000|Reg_Add);
000471 940e 0f9b 	CALL SUBOPT_0x8
                 ;    SPI_RW_RX(Code_tay_cam2);
000473 940e 0f9b 	CALL SUBOPT_0x8
                 ;    SPI_RW_RX(Code_tay_cam2);
000475 940e 0f9b 	CALL SUBOPT_0x8
                 ;    SPI_RW_RX(Code_tay_cam2);
000477 940e 0f9b 	CALL SUBOPT_0x8
                 ;    SPI_RW_RX(Code_tay_cam2);
000479 940e 0f96 	CALL SUBOPT_0x7
                 ;    SPI_RW_RX(Value);
                 ;
                 ;
                 ;    CSN=1;
00047b 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;}
00047d 940c 0818 	JMP  _0x212000D
                 ; .FEND
                 ;
                 ;void RF_Command_RX(unsigned char command)                            //Function to write a command
                 ;{
                 _RF_Command_RX:
                 ; .FSTART _RF_Command_RX
                 ;    CSN=0;
00047f 93aa      	ST   -Y,R26
                 ;	command -> Y+0
000480 98da      	CBI  0x1B,2
                 ;    SPI_RW_RX(command);
000481 81a8      	LD   R26,Y
000482 dfa2      	RCALL _SPI_RW_RX
                 ;    CSN=1;
000483 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;}
000485 940c 08ab 	JMP  _0x212000C
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
                 ;{
                 _RF_Write_Address_RX:
                 ; .FSTART _RF_Write_Address_RX
                 ;    CSN=0;
000487 93aa      	ST   -Y,R26
                 ;	Address1 -> Y+3
                 ;	Address2 -> Y+2
                 ;	Address3 -> Y+1
                 ;	Address4 -> Y+0
000488 98da      	CBI  0x1B,2
                 ;    RF_Write_RX(0x03,0b00000011);
000489 e0e3      	LDI  R30,LOW(3)
00048a 93ea      	ST   -Y,R30
00048b e0a3      	LDI  R26,LOW(3)
00048c dfcc      	RCALL _RF_Write_RX
                 ;    CSN=1;
00048d 940e 0f91 	CALL SUBOPT_0x6
                 ;    delay_us(10);
                 ;    CSN=0;
00048f 98da      	CBI  0x1B,2
                 ;    RF_Write2_RX(0x0A, Address1);
000490 e0ea      	LDI  R30,LOW(10)
000491 93ea      	ST   -Y,R30
000492 81ac      	LDD  R26,Y+4
000493 dfcd      	RCALL _RF_Write2_RX
                 ;    RF_Write2_RX(0x10, Address1);
000494 e1e0      	LDI  R30,LOW(16)
000495 93ea      	ST   -Y,R30
000496 81ac      	LDD  R26,Y+4
000497 dfc9      	RCALL _RF_Write2_RX
                 ;
                 ;    RF_Write3_RX(0x0B, Address2);
000498 e0eb      	LDI  R30,LOW(11)
000499 93ea      	ST   -Y,R30
00049a 81ab      	LDD  R26,Y+3
00049b 940e 0fa0 	CALL SUBOPT_0x9
                 ;    RF_Write3_RX(0x10, Address2);
00049d 81ab      	LDD  R26,Y+3
00049e dfd0      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0C, Address3);
00049f e0ec      	LDI  R30,LOW(12)
0004a0 93ea      	ST   -Y,R30
0004a1 81aa      	LDD  R26,Y+2
0004a2 940e 0fa0 	CALL SUBOPT_0x9
                 ;    RF_Write3_RX(0x10, Address3);
0004a4 81aa      	LDD  R26,Y+2
0004a5 dfc9      	RCALL _RF_Write3_RX
                 ;
                 ;    RF_Write3_RX(0x0D, Address4);
0004a6 e0ed      	LDI  R30,LOW(13)
0004a7 93ea      	ST   -Y,R30
0004a8 81a9      	LDD  R26,Y+1
0004a9 940e 0fa0 	CALL SUBOPT_0x9
                 ;    RF_Write3_RX(0x10, Address4);
0004ab 81a9      	LDD  R26,Y+1
0004ac dfc2      	RCALL _RF_Write3_RX
                 ;
                 ;}
0004ad 940c 08c9 	JMP  _0x212000B
                 ; .FEND
                 ;
                 ;void RF_Write_Address_RX_2(unsigned char Address1){
                 ;    CSN=0;
                 ;	Address1 -> Y+0
                 ;    RF_Write_RX(0x03,0b00000011);
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;
                 ;    RF_Write2_RX(0x0A, Address1);
                 ;    RF_Write2_RX(0x10, Address1);
                 ;}
                 ;
                 ;
                 ;void RF_Mode_RX()                                             //Function to put nRF in RX mode
                 ;{
                 _RF_Mode_RX:
                 ; .FSTART _RF_Mode_RX
                 ;    RF_Write_RX(0x00,0b00011111);     //CONFIG 0x00
0004af e0e0      	LDI  R30,LOW(0)
0004b0 93ea      	ST   -Y,R30
0004b1 e1af      	LDI  R26,LOW(31)
0004b2 dfa6      	RCALL _RF_Write_RX
                 ;    CE=1;
0004b3 9adb      	SBI  0x1B,3
                 ;}
0004b4 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX()                                                  //Function to config the nRF
                 ;{
                 _RF_Config_RX:
                 ; .FSTART _RF_Config_RX
                 ;RF_Write_RX(0x1C,0b00001111);
0004b5 e1ec      	LDI  R30,LOW(28)
0004b6 940e 0fa5 	CALL SUBOPT_0xA
                 ;RF_Write_Address_RX(Code_tay_cam1, Code_tay_cam2, Code_tay_cam3, Code_tay_cam4);
0004b8 91e0 0820 	LDS  R30,_Code_tay_cam1
0004ba 93ea      	ST   -Y,R30
0004bb 91e0 0821 	LDS  R30,_Code_tay_cam2
0004bd 93ea      	ST   -Y,R30
0004be 91e0 0822 	LDS  R30,_Code_tay_cam3
0004c0 93ea      	ST   -Y,R30
0004c1 91a0 0823 	LDS  R26,_Code_tay_cam4
0004c3 dfc3      	RCALL _RF_Write_Address_RX
                 ;RF_Write_RX(0x02,0b00001111);     //EX_RXADDR 0x02    enable data pipe 0;
0004c4 e0e2      	LDI  R30,LOW(2)
0004c5 940e 0fa5 	CALL SUBOPT_0xA
                 ;RF_Write_RX(0x01,0b00001111);     //EN_AA 0x01        enable auto-acknowledgment
0004c7 e0e1      	LDI  R30,LOW(1)
0004c8 940e 0fa5 	CALL SUBOPT_0xA
                 ;}
0004ca 9508      	RET
                 ; .FEND
                 ;
                 ;void RF_Config_RX_2(){
                 ;    RF_Write_RX(0x1C,0b00001111);
                 ;    RF_Write_Address_RX_2(Code_tay_cam1);
                 ;    RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;    RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;}
                 ;
                 ;void RF_Config_RX_3(){
                 ;RF_Write_RX(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
                 ;RF_Write_Address_RX_2(Code_tay_cam1);
                 ;RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
                 ;RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
                 ;RF_Write_RX(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
                 ;}
                 ;
                 ;void RF_Read_RX()                                         //Function to read the data from RX FIFO
                 ;{
                 ;   CE=0;
                 ;   CSN=1;
                 ;   delay_us(10);
                 ;   CSN=0;
                 ;   SPI_RW_RX(0b01100001);
                 ;   delay_us(10);
                 ;   data_receive.flag = SPI_Read_RX();
                 ;   data_receive.a = SPI_Read_RX();
                 ;   data_receive.b = SPI_Read_RX();
                 ;   data_receive.c = SPI_Read_RX();
                 ;   data_receive.d = SPI_Read_RX();
                 ;   CSN=1;
                 ;   CE=1;
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_2(){
                 ;    CE=0;
                 ;    CSN=1;
                 ;    delay_us(10);
                 ;    CSN=0;
                 ;    SPI_RW_RX(0b01100001);
                 ;    delay_us(10);
                 ;    tay_cam_receive.analog_l = SPI_Read_RX();
                 ;    tay_cam_receive.analog_r = SPI_Read_RX();
                 ;    tay_cam_receive.digital_l = SPI_Read_RX();
                 ;    tay_cam_receive.digital_r = SPI_Read_RX();
                 ;    CSN=1;
                 ;    CE=1;
                 ;    RF_Write_RX(0x07,0b01111110);  // Clear flag
                 ;    RF_Command_RX(0b11100010);     //Flush RX
                 ;}
                 ;
                 ;void RF_Read_RX_3()                                         //Function to read the data from RX FIFO
                 ;{
                 _RF_Read_RX_3:
                 ; .FSTART _RF_Read_RX_3
                 ;   CE=0;
0004cb 98db      	CBI  0x1B,3
                 ;   CSN=1;
0004cc 940e 0f91 	CALL SUBOPT_0x6
                 ;   delay_us(10);
                 ;   CSN=0;
0004ce 98da      	CBI  0x1B,2
                 ;   SPI_RW_RX(0b01100001);
0004cf e6a1      	LDI  R26,LOW(97)
0004d0 df54      	RCALL _SPI_RW_RX
                 ;   delay_us(10);
                +
0004d1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0004d2 958a     +DEC R24
0004d3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;   station_receive.flag = SPI_Read_RX();
0004d4 df63      	RCALL _SPI_Read_RX
0004d5 e0f0      	LDI  R31,0
0004d6 93e0 0824 	STS  _station_receive,R30
0004d8 93f0 0825 	STS  _station_receive+1,R31
                 ;   station_receive.light = SPI_Read_RX();
0004da df5d      	RCALL _SPI_Read_RX
                +
0004db e2a6     +LDI R26 , LOW ( _station_receive + ( 2 ) )
0004dc e0b8     +LDI R27 , HIGH ( _station_receive + ( 2 ) )
                 	__POINTW2MN _station_receive,2
0004dd 940e 0fa9 	CALL SUBOPT_0xB
                 ;   station_receive.humi = SPI_Read_RX();
                +
0004df e2a8     +LDI R26 , LOW ( _station_receive + ( 4 ) )
0004e0 e0b8     +LDI R27 , HIGH ( _station_receive + ( 4 ) )
                 	__POINTW2MN _station_receive,4
0004e1 940e 0fa9 	CALL SUBOPT_0xB
                 ;   station_receive.temp = SPI_Read_RX();
                +
0004e3 e2aa     +LDI R26 , LOW ( _station_receive + ( 6 ) )
0004e4 e0b8     +LDI R27 , HIGH ( _station_receive + ( 6 ) )
                 	__POINTW2MN _station_receive,6
0004e5 940e 0fa9 	CALL SUBOPT_0xB
                 ;   station_receive.sm = SPI_Read_RX();
                +
0004e7 e2ac     +LDI R26 , LOW ( _station_receive + ( 8 ) )
0004e8 e0b8     +LDI R27 , HIGH ( _station_receive + ( 8 ) )
                 	__POINTW2MN _station_receive,8
0004e9 e0f0      	LDI  R31,0
0004ea 93ed      	ST   X+,R30
0004eb 93fc      	ST   X,R31
                 ;   CSN=1;
0004ec 9ada      	SBI  0x1B,2
                 ;   CE=1;
0004ed 9adb      	SBI  0x1B,3
                 ;   RF_Write_RX(0x07,0b01111110);  // Clear flag
0004ee 940e 0f71 	CALL SUBOPT_0x3
                 ;   RF_Command_RX(0b11100010);     //Flush RX
                 ;}
0004f0 9508      	RET
                 ; .FEND
                 ;int count;
                 ;bool flag;
                 ;unsigned char* key[] = {"", "7R6NSYFHBFRUAR6K", "5I000WROXOFS0V85", "6NHFXH076SC02DZ0", "WUIT8LX7N92X8J4W"};
                 
                 	.DSEG
                 _0xCD:
000506           	.BYTE 0x45
                 ;char cmd[250];
                 ;station_info data_send;
                 ;#include "s_function.c"
                 ;void border()
                 ; 0000 00E9 {
                 
                 	.CSEG
                 _border:
                 ; .FSTART _border
                 ;    glcd_line(48,0, 48, 15);
0004f1 e3e0      	LDI  R30,LOW(48)
0004f2 93ea      	ST   -Y,R30
0004f3 e0e0      	LDI  R30,LOW(0)
0004f4 940e 0fae 	CALL SUBOPT_0xC
                 ;    glcd_line(0, 15, 48, 15);
0004f6 e0ef      	LDI  R30,LOW(15)
0004f7 940e 0fae 	CALL SUBOPT_0xC
                 ;    glcd_line(0,0,84,0);
0004f9 e0e0      	LDI  R30,LOW(0)
0004fa 93ea      	ST   -Y,R30
0004fb e5e4      	LDI  R30,LOW(84)
0004fc 93ea      	ST   -Y,R30
0004fd e0a0      	LDI  R26,LOW(0)
0004fe 940e 0c57 	CALL _glcd_line
                 ;    glcd_line(84,0, 84, 48);
000500 e5e4      	LDI  R30,LOW(84)
000501 93ea      	ST   -Y,R30
000502 e0e0      	LDI  R30,LOW(0)
000503 940e 0fb7 	CALL SUBOPT_0xD
                 ;    glcd_line(0, 48, 84, 48);
000505 e3e0      	LDI  R30,LOW(48)
000506 940e 0fb7 	CALL SUBOPT_0xD
                 ;    glcd_line(0, 0, 0, 48);
000508 e0e0      	LDI  R30,LOW(0)
000509 93ea      	ST   -Y,R30
00050a 93ea      	ST   -Y,R30
00050b e3a0      	LDI  R26,LOW(48)
00050c 940e 0c57 	CALL _glcd_line
                 ;    glcd_moveto(3,3);
00050e e0e3      	LDI  R30,LOW(3)
00050f 940e 0fc0 	CALL SUBOPT_0xE
                 ;    glcd_outtext("Node: ");
                +
000511 e4ab     +LDI R26 , LOW ( _0xCF + ( 0 ) )
000512 e0b5     +LDI R27 , HIGH ( _0xCF + ( 0 ) )
                 	__POINTW2MN _0xCF,0
000513 940e 0fc4 	CALL SUBOPT_0xF
                 ;   // glcd_moveto(40, 3);
                 ;   // glcd_outtext("4");
                 ;
                 ;    glcd_moveto(4, 18);
000515 e1a2      	LDI  R26,LOW(18)
000516 940e 0c4b 	CALL _glcd_moveto
                 ;    glcd_outtext("Temp: ");
                +
000518 e5a2     +LDI R26 , LOW ( _0xCF + ( 7 ) )
000519 e0b5     +LDI R27 , HIGH ( _0xCF + ( 7 ) )
                 	__POINTW2MN _0xCF,7
00051a 940e 0fc4 	CALL SUBOPT_0xF
                 ;    glcd_moveto(4, 28);
00051c e1ac      	LDI  R26,LOW(28)
00051d 940e 0c4b 	CALL _glcd_moveto
                 ;    glcd_outtext("Humid: ");
                +
00051f e5a9     +LDI R26 , LOW ( _0xCF + ( 14 ) )
000520 e0b5     +LDI R27 , HIGH ( _0xCF + ( 14 ) )
                 	__POINTW2MN _0xCF,14
000521 940e 0fc4 	CALL SUBOPT_0xF
                 ;    glcd_moveto(4, 37);
000523 e2a5      	LDI  R26,LOW(37)
000524 940e 0c4b 	CALL _glcd_moveto
                 ;    glcd_outtext("Water: ");
                +
000526 e6a1     +LDI R26 , LOW ( _0xCF + ( 22 ) )
000527 e0b5     +LDI R27 , HIGH ( _0xCF + ( 22 ) )
                 	__POINTW2MN _0xCF,22
000528 940e 0c21 	CALL _glcd_outtext
                 ;    glcd_moveto(68, 18);
00052a e4e4      	LDI  R30,LOW(68)
00052b 940e 0fc9 	CALL SUBOPT_0x10
                 ;    glcd_outtext("!C");
                +
00052d e6a9     +LDI R26 , LOW ( _0xCF + ( 30 ) )
00052e e0b5     +LDI R27 , HIGH ( _0xCF + ( 30 ) )
                 	__POINTW2MN _0xCF,30
00052f 940e 0c21 	CALL _glcd_outtext
                 ;    glcd_moveto(69, 28);
000531 e4e5      	LDI  R30,LOW(69)
000532 940e 0fcd 	CALL SUBOPT_0x11
                 ;    glcd_putchar(37);
000534 e2a5      	LDI  R26,LOW(37)
000535 940e 0bbf 	CALL _glcd_putchar
                 ;    glcd_moveto(69, 37);
000537 e4e5      	LDI  R30,LOW(69)
000538 940e 0fd1 	CALL SUBOPT_0x12
                 ;    glcd_outtext("cm");
                +
00053a e6ac     +LDI R26 , LOW ( _0xCF + ( 33 ) )
00053b e0b5     +LDI R27 , HIGH ( _0xCF + ( 33 ) )
                 	__POINTW2MN _0xCF,33
00053c 940e 0c21 	CALL _glcd_outtext
                 ;}
00053e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xCF:
00054b           	.BYTE 0x24
                 ;void temp()
                 ;{
                 
                 	.CSEG
                 ;     glcd_moveto(50, 28);
                 ;     glcd_outtext("21");
                 ;     glcd_moveto(50, 18);
                 ;     glcd_outtext("75");
                 ;     glcd_moveto(50, 37);
                 ;     glcd_outtext("45");
                 ;}
                 
                 	.DSEG
                 _0xD0:
00056f           	.BYTE 0x9
                 ;void wifi_connect()
                 ;{
                 
                 	.CSEG
                 _wifi_connect:
                 ; .FSTART _wifi_connect
                 ;	glcd_moveto(10,10);
00053f e0ea      	LDI  R30,LOW(10)
000540 93ea      	ST   -Y,R30
000541 e0aa      	LDI  R26,LOW(10)
000542 940e 0c4b 	CALL _glcd_moveto
                 ;    glcd_clear();
000544 940e 08ad 	CALL _glcd_clear
                 ;    glcd_outtext("Booting");
                +
000546 e7a8     +LDI R26 , LOW ( _0xD1 + ( 0 ) )
000547 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 0 ) )
                 	__POINTW2MN _0xD1,0
000548 940e 0c21 	CALL _glcd_outtext
                 ;    delay_ms(2000);
00054a eda0      	LDI  R26,LOW(2000)
00054b e0b7      	LDI  R27,HIGH(2000)
00054c 940e 110f 	CALL _delay_ms
                 ;	put_string("AT\r\n");
                +
00054e e8a0     +LDI R26 , LOW ( _0xD1 + ( 8 ) )
00054f e0b5     +LDI R27 , HIGH ( _0xD1 + ( 8 ) )
                 	__POINTW2MN _0xD1,8
000550 de1e      	RCALL _put_string
                 ;    wait_until("OK", 2);
                +
000551 e8e5     +LDI R30 , LOW ( _0xD1 + ( 13 ) )
000552 e0f5     +LDI R31 , HIGH ( _0xD1 + ( 13 ) )
                 	__POINTW1MN _0xD1,13
000553 940e 0fd5 	CALL SUBOPT_0x13
                 ;    refresh(0);
                 ;	delay_ms(100);
000555 e6a4      	LDI  R26,LOW(100)
000556 e0b0      	LDI  R27,0
000557 940e 110f 	CALL _delay_ms
                 ;        put_string("AT+CIPSTATUS\r\n");
                +
000559 e8a8     +LDI R26 , LOW ( _0xD1 + ( 16 ) )
00055a e0b5     +LDI R27 , HIGH ( _0xD1 + ( 16 ) )
                 	__POINTW2MN _0xD1,16
00055b de13      	RCALL _put_string
                 ;        wait_until("OK", 2);
                +
00055c e9e7     +LDI R30 , LOW ( _0xD1 + ( 31 ) )
00055d e0f5     +LDI R31 , HIGH ( _0xD1 + ( 31 ) )
                 	__POINTW1MN _0xD1,31
00055e 940e 0fd5 	CALL SUBOPT_0x13
                 ;        refresh(0);
                 ;        if (strstr(buff, "STATUS:2")) {
000560 940e 0f6c 	CALL SUBOPT_0x2
                +
000562 e9aa     +LDI R26 , LOW ( _0xD1 + ( 34 ) )
000563 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 34 ) )
                 	__POINTW2MN _0xD1,34
000564 940e 0781 	CALL _strstr
000566 9730      	SBIW R30,0
000567 f029      	BREQ _0xD2
                 ;            glcd_outtext("Wifi Connected\r\n");
                +
000568 eaa3     +LDI R26 , LOW ( _0xD1 + ( 43 ) )
000569 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 43 ) )
                 	__POINTW2MN _0xD1,43
00056a 940e 0c21 	CALL _glcd_outtext
                 ;        }
                 ;        else
00056c c014      	RJMP _0xD3
                 _0xD2:
                 ;        {
                 ;            put_string("AT+CWMODE=1\r\n");
                +
00056d eba4     +LDI R26 , LOW ( _0xD1 + ( 60 ) )
00056e e0b5     +LDI R27 , HIGH ( _0xD1 + ( 60 ) )
                 	__POINTW2MN _0xD1,60
00056f ddff      	RCALL _put_string
                 ;            wait_until("OK", 2);
                +
000570 ece2     +LDI R30 , LOW ( _0xD1 + ( 74 ) )
000571 e0f5     +LDI R31 , HIGH ( _0xD1 + ( 74 ) )
                 	__POINTW1MN _0xD1,74
000572 940e 0fdf 	CALL SUBOPT_0x14
                 ;           // refresh(0);
                 ;            put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
                +
000574 eca5     +LDI R26 , LOW ( _0xD1 + ( 77 ) )
000575 e0b5     +LDI R27 , HIGH ( _0xD1 + ( 77 ) )
                 	__POINTW2MN _0xD1,77
000576 ddf8      	RCALL _put_string
                 ;            wait_until("OK", 10);
                +
000577 efe0     +LDI R30 , LOW ( _0xD1 + ( 120 ) )
000578 e0f5     +LDI R31 , HIGH ( _0xD1 + ( 120 ) )
                 	__POINTW1MN _0xD1,120
000579 93fa      	ST   -Y,R31
00057a 93ea      	ST   -Y,R30
00057b e0aa      	LDI  R26,LOW(10)
00057c e0b0      	LDI  R27,0
00057d de11      	RCALL _wait_until
                 ;            refresh(0);
00057e e0a0      	LDI  R26,LOW(0)
00057f e0b0      	LDI  R27,0
000580 de03      	RCALL _refresh
                 ;         //PORTA.6=!PORTA.6;
                 ;        }
                 _0xD3:
                 ;
                 ;  //  refresh(0);
                 ;}
000581 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xD1:
000578           	.BYTE 0x7B
                 ;
                 ;void read_and_send(unsigned char *s){
                 ; 0000 00EA void read_and_send(unsigned char *s){
                 
                 	.CSEG
                 _read_and_send:
                 ; .FSTART _read_and_send
                 ; 0000 00EB     // Thay nhung ham respones_read bang ham wait_until
                 ; 0000 00EC     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
                 ; 0000 00ED     int length = 0, i = 0;
                 ; 0000 00EE     memset(api_key, '\0',20);
000582 93ba      	ST   -Y,R27
000583 93aa      	ST   -Y,R26
000584 97ef      	SBIW R28,63
000585 972e      	SBIW R28,14
000586 e181      	LDI  R24,17
000587 e2a8      	LDI  R26,LOW(40)
000588 e0b0      	LDI  R27,HIGH(40)
000589 eaea      	LDI  R30,LOW(_0xD4*2)
00058a e0f2      	LDI  R31,HIGH(_0xD4*2)
00058b 940e 117a 	CALL __INITLOCB
00058d 940e 116e 	CALL __SAVELOCR4
                 ;	*s -> Y+81
                 ;	api_key -> Y+61
                 ;	cmd -> Y+44
                 ;	temp -> Y+24
                 ;	temp2 -> Y+4
                 ;	length -> R16,R17
                 ;	i -> R18,R19
                +
00058f e000     +LDI R16 , LOW ( 0 )
000590 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000591 e020     +LDI R18 , LOW ( 0 )
000592 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000593 01fe      	MOVW R30,R28
000594 96fd      	ADIW R30,61
000595 940e 0fe5 	CALL SUBOPT_0x15
                 ; 0000 00EF     memset(temp, '\0',20);
000597 01fe      	MOVW R30,R28
000598 9678      	ADIW R30,24
000599 940e 0fe5 	CALL SUBOPT_0x15
                 ; 0000 00F0     memset(temp2, '\0',20);
00059b 01fe      	MOVW R30,R28
00059c 9634      	ADIW R30,4
00059d 940e 0fe5 	CALL SUBOPT_0x15
                 ; 0000 00F1 
                 ; 0000 00F2     while (*s) {
                 _0xD5:
00059f 940e 0fed 	CALL SUBOPT_0x16
0005a1 30e0      	CPI  R30,0
0005a2 f0f9      	BREQ _0xD7
                 ; 0000 00F3         temp2[i] = *s;
0005a3 01f9      	MOVW R30,R18
0005a4 01de      	MOVW R26,R28
0005a5 9614      	ADIW R26,4
0005a6 0fea      	ADD  R30,R26
0005a7 1ffb      	ADC  R31,R27
0005a8 01bf      	MOVW R22,R30
0005a9 940e 0fed 	CALL SUBOPT_0x16
0005ab 01db      	MOVW R26,R22
0005ac 93ec      	ST   X,R30
                 ; 0000 00F4         api_key[i] = temp2[i];
0005ad 01f9      	MOVW R30,R18
0005ae 01de      	MOVW R26,R28
0005af 96dd      	ADIW R26,61
0005b0 0fea      	ADD  R30,R26
0005b1 1ffb      	ADC  R31,R27
0005b2 010f      	MOVW R0,R30
0005b3 01de      	MOVW R26,R28
0005b4 9614      	ADIW R26,4
0005b5 0fa2      	ADD  R26,R18
0005b6 1fb3      	ADC  R27,R19
0005b7 91ec      	LD   R30,X
0005b8 01d0      	MOVW R26,R0
0005b9 93ec      	ST   X,R30
                 ; 0000 00F5         s++;
0005ba 01de      	MOVW R26,R28
0005bb 5aaf      	SUBI R26,LOW(-(81))
0005bc 4fbf      	SBCI R27,HIGH(-(81))
0005bd 940e 0ff5 	CALL SUBOPT_0x17
                 ; 0000 00F6         i++;
                +
0005bf 5f2f     +SUBI R18 , LOW ( - 1 )
0005c0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00F7     }
0005c1 cfdd      	RJMP _0xD5
                 _0xD7:
                 ; 0000 00F8     put_string("AT+CIPMUX=1");
                +
0005c2 efa3     +LDI R26 , LOW ( _0xD8 + ( 0 ) )
0005c3 e0b5     +LDI R27 , HIGH ( _0xD8 + ( 0 ) )
                 	__POINTW2MN _0xD8,0
0005c4 940e 0ffb 	CALL SUBOPT_0x18
                 ; 0000 00F9     delay_ms(300);
                 ; 0000 00FA     put_string("\r\n");
                +
0005c6 efaf     +LDI R26 , LOW ( _0xD8 + ( 12 ) )
0005c7 e0b5     +LDI R27 , HIGH ( _0xD8 + ( 12 ) )
                 	__POINTW2MN _0xD8,12
0005c8 dda6      	RCALL _put_string
                 ; 0000 00FB     wait_until("OK", 2);
                +
0005c9 e0e2     +LDI R30 , LOW ( _0xD8 + ( 15 ) )
0005ca e0f6     +LDI R31 , HIGH ( _0xD8 + ( 15 ) )
                 	__POINTW1MN _0xD8,15
0005cb 940e 0fdf 	CALL SUBOPT_0x14
                 ; 0000 00FC     refresh(10);
0005cd e0aa      	LDI  R26,LOW(10)
0005ce e0b0      	LDI  R27,0
0005cf ddb4      	RCALL _refresh
                 ; 0000 00FD 
                 ; 0000 00FE     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
                +
0005d0 e0a5     +LDI R26 , LOW ( _0xD8 + ( 18 ) )
0005d1 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 18 ) )
                 	__POINTW2MN _0xD8,18
0005d2 940e 0ffb 	CALL SUBOPT_0x18
                 ; 0000 00FF     delay_ms(300);
                 ; 0000 0100     put_string("\r\n");
                +
0005d4 e3a1     +LDI R26 , LOW ( _0xD8 + ( 62 ) )
0005d5 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 62 ) )
                 	__POINTW2MN _0xD8,62
0005d6 dd98      	RCALL _put_string
                 ; 0000 0101     wait_until("OK", 20);
                +
0005d7 e3e4     +LDI R30 , LOW ( _0xD8 + ( 65 ) )
0005d8 e0f6     +LDI R31 , HIGH ( _0xD8 + ( 65 ) )
                 	__POINTW1MN _0xD8,65
0005d9 93fa      	ST   -Y,R31
0005da 93ea      	ST   -Y,R30
0005db e1a4      	LDI  R26,LOW(20)
0005dc e0b0      	LDI  R27,0
0005dd ddb1      	RCALL _wait_until
                 ; 0000 0102     refresh(500);
0005de efa4      	LDI  R26,LOW(500)
0005df e0b1      	LDI  R27,HIGH(500)
0005e0 dda3      	RCALL _refresh
                 ; 0000 0103 
                 ; 0000 0104    // glcd_clear();
                 ; 0000 0105   //  glcd_moveto(0,0);
                 ; 0000 0106    // glcd_outtext("Server connected\r\n");
                 ; 0000 0107 
                 ; 0000 0108     strcat(cmd, api_key);
0005e1 940e 1001 	CALL SUBOPT_0x19
0005e3 01de      	MOVW R26,R28
0005e4 96df      	ADIW R26,63
0005e5 940e 1006 	CALL SUBOPT_0x1A
                 ; 0000 0109     strcat(cmd, "&field1=");
                +
0005e7 e3a7     +LDI R26 , LOW ( _0xD8 + ( 68 ) )
0005e8 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 68 ) )
                 	__POINTW2MN _0xD8,68
0005e9 940e 0757 	CALL _strcat
                 ; 0000 010A 
                 ; 0000 010B      itoa(station_receive.temp, temp);
0005eb 940e 1009 	CALL SUBOPT_0x1B
0005ed 940e 100e 	CALL SUBOPT_0x1C
                 ; 0000 010C 
                 ; 0000 010D     //itoa(200, temp);
                 ; 0000 010E     strcat(cmd, temp);
0005ef 940e 1015 	CALL SUBOPT_0x1D
                 ; 0000 010F 
                 ; 0000 0110     strcat(cmd, "&field2=");
                +
0005f1 e4a0     +LDI R26 , LOW ( _0xD8 + ( 77 ) )
0005f2 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 77 ) )
                 	__POINTW2MN _0xD8,77
0005f3 940e 0757 	CALL _strcat
                 ; 0000 0111      itoa(station_receive.humi, temp);
0005f5 940e 1018 	CALL SUBOPT_0x1E
0005f7 940e 100e 	CALL SUBOPT_0x1C
                 ; 0000 0112    // itoa(200, temp);
                 ; 0000 0113     strcat(cmd, temp);
0005f9 940e 1015 	CALL SUBOPT_0x1D
                 ; 0000 0114 
                 ; 0000 0115     strcat(cmd, "&field3=");
                +
0005fb e4a9     +LDI R26 , LOW ( _0xD8 + ( 86 ) )
0005fc e0b6     +LDI R27 , HIGH ( _0xD8 + ( 86 ) )
                 	__POINTW2MN _0xD8,86
0005fd 940e 0757 	CALL _strcat
                 ; 0000 0116      itoa(station_receive.sm, temp);
0005ff 940e 101d 	CALL SUBOPT_0x1F
000601 940e 100e 	CALL SUBOPT_0x1C
                 ; 0000 0117    // itoa(200, temp);
                 ; 0000 0118     strcat(cmd, temp);
000603 940e 1015 	CALL SUBOPT_0x1D
                 ; 0000 0119 
                 ; 0000 011A     strcat(cmd, "\r\n");
                +
000605 e5a2     +LDI R26 , LOW ( _0xD8 + ( 95 ) )
000606 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 95 ) )
                 	__POINTW2MN _0xD8,95
000607 940e 0757 	CALL _strcat
                 ; 0000 011B 
                 ; 0000 011C     length = strlen(cmd);
000609 01de      	MOVW R26,R28
00060a 969c      	ADIW R26,44
00060b 940e 0768 	CALL _strlen
00060d 018f      	MOVW R16,R30
                 ; 0000 011D 
                 ; 0000 011E     itoa(length, temp);
00060e 931a      	ST   -Y,R17
00060f 930a      	ST   -Y,R16
000610 01de      	MOVW R26,R28
000611 965a      	ADIW R26,26
000612 940e 0798 	CALL _itoa
                 ; 0000 011F 
                 ; 0000 0120     put_string("AT+CIPSEND=0,");
                +
000614 e5a5     +LDI R26 , LOW ( _0xD8 + ( 98 ) )
000615 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 98 ) )
                 	__POINTW2MN _0xD8,98
000616 dd58      	RCALL _put_string
                 ; 0000 0121     put_string(temp);
000617 01de      	MOVW R26,R28
000618 9658      	ADIW R26,24
000619 dd55      	RCALL _put_string
                 ; 0000 0122     delay_ms(500);
00061a efa4      	LDI  R26,LOW(500)
00061b e0b1      	LDI  R27,HIGH(500)
00061c 940e 110f 	CALL _delay_ms
                 ; 0000 0123     put_string("\r\n");
                +
00061e e6a3     +LDI R26 , LOW ( _0xD8 + ( 112 ) )
00061f e0b6     +LDI R27 , HIGH ( _0xD8 + ( 112 ) )
                 	__POINTW2MN _0xD8,112
000620 dd4e      	RCALL _put_string
                 ; 0000 0124 
                 ; 0000 0125     wait_until("> ", 5);
                +
000621 e6e6     +LDI R30 , LOW ( _0xD8 + ( 115 ) )
000622 e0f6     +LDI R31 , HIGH ( _0xD8 + ( 115 ) )
                 	__POINTW1MN _0xD8,115
000623 940e 1022 	CALL SUBOPT_0x20
                 ; 0000 0126 
                 ; 0000 0127    /* glcd_clear();
                 ; 0000 0128     glcd_moveto(0,0);
                 ; 0000 0129     glcd_outtext(cmd);*/
                 ; 0000 012A 
                 ; 0000 012B     put_string(cmd);
000625 01de      	MOVW R26,R28
000626 969c      	ADIW R26,44
000627 dd47      	RCALL _put_string
                 ; 0000 012C     delay_ms(1000);
000628 940e 1028 	CALL SUBOPT_0x21
                 ; 0000 012D     putchar(0x1A);
00062a e1aa      	LDI  R26,LOW(26)
00062b dd21      	RCALL _putchar
                 ; 0000 012E 
                 ; 0000 012F     refresh(10);
00062c e0aa      	LDI  R26,LOW(10)
00062d e0b0      	LDI  R27,0
00062e dd55      	RCALL _refresh
                 ; 0000 0130 	put_string("AT+CIPCLOSE=0\r\n");
                +
00062f e6a9     +LDI R26 , LOW ( _0xD8 + ( 118 ) )
000630 e0b6     +LDI R27 , HIGH ( _0xD8 + ( 118 ) )
                 	__POINTW2MN _0xD8,118
000631 dd3d      	RCALL _put_string
                 ; 0000 0131 	wait_until("OK",5);
                +
000632 e7e9     +LDI R30 , LOW ( _0xD8 + ( 134 ) )
000633 e0f6     +LDI R31 , HIGH ( _0xD8 + ( 134 ) )
                 	__POINTW1MN _0xD8,134
000634 940e 1022 	CALL SUBOPT_0x20
                 ; 0000 0132 
                 ; 0000 0133 }
000636 940e 1175 	CALL __LOADLOCR4
000638 96ef      	ADIW R28,63
000639 9664      	ADIW R28,20
00063a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xD8:
0005f3           	.BYTE 0x89
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 0136 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0137 {
                 ; 0000 0138 // Declare your local variables here
                 ; 0000 0139 // Variable used to store graphic display
                 ; 0000 013A // controller initialization data
                 ; 0000 013B     GLCDINIT_t glcd_init_data;
                 ; 0000 013C 
                 ; 0000 013D // Input/Output Ports initialization
                 ; 0000 013E // Port A initialization
                 ; 0000 013F DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
00063b 9728      	SBIW R28,8
                 ;	glcd_init_data -> Y+0
00063c e5ee      	LDI  R30,LOW(94)
00063d bbea      	OUT  0x1A,R30
                 ; 0000 0140 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0141 PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
00063e e3ef      	LDI  R30,LOW(63)
00063f bbeb      	OUT  0x1B,R30
                 ; 0000 0142 
                 ; 0000 0143 // Port B initialization
                 ; 0000 0144 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0145     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
000640 e0ec      	LDI  R30,LOW(12)
000641 bbe7      	OUT  0x17,R30
                 ; 0000 0146 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0147     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000642 e0e4      	LDI  R30,LOW(4)
000643 bbe8      	OUT  0x18,R30
                 ; 0000 0148 
                 ; 0000 0149 // Port C initialization
                 ; 0000 014A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 014B     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000644 e0e0      	LDI  R30,LOW(0)
000645 bbe4      	OUT  0x14,R30
                 ; 0000 014C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 014D     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
000646 e0ed      	LDI  R30,LOW(13)
000647 bbe5      	OUT  0x15,R30
                 ; 0000 014E 
                 ; 0000 014F // Port D initialization
                 ; 0000 0150 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0151     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000648 e0e0      	LDI  R30,LOW(0)
000649 bbe1      	OUT  0x11,R30
                 ; 0000 0152 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0153     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00064a bbe2      	OUT  0x12,R30
                 ; 0000 0154 
                 ; 0000 0155 // Port E initialization
                 ; 0000 0156 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0157     DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
00064b b9e2      	OUT  0x2,R30
                 ; 0000 0158 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0159     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
00064c b9e3      	OUT  0x3,R30
                 ; 0000 015A 
                 ; 0000 015B // Port F initialization
                 ; 0000 015C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 015D     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
00064d 93e0 0061 	STS  97,R30
                 ; 0000 015E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 015F     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
00064f 93e0 0062 	STS  98,R30
                 ; 0000 0160 
                 ; 0000 0161 // Port G initialization
                 ; 0000 0162 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0163     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
000651 93e0 0064 	STS  100,R30
                 ; 0000 0164 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0165     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
000653 93e0 0065 	STS  101,R30
                 ; 0000 0166 
                 ; 0000 0167 // Timer/Counter 0 initialization
                 ; 0000 0168 // Clock source: System Clock
                 ; 0000 0169 // Clock value: 8000.000 kHz
                 ; 0000 016A // Mode: Normal top=0xFF
                 ; 0000 016B // OC0 output: Disconnected
                 ; 0000 016C // Timer Period: 0.02 ms
                 ; 0000 016D 
                 ; 0000 016E         ASSR=0<<AS0;
000655 bfe0      	OUT  0x30,R30
                 ; 0000 016F         TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
000656 e0e1      	LDI  R30,LOW(1)
000657 bfe3      	OUT  0x33,R30
                 ; 0000 0170         TCNT0=0x60;
000658 e6e0      	LDI  R30,LOW(96)
000659 bfe2      	OUT  0x32,R30
                 ; 0000 0171         OCR0=0x00;
00065a e0e0      	LDI  R30,LOW(0)
00065b bfe1      	OUT  0x31,R30
                 ; 0000 0172 
                 ; 0000 0173 // Timer/Counter 1 initialization
                 ; 0000 0174 // Clock source: System Clock
                 ; 0000 0175 // Clock value: Timer1 Stopped
                 ; 0000 0176 // Mode: Normal top=0xFFFF
                 ; 0000 0177 // OC1A output: Disconnected
                 ; 0000 0178 // OC1B output: Disconnected
                 ; 0000 0179 // OC1C output: Disconnected
                 ; 0000 017A // Noise Canceler: Off
                 ; 0000 017B // Input Capture on Falling Edge
                 ; 0000 017C // Timer1 Overflow Interrupt: Off
                 ; 0000 017D // Input Capture Interrupt: Off
                 ; 0000 017E // Compare A Match Interrupt: Off
                 ; 0000 017F // Compare B Match Interrupt: Off
                 ; 0000 0180 // Compare C Match Interrupt: Off
                 ; 0000 0181     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
00065c bdef      	OUT  0x2F,R30
                 ; 0000 0182     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00065d bdee      	OUT  0x2E,R30
                 ; 0000 0183     TCNT1H=0x00;
00065e bded      	OUT  0x2D,R30
                 ; 0000 0184     TCNT1L=0x00;
00065f bdec      	OUT  0x2C,R30
                 ; 0000 0185     ICR1H=0x00;
000660 bde7      	OUT  0x27,R30
                 ; 0000 0186     ICR1L=0x00;
000661 bde6      	OUT  0x26,R30
                 ; 0000 0187     OCR1AH=0x00;
000662 bdeb      	OUT  0x2B,R30
                 ; 0000 0188     OCR1AL=0x00;
000663 bdea      	OUT  0x2A,R30
                 ; 0000 0189     OCR1BH=0x00;
000664 bde9      	OUT  0x29,R30
                 ; 0000 018A     OCR1BL=0x00;
000665 bde8      	OUT  0x28,R30
                 ; 0000 018B     OCR1CH=0x00;
000666 93e0 0079 	STS  121,R30
                 ; 0000 018C     OCR1CL=0x00;
000668 93e0 0078 	STS  120,R30
                 ; 0000 018D 
                 ; 0000 018E // Timer/Counter 2 initialization
                 ; 0000 018F // Clock source: System Clock
                 ; 0000 0190 // Clock value: Timer2 Stopped
                 ; 0000 0191 // Mode: Normal top=0xFF
                 ; 0000 0192 // OC2 output: Disconnected
                 ; 0000 0193     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00066a bde5      	OUT  0x25,R30
                 ; 0000 0194     TCNT2=0x00;
00066b bde4      	OUT  0x24,R30
                 ; 0000 0195     OCR2=0x00;
00066c bde3      	OUT  0x23,R30
                 ; 0000 0196 
                 ; 0000 0197 // Timer/Counter 3 initialization
                 ; 0000 0198 // Clock source: System Clock
                 ; 0000 0199 // Clock value: Timer3 Stopped
                 ; 0000 019A // Mode: Normal top=0xFFFF
                 ; 0000 019B // OC3A output: Disconnected
                 ; 0000 019C // OC3B output: Disconnected
                 ; 0000 019D // OC3C output: Disconnected
                 ; 0000 019E // Noise Canceler: Off
                 ; 0000 019F // Input Capture on Falling Edge
                 ; 0000 01A0 // Timer3 Overflow Interrupt: Off
                 ; 0000 01A1 // Input Capture Interrupt: Off
                 ; 0000 01A2 // Compare A Match Interrupt: Off
                 ; 0000 01A3 // Compare B Match Interrupt: Off
                 ; 0000 01A4 // Compare C Match Interrupt: Off
                 ; 0000 01A5     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
00066d 93e0 008b 	STS  139,R30
                 ; 0000 01A6     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
00066f 93e0 008a 	STS  138,R30
                 ; 0000 01A7     TCNT3H=0x00;
000671 93e0 0089 	STS  137,R30
                 ; 0000 01A8     TCNT3L=0x00;
000673 93e0 0088 	STS  136,R30
                 ; 0000 01A9     ICR3H=0x00;
000675 93e0 0081 	STS  129,R30
                 ; 0000 01AA     ICR3L=0x00;
000677 93e0 0080 	STS  128,R30
                 ; 0000 01AB     OCR3AH=0x00;
000679 93e0 0087 	STS  135,R30
                 ; 0000 01AC     OCR3AL=0x00;
00067b 93e0 0086 	STS  134,R30
                 ; 0000 01AD     OCR3BH=0x00;
00067d 93e0 0085 	STS  133,R30
                 ; 0000 01AE     OCR3BL=0x00;
00067f 93e0 0084 	STS  132,R30
                 ; 0000 01AF     OCR3CH=0x00;
000681 93e0 0083 	STS  131,R30
                 ; 0000 01B0     OCR3CL=0x00;
000683 93e0 0082 	STS  130,R30
                 ; 0000 01B1 
                 ; 0000 01B2 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01B3     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000685 e0e1      	LDI  R30,LOW(1)
000686 bfe7      	OUT  0x37,R30
                 ; 0000 01B4     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000687 e0e0      	LDI  R30,LOW(0)
000688 93e0 007d 	STS  125,R30
                 ; 0000 01B5 
                 ; 0000 01B6 // External Interrupt(s) initialization
                 ; 0000 01B7 // INT0: Off
                 ; 0000 01B8 // INT1: Off
                 ; 0000 01B9 // INT2: Off
                 ; 0000 01BA // INT3: Off
                 ; 0000 01BB // INT4: Off
                 ; 0000 01BC // INT5: Off
                 ; 0000 01BD // INT6: Off
                 ; 0000 01BE // INT7: Off
                 ; 0000 01BF     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00068a 93e0 006a 	STS  106,R30
                 ; 0000 01C0     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
00068c bfea      	OUT  0x3A,R30
                 ; 0000 01C1     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
00068d bfe9      	OUT  0x39,R30
                 ; 0000 01C2 
                 ; 0000 01C3 // USART0 initialization
                 ; 0000 01C4 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01C5 // USART0 Receiver: On
                 ; 0000 01C6 // USART0 Transmitter: On
                 ; 0000 01C7 // USART0 Mode: Asynchronous
                 ; 0000 01C8 // USART0 Baud Rate: 9600
                 ; 0000 01C9     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00068e b9eb      	OUT  0xB,R30
                 ; 0000 01CA     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00068f ede8      	LDI  R30,LOW(216)
000690 b9ea      	OUT  0xA,R30
                 ; 0000 01CB     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000691 e0e6      	LDI  R30,LOW(6)
000692 93e0 0095 	STS  149,R30
                 ; 0000 01CC     UBRR0H=0x00;
000694 e0e0      	LDI  R30,LOW(0)
000695 93e0 0090 	STS  144,R30
                 ; 0000 01CD     UBRR0L=0x33;
000697 e3e3      	LDI  R30,LOW(51)
000698 b9e9      	OUT  0x9,R30
                 ; 0000 01CE 
                 ; 0000 01CF // USART1 initialization
                 ; 0000 01D0 // USART1 disabled
                 ; 0000 01D1     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000699 e0e0      	LDI  R30,LOW(0)
00069a 93e0 009a 	STS  154,R30
                 ; 0000 01D2 
                 ; 0000 01D3 // Analog Comparator initialization
                 ; 0000 01D4 // Analog Comparator: Off
                 ; 0000 01D5 // The Analog Comparator's positive input is
                 ; 0000 01D6 // connected to the AIN0 pin
                 ; 0000 01D7 // The Analog Comparator's negative input is
                 ; 0000 01D8 // connected to the AIN1 pin
                 ; 0000 01D9     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00069c e8e0      	LDI  R30,LOW(128)
00069d b9e8      	OUT  0x8,R30
                 ; 0000 01DA     SFIOR=(0<<ACME);
00069e e0e0      	LDI  R30,LOW(0)
00069f bde0      	OUT  0x20,R30
                 ; 0000 01DB 
                 ; 0000 01DC // ADC initialization
                 ; 0000 01DD // ADC disabled
                 ; 0000 01DE     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0006a0 b9e6      	OUT  0x6,R30
                 ; 0000 01DF 
                 ; 0000 01E0 // SPI initialization
                 ; 0000 01E1 // SPI disabled
                 ; 0000 01E2     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0006a1 b9ed      	OUT  0xD,R30
                 ; 0000 01E3 
                 ; 0000 01E4 // TWI initialization
                 ; 0000 01E5 // TWI disabled
                 ; 0000 01E6     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0006a2 93e0 0074 	STS  116,R30
                 ; 0000 01E7 
                 ; 0000 01E8 // Graphic Display Controller initialization
                 ; 0000 01E9 // The PCD8544 connections are specified in the
                 ; 0000 01EA // Project|Configure|C Compiler|Libraries|Graphic Display menu:
                 ; 0000 01EB // SDIN - PORTC Bit 7
                 ; 0000 01EC // SCLK - PORTA Bit 7
                 ; 0000 01ED // D /C - PORTC Bit 6
                 ; 0000 01EE // /SCE - PORTC Bit 5
                 ; 0000 01EF // /RES - PORTC Bit 4
                 ; 0000 01F0 
                 ; 0000 01F1 // Specify the current font for displaying text
                 ; 0000 01F2     glcd_init_data.font=font5x7;
0006a4 e8ec      	LDI  R30,LOW(_font5x7*2)
0006a5 e0f0      	LDI  R31,HIGH(_font5x7*2)
0006a6 83e8      	ST   Y,R30
0006a7 83f9      	STD  Y+1,R31
                 ; 0000 01F3 // No function is used for reading
                 ; 0000 01F4 // image data from external memory
                 ; 0000 01F5     glcd_init_data.readxmem=NULL;
0006a8 e0e0      	LDI  R30,LOW(0)
0006a9 83ea      	STD  Y+2,R30
0006aa 83eb      	STD  Y+2+1,R30
                 ; 0000 01F6 // No function is used for writing
                 ; 0000 01F7 // image data to external memory
                 ; 0000 01F8     glcd_init_data.writexmem=NULL;
0006ab 83ec      	STD  Y+4,R30
0006ac 83ed      	STD  Y+4+1,R30
                 ; 0000 01F9 // Set the LCD temperature coefficient
                 ; 0000 01FA     glcd_init_data.temp_coef=90;
0006ad 81ee      	LDD  R30,Y+6
0006ae 7fec      	ANDI R30,LOW(0xFC)
0006af 60e2      	ORI  R30,2
0006b0 83ee      	STD  Y+6,R30
                 ; 0000 01FB // Set the LCD bias
                 ; 0000 01FC     glcd_init_data.bias=3;
0006b1 7ee3      	ANDI R30,LOW(0xE3)
0006b2 60ec      	ORI  R30,LOW(0xC)
0006b3 83ee      	STD  Y+6,R30
                 ; 0000 01FD // Set the LCD contrast control voltage VLCD
                 ; 0000 01FE     glcd_init_data.vlcd=55;
0006b4 81ef      	LDD  R30,Y+7
0006b5 78e0      	ANDI R30,LOW(0x80)
0006b6 63e7      	ORI  R30,LOW(0x37)
0006b7 83ef      	STD  Y+7,R30
                 ; 0000 01FF 
                 ; 0000 0200     glcd_init(&glcd_init_data);
0006b8 01de      	MOVW R26,R28
0006b9 940e 0824 	CALL _glcd_init
                 ; 0000 0201 
                 ; 0000 0202 // Global enable interrupts
                 ; 0000 0203 #asm("sei")
0006bb 9478      	sei
                 ; 0000 0204 }
0006bc 9628      	ADIW R28,8
                 ; 0000 0205 delay_ms(1000);
0006bd 940e 1028 	CALL SUBOPT_0x21
                 ; 0000 0206 wifi_connect();
0006bf de7f      	RCALL _wifi_connect
                 ; 0000 0207 
                 ; 0000 0208 RF_Init_RX();
0006c0 dd90      	RCALL _RF_Init_RX
                 ; 0000 0209 config();
0006c1 dd29      	RCALL _config
                 ; 0000 020A RF_Config_RX();
0006c2 ddf2      	RCALL _RF_Config_RX
                 ; 0000 020B count = 1;
0006c3 940e 102c 	CALL SUBOPT_0x22
                 ; 0000 020C glcd_clear();
0006c5 940e 08ad 	CALL _glcd_clear
                 ; 0000 020D // menu hien len o day
                 ; 0000 020E while (1)
                 _0xD9:
                 ; 0000 020F     {
                 ; 0000 0210     if (menu==0)
0006c7 999b      	SBIC 0x13,3
0006c8 c051      	RJMP _0xDC
                 ; 0000 0211     {
                 ; 0000 0212         while(1)
                 _0xDD:
                 ; 0000 0213         {
                 ; 0000 0214         RF_Mode_RX();
0006c9 dde5      	RCALL _RF_Mode_RX
                 ; 0000 0215         if(IRQ == 0){
0006ca 99c8      	SBIC 0x19,0
0006cb c04d      	RJMP _0xE0
                 ; 0000 0216             RF_Read_RX_3();
0006cc ddfe      	RCALL _RF_Read_RX_3
                 ; 0000 0217             if(station_receive.flag == count){
0006cd 91e0 0849 	LDS  R30,_count
0006cf 91f0 084a 	LDS  R31,_count+1
0006d1 91a0 0824 	LDS  R26,_station_receive
0006d3 91b0 0825 	LDS  R27,_station_receive+1
0006d5 17ea      	CP   R30,R26
0006d6 07fb      	CPC  R31,R27
0006d7 f009      	BREQ PC+2
0006d8 c040      	RJMP _0xE1
                 ; 0000 0218                 border();
0006d9 de17      	RCALL _border
                 ; 0000 0219                 glcd_moveto(40, 3);
0006da e2e8      	LDI  R30,LOW(40)
0006db 940e 0fc0 	CALL SUBOPT_0xE
                 ; 0000 021A                 itoa(station_receive.flag, buff);
0006dd 940e 1033 	CALL SUBOPT_0x23
                 ; 0000 021B                 glcd_outtext(buff);
                 ; 0000 021C                 glcd_moveto(46, 18);
                 ; 0000 021D                 sprintf(buff, "%d", station_receive.temp);
0006df 940e 0f6c 	CALL SUBOPT_0x2
0006e1 940e 1043 	CALL SUBOPT_0x24
0006e3 940e 1009 	CALL SUBOPT_0x1B
0006e5 940e 1048 	CALL SUBOPT_0x25
                 ; 0000 021E                 glcd_outtext(buff);
                 ; 0000 021F                 glcd_moveto(46, 28);
0006e7 940e 0fcd 	CALL SUBOPT_0x11
                 ; 0000 0220                 sprintf(buff, "%d", station_receive.humi);
0006e9 940e 0f6c 	CALL SUBOPT_0x2
0006eb 940e 1043 	CALL SUBOPT_0x24
0006ed 940e 1018 	CALL SUBOPT_0x1E
0006ef 940e 1048 	CALL SUBOPT_0x25
                 ; 0000 0221                 glcd_outtext(buff);
                 ; 0000 0222                 glcd_moveto(46, 37);
0006f1 940e 0fd1 	CALL SUBOPT_0x12
                 ; 0000 0223                 sprintf(buff, "%d", station_receive.sm);
0006f3 940e 0f6c 	CALL SUBOPT_0x2
0006f5 940e 1043 	CALL SUBOPT_0x24
0006f7 940e 101d 	CALL SUBOPT_0x1F
0006f9 940e 1056 	CALL SUBOPT_0x26
                 ; 0000 0224                 glcd_outtext(buff);
                 ; 0000 0225                 read_and_send(key[count]);
0006fb 91e0 0849 	LDS  R30,_count
0006fd 91f0 084a 	LDS  R31,_count+1
0006ff e4ab      	LDI  R26,LOW(_key)
000700 e0b8      	LDI  R27,HIGH(_key)
000701 0fee      	LSL  R30
000702 1fff      	ROL  R31
000703 0fae      	ADD  R26,R30
000704 1fbf      	ADC  R27,R31
000705 940e 113e 	CALL __GETW1P
000707 01df      	MOVW R26,R30
000708 de79      	RCALL _read_and_send
                 ; 0000 0226                 delay_ms(800);
000709 e2a0      	LDI  R26,LOW(800)
00070a e0b3      	LDI  R27,HIGH(800)
00070b 940e 110f 	CALL _delay_ms
                 ; 0000 0227                 count++;
00070d e4a9      	LDI  R26,LOW(_count)
00070e e0b8      	LDI  R27,HIGH(_count)
00070f 940e 0ff5 	CALL SUBOPT_0x17
                 ; 0000 0228                 if(count == 5)
000711 91a0 0849 	LDS  R26,_count
000713 91b0 084a 	LDS  R27,_count+1
000715 9715      	SBIW R26,5
000716 f411      	BRNE _0xE2
                 ; 0000 0229                     count = 1;
000717 940e 102c 	CALL SUBOPT_0x22
                 ; 0000 022A                 }
                 _0xE2:
                 ; 0000 022B         }
                 _0xE1:
                 ; 0000 022C         }
                 _0xE0:
000719 cfaf      	RJMP _0xDD
                 ; 0000 022D     }
                 ; 0000 022E     if (back==0)
                 _0xDC:
00071a 999a      	SBIC 0x13,2
00071b c029      	RJMP _0xE3
                 ; 0000 022F     {
                 ; 0000 0230     while(1)
                 _0xE4:
                 ; 0000 0231     {
                 ; 0000 0232      RF_Mode_RX();
00071c dd92      	RCALL _RF_Mode_RX
                 ; 0000 0233         if(IRQ == 0){
00071d 99c8      	SBIC 0x19,0
00071e c025      	RJMP _0xE7
                 ; 0000 0234             RF_Read_RX_3();
00071f ddab      	RCALL _RF_Read_RX_3
                 ; 0000 0235             border();
000720 ddd0      	RCALL _border
                 ; 0000 0236             glcd_moveto(40, 3);
000721 e2e8      	LDI  R30,LOW(40)
000722 940e 0fc0 	CALL SUBOPT_0xE
                 ; 0000 0237             itoa(station_receive.flag, buff);
000724 940e 1033 	CALL SUBOPT_0x23
                 ; 0000 0238             glcd_outtext(buff);
                 ; 0000 0239             glcd_moveto(46, 18);
                 ; 0000 023A             sprintf(buff, "%d", station_receive.temp);
000726 940e 0f6c 	CALL SUBOPT_0x2
000728 940e 1043 	CALL SUBOPT_0x24
00072a 940e 1009 	CALL SUBOPT_0x1B
00072c 940e 1048 	CALL SUBOPT_0x25
                 ; 0000 023B             glcd_outtext(buff);
                 ; 0000 023C             glcd_moveto(46, 28);
00072e 940e 0fcd 	CALL SUBOPT_0x11
                 ; 0000 023D             sprintf(buff, "%d", station_receive.humi);
000730 940e 0f6c 	CALL SUBOPT_0x2
000732 940e 1043 	CALL SUBOPT_0x24
000734 940e 1018 	CALL SUBOPT_0x1E
000736 940e 1048 	CALL SUBOPT_0x25
                 ; 0000 023E             glcd_outtext(buff);
                 ; 0000 023F             glcd_moveto(46, 37);
000738 940e 0fd1 	CALL SUBOPT_0x12
                 ; 0000 0240             sprintf(buff, "%d", station_receive.sm);
00073a 940e 0f6c 	CALL SUBOPT_0x2
00073c 940e 1043 	CALL SUBOPT_0x24
00073e 940e 101d 	CALL SUBOPT_0x1F
000740 940e 1056 	CALL SUBOPT_0x26
                 ; 0000 0241             glcd_outtext(buff);
                 ; 0000 0242             delay_ms(1000);
000742 940e 1028 	CALL SUBOPT_0x21
                 ; 0000 0243         }
                 ; 0000 0244     }
                 _0xE7:
000744 cfd7      	RJMP _0xE4
                 ; 0000 0245     }
                 ; 0000 0246 }
                 _0xE3:
000745 cf81      	RJMP _0xD9
                 ; 0000 0247 }
                 _0xE8:
000746 cfff      	RJMP _0xE8
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000747 93ba      	ST   -Y,R27
000748 93aa      	ST   -Y,R26
000749 81b9          ldd  r27,y+1
00074a 81a8          ld   r26,y
00074b 9610          adiw r26,0
00074c f031          breq memset1
00074d 81fc          ldd  r31,y+4
00074e 81eb          ldd  r30,y+3
00074f 816a          ldd  r22,y+2
                 memset0:
000750 9361          st   z+,r22
000751 9711          sbiw r26,1
000752 f7e9          brne memset0
                 memset1:
000753 81eb          ldd  r30,y+3
000754 81fc          ldd  r31,y+4
000755 940c 0d85 	JMP  _0x2120005
                 ; .FEND
                 _strcat:
                 ; .FSTART _strcat
000757 93ba      	ST   -Y,R27
000758 93aa      	ST   -Y,R26
000759 91e9          ld   r30,y+
00075a 91f9          ld   r31,y+
00075b 91a9          ld   r26,y+
00075c 91b9          ld   r27,y+
00075d 01cd          movw r24,r26
                 strcat0:
00075e 916d          ld   r22,x+
00075f 2366          tst  r22
000760 f7e9          brne strcat0
000761 9711          sbiw r26,1
                 strcat1:
000762 9161          ld   r22,z+
000763 936d          st   x+,r22
000764 2366          tst  r22
000765 f7e1          brne strcat1
000766 01fc          movw r30,r24
000767 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000768 93ba      	ST   -Y,R27
000769 93aa      	ST   -Y,R26
00076a 91a9          ld   r26,y+
00076b 91b9          ld   r27,y+
00076c 27ee          clr  r30
00076d 27ff          clr  r31
                 strlen0:
00076e 916d          ld   r22,x+
00076f 2366          tst  r22
000770 f011          breq strlen1
000771 9631          adiw r30,1
000772 cffb          rjmp strlen0
                 strlen1:
000773 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000774 93ba      	ST   -Y,R27
000775 93aa      	ST   -Y,R26
000776 27aa          clr  r26
000777 27bb          clr  r27
000778 91e9          ld   r30,y+
000779 91f9          ld   r31,y+
                 strlenf0:
00077a 9005      	lpm  r0,z+
00077b 2000          tst  r0
00077c f011          breq strlenf1
00077d 9611          adiw r26,1
00077e cffb          rjmp strlenf0
                 strlenf1:
00077f 01fd          movw r30,r26
000780 9508          ret
                 ; .FEND
                 _strstr:
                 ; .FSTART _strstr
000781 93ba      	ST   -Y,R27
000782 93aa      	ST   -Y,R26
000783 81aa          ldd  r26,y+2
000784 81bb          ldd  r27,y+3
000785 01cd          movw r24,r26
                 strstr0:
000786 81e8          ld   r30,y
000787 81f9          ldd  r31,y+1
                 strstr1:
000788 9171          ld   r23,z+
000789 2377          tst  r23
00078a f411          brne strstr2
00078b 01fc          movw r30,r24
00078c c009          rjmp strstr3
                 strstr2:
00078d 916d          ld   r22,x+
00078e 1767          cp   r22,r23
00078f f3c1          breq strstr1
000790 9601          adiw r24,1
000791 01dc          movw r26,r24
000792 2366          tst  r22
000793 f791          brne strstr0
000794 27ee          clr  r30
000795 27ff          clr  r31
                 strstr3:
000796 940c 08c9 	JMP  _0x212000B
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000798 93ba      	ST   -Y,R27
000799 93aa      	ST   -Y,R26
00079a 91a9          ld   r26,y+
00079b 91b9          ld   r27,y+
00079c 91e9          ld   r30,y+
00079d 91f9          ld   r31,y+
00079e 9630          adiw r30,0
00079f f42a          brpl __itoa0
0007a0 95e0          com  r30
0007a1 95f0          com  r31
0007a2 9631          adiw r30,1
0007a3 e26d          ldi  r22,'-'
0007a4 936d          st   x+,r22
                 __itoa0:
0007a5 94e8          clt
0007a6 e180          ldi  r24,low(10000)
0007a7 e297          ldi  r25,high(10000)
0007a8 d00d          rcall __itoa1
0007a9 ee88          ldi  r24,low(1000)
0007aa e093          ldi  r25,high(1000)
0007ab d00a          rcall __itoa1
0007ac e684          ldi  r24,100
0007ad 2799          clr  r25
0007ae d007          rcall __itoa1
0007af e08a          ldi  r24,10
0007b0 d005          rcall __itoa1
0007b1 2f6e          mov  r22,r30
0007b2 d010          rcall __itoa5
0007b3 2766          clr  r22
0007b4 936c          st   x,r22
0007b5 9508          ret
                 
                 __itoa1:
0007b6 2766          clr	 r22
                 __itoa2:
0007b7 17e8          cp   r30,r24
0007b8 07f9          cpc  r31,r25
0007b9 f020          brlo __itoa3
0007ba 9563          inc  r22
0007bb 1be8          sub  r30,r24
0007bc 0bf9          sbc  r31,r25
0007bd f7c9          brne __itoa2
                 __itoa3:
0007be 2366          tst  r22
0007bf f411          brne __itoa4
0007c0 f016          brts __itoa5
0007c1 9508          ret
                 __itoa4:
0007c2 9468          set
                 __itoa5:
0007c3 5d60          subi r22,-0x30
0007c4 936d          st   x+,r22
0007c5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G102:
                 ; .FSTART _pcd8544_delay_G102
0007c6 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G102:
                 ; .FSTART _pcd8544_wrbus_G102
0007c7 93aa      	ST   -Y,R26
0007c8 931a      	ST   -Y,R17
0007c9 98ad      	CBI  0x15,5
0007ca e018      	LDI  R17,LOW(8)
                 _0x2040004:
0007cb dffa      	RCALL _pcd8544_delay_G102
0007cc 81e9      	LDD  R30,Y+1
0007cd 78e0      	ANDI R30,LOW(0x80)
0007ce f011      	BREQ _0x2040006
0007cf 9aaf      	SBI  0x15,7
0007d0 c001      	RJMP _0x2040007
                 _0x2040006:
0007d1 98af      	CBI  0x15,7
                 _0x2040007:
0007d2 81e9      	LDD  R30,Y+1
0007d3 0fee      	LSL  R30
0007d4 83e9      	STD  Y+1,R30
0007d5 dff0      	RCALL _pcd8544_delay_G102
0007d6 9adf      	SBI  0x1B,7
0007d7 dfee      	RCALL _pcd8544_delay_G102
0007d8 98df      	CBI  0x1B,7
0007d9 5011      	SUBI R17,LOW(1)
0007da f781      	BRNE _0x2040004
0007db 9aad      	SBI  0x15,5
0007dc 8118      	LDD  R17,Y+0
0007dd c03a      	RJMP _0x212000D
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
0007de 93aa      	ST   -Y,R26
0007df 98ae      	CBI  0x15,6
0007e0 81a8      	LD   R26,Y
0007e1 dfe5      	RCALL _pcd8544_wrbus_G102
0007e2 c0c8      	RJMP _0x212000C
                 ; .FEND
                 _pcd8544_wrdata_G102:
                 ; .FSTART _pcd8544_wrdata_G102
0007e3 93aa      	ST   -Y,R26
0007e4 9aae      	SBI  0x15,6
0007e5 81a8      	LD   R26,Y
0007e6 dfe0      	RCALL _pcd8544_wrbus_G102
0007e7 c0c3      	RJMP _0x212000C
                 ; .FEND
                 _pcd8544_setaddr_G102:
                 ; .FSTART _pcd8544_setaddr_G102
0007e8 93aa      	ST   -Y,R26
0007e9 931a      	ST   -Y,R17
0007ea 81e9      	LDD  R30,Y+1
0007eb 95e6      	LSR  R30
0007ec 95e6      	LSR  R30
0007ed 95e6      	LSR  R30
0007ee 2f1e      	MOV  R17,R30
0007ef e5e4      	LDI  R30,LOW(84)
0007f0 9fe1      	MUL  R30,R17
0007f1 01f0      	MOVW R30,R0
0007f2 01df      	MOVW R26,R30
0007f3 81ea      	LDD  R30,Y+2
0007f4 e0f0      	LDI  R31,0
0007f5 0fea      	ADD  R30,R26
0007f6 1ffb      	ADC  R31,R27
0007f7 93e0 0859 	STS  _gfx_addr_G102,R30
0007f9 93f0 085a 	STS  _gfx_addr_G102+1,R31
0007fb 2fe1      	MOV  R30,R17
0007fc 8118      	LDD  R17,Y+0
0007fd 9623      	ADIW R28,3
0007fe 9508      	RET
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
0007ff 93aa      	ST   -Y,R26
000800 81e9      	LDD  R30,Y+1
000801 68e0      	ORI  R30,0x80
000802 2fae      	MOV  R26,R30
000803 dfda      	RCALL _pcd8544_wrcmd
000804 81e9      	LDD  R30,Y+1
000805 93ea      	ST   -Y,R30
000806 81a9      	LDD  R26,Y+1
000807 dfe0      	RCALL _pcd8544_setaddr_G102
000808 64e0      	ORI  R30,0x40
000809 2fae      	MOV  R26,R30
00080a dfd3      	RCALL _pcd8544_wrcmd
00080b c00c      	RJMP _0x212000D
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
00080c 93aa      	ST   -Y,R26
00080d 81e9      	LDD  R30,Y+1
00080e 93ea      	ST   -Y,R30
00080f 81a9      	LDD  R26,Y+1
000810 dfee      	RCALL _pcd8544_gotoxy
000811 91e0 0859 	LDS  R30,_gfx_addr_G102
000813 91f0 085a 	LDS  R31,_gfx_addr_G102+1
000815 5ae5      	SUBI R30,LOW(-_gfx_buffer_G102)
000816 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G102)
000817 81e0      	LD   R30,Z
                 _0x212000D:
000818 9622      	ADIW R28,2
000819 9508      	RET
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
00081a 93aa      	ST   -Y,R26
00081b 940e 1062 	CALL SUBOPT_0x27
00081d 9731      	SBIW R30,1
00081e 5ae5      	SUBI R30,LOW(-_gfx_buffer_G102)
00081f 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G102)
000820 81a8      	LD   R26,Y
000821 83a0      	STD  Z+0,R26
000822 dfc0      	RCALL _pcd8544_wrdata_G102
000823 c087      	RJMP _0x212000C
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
000824 93ba      	ST   -Y,R27
000825 93aa      	ST   -Y,R26
000826 940e 116e 	CALL __SAVELOCR4
000828 9aa5      	SBI  0x14,5
000829 9aad      	SBI  0x15,5
00082a 9ad7      	SBI  0x1A,7
00082b 98df      	CBI  0x1B,7
00082c 9aa7      	SBI  0x14,7
00082d 9aa6      	SBI  0x14,6
00082e 9aa4      	SBI  0x14,4
00082f 98ac      	CBI  0x15,4
000830 e0aa      	LDI  R26,LOW(10)
000831 e0b0      	LDI  R27,0
000832 940e 110f 	CALL _delay_ms
000834 9aac      	SBI  0x15,4
000835 81ec      	LDD  R30,Y+4
000836 81fd      	LDD  R31,Y+4+1
000837 9730      	SBIW R30,0
000838 f121      	BREQ _0x2040008
000839 81e6      	LDD  R30,Z+6
00083a 70e3      	ANDI R30,LOW(0x3)
00083b 2f1e      	MOV  R17,R30
00083c 81ec      	LDD  R30,Y+4
00083d 81fd      	LDD  R31,Y+4+1
00083e 81e6      	LDD  R30,Z+6
00083f 95e6      	LSR  R30
000840 95e6      	LSR  R30
000841 70e7      	ANDI R30,LOW(0x7)
000842 2f0e      	MOV  R16,R30
000843 81ec      	LDD  R30,Y+4
000844 81fd      	LDD  R31,Y+4+1
000845 81e7      	LDD  R30,Z+7
000846 77ef      	ANDI R30,0x7F
000847 2f3e      	MOV  R19,R30
000848 81ac      	LDD  R26,Y+4
000849 81bd      	LDD  R27,Y+4+1
00084a 940e 113e 	CALL __GETW1P
                +
00084c 93e0 0680+STS _glcd_state + ( 4 ) , R30
00084e 93f0 0681+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000850 9612      	ADIW R26,2
000851 940e 113e 	CALL __GETW1P
                +
000853 93e0 0695+STS _glcd_state + ( 25 ) , R30
000855 93f0 0696+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
000857 81ac      	LDD  R26,Y+4
000858 81bd      	LDD  R27,Y+4+1
000859 9614      	ADIW R26,4
00085a 940e 113e 	CALL __GETW1P
00085c c00d      	RJMP _0x20400A0
                 _0x2040008:
00085d e010      	LDI  R17,LOW(0)
00085e e003      	LDI  R16,LOW(3)
00085f e332      	LDI  R19,LOW(50)
000860 e0e0      	LDI  R30,LOW(0)
000861 e0f0      	LDI  R31,HIGH(0)
                +
000862 93e0 0680+STS _glcd_state + ( 4 ) , R30
000864 93f0 0681+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000866 93e0 0695+STS _glcd_state + ( 25 ) , R30
000868 93f0 0696+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20400A0:
                +
00086a 93e0 0697+STS _glcd_state + ( 27 ) , R30
00086c 93f0 0698+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
00086e e2a1      	LDI  R26,LOW(33)
00086f df6e      	RCALL _pcd8544_wrcmd
000870 2fe1      	MOV  R30,R17
000871 60e4      	ORI  R30,4
000872 2fae      	MOV  R26,R30
000873 df6a      	RCALL _pcd8544_wrcmd
000874 2fe0      	MOV  R30,R16
000875 61e0      	ORI  R30,0x10
000876 2fae      	MOV  R26,R30
000877 df66      	RCALL _pcd8544_wrcmd
000878 2fe3      	MOV  R30,R19
000879 68e0      	ORI  R30,0x80
00087a 2fae      	MOV  R26,R30
00087b df62      	RCALL _pcd8544_wrcmd
00087c e2a0      	LDI  R26,LOW(32)
00087d df60      	RCALL _pcd8544_wrcmd
00087e e0a1      	LDI  R26,LOW(1)
00087f d022      	RCALL _glcd_display
000880 e0e1      	LDI  R30,LOW(1)
000881 93e0 067c 	STS  _glcd_state,R30
000883 e0e0      	LDI  R30,LOW(0)
                +
000884 93e0 067d+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000886 e0e1      	LDI  R30,LOW(1)
                +
000887 93e0 0682+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000889 93e0 0683+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
00088b 93e0 0684+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
00088d efef      	LDI  R30,LOW(255)
                +
00088e 93e0 0685+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000890 e0e1      	LDI  R30,LOW(1)
                +
000891 93e0 068c+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000893 e8ed     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000894 e0f6     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000895 93fa      	ST   -Y,R31
000896 93ea      	ST   -Y,R30
000897 efef      	LDI  R30,LOW(255)
000898 93ea      	ST   -Y,R30
000899 e0a8      	LDI  R26,LOW(8)
00089a e0b0      	LDI  R27,0
00089b 940e 0747 	CALL _memset
00089d d00f      	RCALL _glcd_clear
00089e e0e1      	LDI  R30,LOW(1)
00089f 940e 1175 	CALL __LOADLOCR4
0008a1 c082      	RJMP _0x212000A
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
0008a2 93aa      	ST   -Y,R26
0008a3 81e8      	LD   R30,Y
0008a4 30e0      	CPI  R30,0
0008a5 f011      	BREQ _0x204000A
0008a6 e0ec      	LDI  R30,LOW(12)
0008a7 c001      	RJMP _0x204000B
                 _0x204000A:
0008a8 e0e8      	LDI  R30,LOW(8)
                 _0x204000B:
0008a9 2fae      	MOV  R26,R30
0008aa df33      	RCALL _pcd8544_wrcmd
                 _0x212000C:
0008ab 9621      	ADIW R28,1
0008ac 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
0008ad 940e 116e 	CALL __SAVELOCR4
0008af e030      	LDI  R19,0
                +
0008b0 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
0008b2 30e0      	CPI  R30,0
0008b3 f009      	BREQ _0x204000D
0008b4 ef3f      	LDI  R19,LOW(255)
                 _0x204000D:
0008b5 e0e0      	LDI  R30,LOW(0)
0008b6 93ea      	ST   -Y,R30
0008b7 e0a0      	LDI  R26,LOW(0)
0008b8 df46      	RCALL _pcd8544_gotoxy
                +
0008b9 ef08     +LDI R16 , LOW ( 504 )
0008ba e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x204000E:
0008bb 01f8      	MOVW R30,R16
                +
0008bc 5001     +SUBI R16 , LOW ( 1 )
0008bd 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0008be 9730      	SBIW R30,0
0008bf f019      	BREQ _0x2040010
0008c0 2fa3      	MOV  R26,R19
0008c1 df58      	RCALL _pcd8544_wrbyte
0008c2 cff8      	RJMP _0x204000E
                 _0x2040010:
0008c3 e0e0      	LDI  R30,LOW(0)
0008c4 93ea      	ST   -Y,R30
0008c5 e0a0      	LDI  R26,LOW(0)
0008c6 d384      	RCALL _glcd_moveto
0008c7 940e 1175 	CALL __LOADLOCR4
                 _0x212000B:
0008c9 9624      	ADIW R28,4
0008ca 9508      	RET
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
0008cb 93aa      	ST   -Y,R26
0008cc 931a      	ST   -Y,R17
0008cd 930a      	ST   -Y,R16
0008ce 81ac      	LDD  R26,Y+4
0008cf 35a4      	CPI  R26,LOW(0x54)
0008d0 f418      	BRSH _0x2040012
0008d1 81ab      	LDD  R26,Y+3
0008d2 33a0      	CPI  R26,LOW(0x30)
0008d3 f010      	BRLO _0x2040011
                 _0x2040012:
0008d4 940c 0d83 	JMP  _0x2120004
                 _0x2040011:
0008d6 81ec      	LDD  R30,Y+4
0008d7 93ea      	ST   -Y,R30
0008d8 81ac      	LDD  R26,Y+4
0008d9 df32      	RCALL _pcd8544_rdbyte
0008da 2f1e      	MOV  R17,R30
0008db 81eb      	LDD  R30,Y+3
0008dc 70e7      	ANDI R30,LOW(0x7)
0008dd e0a1      	LDI  R26,LOW(1)
0008de 940e 1121 	CALL __LSLB12
0008e0 2f0e      	MOV  R16,R30
0008e1 81ea      	LDD  R30,Y+2
0008e2 30e0      	CPI  R30,0
0008e3 f011      	BREQ _0x2040014
0008e4 2b10      	OR   R17,R16
0008e5 c003      	RJMP _0x2040015
                 _0x2040014:
0008e6 2fe0      	MOV  R30,R16
0008e7 95e0      	COM  R30
0008e8 231e      	AND  R17,R30
                 _0x2040015:
0008e9 2fa1      	MOV  R26,R17
0008ea df2f      	RCALL _pcd8544_wrbyte
0008eb 940c 0d83 	JMP  _0x2120004
                 ; .FEND
                 _pcd8544_wrmasked_G102:
                 ; .FSTART _pcd8544_wrmasked_G102
0008ed 93aa      	ST   -Y,R26
0008ee 931a      	ST   -Y,R17
0008ef 81ed      	LDD  R30,Y+5
0008f0 93ea      	ST   -Y,R30
0008f1 81ad      	LDD  R26,Y+5
0008f2 df19      	RCALL _pcd8544_rdbyte
0008f3 2f1e      	MOV  R17,R30
0008f4 81e9      	LDD  R30,Y+1
0008f5 30e7      	CPI  R30,LOW(0x7)
0008f6 f011      	BREQ _0x2040020
0008f7 30e8      	CPI  R30,LOW(0x8)
0008f8 f439      	BRNE _0x2040021
                 _0x2040020:
0008f9 81eb      	LDD  R30,Y+3
0008fa 93ea      	ST   -Y,R30
0008fb 81aa      	LDD  R26,Y+2
0008fc 940e 0efa 	CALL _glcd_mappixcolor1bit
0008fe 83eb      	STD  Y+3,R30
0008ff c008      	RJMP _0x2040022
                 _0x2040021:
000900 30e3      	CPI  R30,LOW(0x3)
000901 f421      	BRNE _0x2040024
000902 81eb      	LDD  R30,Y+3
000903 95e0      	COM  R30
000904 83eb      	STD  Y+3,R30
000905 c002      	RJMP _0x2040025
                 _0x2040024:
000906 30e0      	CPI  R30,0
000907 f421      	BRNE _0x2040026
                 _0x2040025:
                 _0x2040022:
000908 81ea      	LDD  R30,Y+2
000909 95e0      	COM  R30
00090a 231e      	AND  R17,R30
00090b c002      	RJMP _0x2040027
                 _0x2040026:
00090c 30e2      	CPI  R30,LOW(0x2)
00090d f429      	BRNE _0x2040028
                 _0x2040027:
00090e 81ea      	LDD  R30,Y+2
00090f 81ab      	LDD  R26,Y+3
000910 23ea      	AND  R30,R26
000911 2b1e      	OR   R17,R30
000912 c00e      	RJMP _0x204001E
                 _0x2040028:
000913 30e1      	CPI  R30,LOW(0x1)
000914 f429      	BRNE _0x2040029
000915 81ea      	LDD  R30,Y+2
000916 81ab      	LDD  R26,Y+3
000917 23ea      	AND  R30,R26
000918 271e      	EOR  R17,R30
000919 c007      	RJMP _0x204001E
                 _0x2040029:
00091a 30e4      	CPI  R30,LOW(0x4)
00091b f429      	BRNE _0x204001E
00091c 81ea      	LDD  R30,Y+2
00091d 95e0      	COM  R30
00091e 81ab      	LDD  R26,Y+3
00091f 2bea      	OR   R30,R26
000920 231e      	AND  R17,R30
                 _0x204001E:
000921 2fa1      	MOV  R26,R17
000922 def7      	RCALL _pcd8544_wrbyte
000923 8118      	LDD  R17,Y+0
                 _0x212000A:
000924 9626      	ADIW R28,6
000925 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
000926 93aa      	ST   -Y,R26
000927 9723      	SBIW R28,3
000928 940e 116c 	CALL __SAVELOCR6
00092a 89a8      	LDD  R26,Y+16
00092b 35a4      	CPI  R26,LOW(0x54)
00092c f448      	BRSH _0x204002C
00092d 85af      	LDD  R26,Y+15
00092e 33a0      	CPI  R26,LOW(0x30)
00092f f430      	BRSH _0x204002C
000930 85ae      	LDD  R26,Y+14
000931 30a0      	CPI  R26,LOW(0x0)
000932 f019      	BREQ _0x204002C
000933 85ad      	LDD  R26,Y+13
000934 30a0      	CPI  R26,LOW(0x0)
000935 f409      	BRNE _0x204002B
                 _0x204002C:
000936 c1d5      	RJMP _0x2120009
                 _0x204002B:
000937 85ee      	LDD  R30,Y+14
000938 87e8      	STD  Y+8,R30
000939 89a8      	LDD  R26,Y+16
00093a 27bb      	CLR  R27
00093b 85ee      	LDD  R30,Y+14
00093c e0f0      	LDI  R31,0
00093d 0fae      	ADD  R26,R30
00093e 1fbf      	ADC  R27,R31
00093f 35a5      	CPI  R26,LOW(0x55)
000940 e0e0      	LDI  R30,HIGH(0x55)
000941 07be      	CPC  R27,R30
000942 f020      	BRLO _0x204002E
000943 89a8      	LDD  R26,Y+16
000944 e5e4      	LDI  R30,LOW(84)
000945 1bea      	SUB  R30,R26
000946 87ee      	STD  Y+14,R30
                 _0x204002E:
000947 852d      	LDD  R18,Y+13
000948 85af      	LDD  R26,Y+15
000949 27bb      	CLR  R27
00094a 85ed      	LDD  R30,Y+13
00094b e0f0      	LDI  R31,0
00094c 0fae      	ADD  R26,R30
00094d 1fbf      	ADC  R27,R31
00094e 97d1      	SBIW R26,49
00094f f020      	BRLO _0x204002F
000950 85af      	LDD  R26,Y+15
000951 e3e0      	LDI  R30,LOW(48)
000952 1bea      	SUB  R30,R26
000953 87ed      	STD  Y+13,R30
                 _0x204002F:
000954 85a9      	LDD  R26,Y+9
000955 30a6      	CPI  R26,LOW(0x6)
000956 f009      	BREQ PC+2
000957 c05b      	RJMP _0x2040030
000958 85ec      	LDD  R30,Y+12
000959 30e1      	CPI  R30,LOW(0x1)
00095a f409      	BRNE _0x2040034
00095b c1b0      	RJMP _0x2120009
                 _0x2040034:
00095c 30e3      	CPI  R30,LOW(0x3)
00095d f439      	BRNE _0x2040037
                +
00095e 91e0 0697+LDS R30 , _glcd_state + ( 27 )
000960 91f0 0698+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000962 9730      	SBIW R30,0
000963 f409      	BRNE _0x2040036
000964 c1a7      	RJMP _0x2120009
                 _0x2040036:
                 _0x2040037:
000965 8508      	LDD  R16,Y+8
000966 85ed      	LDD  R30,Y+13
000967 95e6      	LSR  R30
000968 95e6      	LSR  R30
000969 95e6      	LSR  R30
00096a 2f3e      	MOV  R19,R30
00096b 2fe2      	MOV  R30,R18
00096c 70e7      	ANDI R30,LOW(0x7)
00096d f419      	BRNE _0x2040039
00096e 85ad      	LDD  R26,Y+13
00096f 172a      	CP   R18,R26
000970 f0e9      	BREQ _0x2040038
                 _0x2040039:
000971 2fa0      	MOV  R26,R16
000972 27bb      	CLR  R27
000973 2fe3      	MOV  R30,R19
000974 e0f0      	LDI  R31,0
000975 940e 1136 	CALL __MULW12U
000977 85aa      	LDD  R26,Y+10
000978 85bb      	LDD  R27,Y+10+1
000979 940e 1065 	CALL SUBOPT_0x28
00097b 9526      	LSR  R18
00097c 9526      	LSR  R18
00097d 9526      	LSR  R18
00097e 2f53      	MOV  R21,R19
                 _0x204003B:
00097f 935f      	PUSH R21
000980 5f5f      	SUBI R21,-1
000981 2fe2      	MOV  R30,R18
000982 91af      	POP  R26
000983 17ea      	CP   R30,R26
000984 f048      	BRLO _0x204003D
000985 2f10      	MOV  R17,R16
                 _0x204003E:
000986 2fe1      	MOV  R30,R17
000987 5011      	SUBI R17,1
000988 30e0      	CPI  R30,0
000989 f019      	BREQ _0x2040040
00098a 940e 106a 	CALL SUBOPT_0x29
00098c cff9      	RJMP _0x204003E
                 _0x2040040:
00098d cff1      	RJMP _0x204003B
                 _0x204003D:
                 _0x2040038:
00098e 85ae      	LDD  R26,Y+14
00098f 170a      	CP   R16,R26
000990 f111      	BREQ _0x2040041
000991 85ee      	LDD  R30,Y+14
000992 85aa      	LDD  R26,Y+10
000993 85bb      	LDD  R27,Y+10+1
000994 e0f0      	LDI  R31,0
000995 940e 1065 	CALL SUBOPT_0x28
000997 85ed      	LDD  R30,Y+13
000998 70e7      	ANDI R30,LOW(0x7)
000999 f009      	BREQ _0x2040042
00099a 5f3f      	SUBI R19,-LOW(1)
                 _0x2040042:
00099b e020      	LDI  R18,LOW(0)
                 _0x2040043:
00099c 932f      	PUSH R18
00099d 5f2f      	SUBI R18,-1
00099e 2fe3      	MOV  R30,R19
00099f 91af      	POP  R26
0009a0 17ae      	CP   R26,R30
0009a1 f488      	BRSH _0x2040045
0009a2 851e      	LDD  R17,Y+14
                 _0x2040046:
0009a3 931f      	PUSH R17
0009a4 5f1f      	SUBI R17,-1
0009a5 2fe0      	MOV  R30,R16
0009a6 91af      	POP  R26
0009a7 17ae      	CP   R26,R30
0009a8 f418      	BRSH _0x2040048
0009a9 940e 106a 	CALL SUBOPT_0x29
0009ab cff7      	RJMP _0x2040046
                 _0x2040048:
0009ac 85ee      	LDD  R30,Y+14
0009ad 81ae      	LDD  R26,Y+6
0009ae 81bf      	LDD  R27,Y+6+1
0009af e0f0      	LDI  R31,0
0009b0 940e 1065 	CALL SUBOPT_0x28
0009b2 cfe9      	RJMP _0x2040043
                 _0x2040045:
                 _0x2040041:
                 _0x2040030:
0009b3 85ef      	LDD  R30,Y+15
0009b4 70e7      	ANDI R30,LOW(0x7)
0009b5 2f3e      	MOV  R19,R30
                 _0x2040049:
0009b6 85ed      	LDD  R30,Y+13
0009b7 30e0      	CPI  R30,0
0009b8 f409      	BRNE PC+2
0009b9 c152      	RJMP _0x204004B
0009ba 85ea      	LDD  R30,Y+10
0009bb 85fb      	LDD  R31,Y+10+1
0009bc 83ee      	STD  Y+6,R30
0009bd 83ff      	STD  Y+6+1,R31
0009be e010      	LDI  R17,LOW(0)
0009bf 8908      	LDD  R16,Y+16
0009c0 3030      	CPI  R19,0
0009c1 f009      	BREQ PC+2
0009c2 c066      	RJMP _0x204004C
0009c3 85ad      	LDD  R26,Y+13
0009c4 30a8      	CPI  R26,LOW(0x8)
0009c5 f408      	BRSH PC+2
0009c6 c05d      	RJMP _0x204004D
0009c7 85e9      	LDD  R30,Y+9
0009c8 30e0      	CPI  R30,0
0009c9 f011      	BREQ _0x2040052
0009ca 30e3      	CPI  R30,LOW(0x3)
0009cb f409      	BRNE _0x2040053
                 _0x2040052:
0009cc c002      	RJMP _0x2040054
                 _0x2040053:
0009cd 30e7      	CPI  R30,LOW(0x7)
0009ce f409      	BRNE _0x2040055
                 _0x2040054:
0009cf c002      	RJMP _0x2040056
                 _0x2040055:
0009d0 30e8      	CPI  R30,LOW(0x8)
0009d1 f409      	BRNE _0x2040057
                 _0x2040056:
0009d2 c002      	RJMP _0x2040058
                 _0x2040057:
0009d3 30e9      	CPI  R30,LOW(0x9)
0009d4 f409      	BRNE _0x2040059
                 _0x2040058:
0009d5 c002      	RJMP _0x204005A
                 _0x2040059:
0009d6 30ea      	CPI  R30,LOW(0xA)
0009d7 f421      	BRNE _0x204005B
                 _0x204005A:
0009d8 930a      	ST   -Y,R16
0009d9 89a8      	LDD  R26,Y+16
0009da de24      	RCALL _pcd8544_gotoxy
0009db c004      	RJMP _0x2040050
                 _0x204005B:
0009dc 30e6      	CPI  R30,LOW(0x6)
0009dd f411      	BRNE _0x2040050
0009de 940e 1077 	CALL SUBOPT_0x2A
                 _0x2040050:
                 _0x204005D:
0009e0 931f      	PUSH R17
0009e1 5f1f      	SUBI R17,-1
0009e2 85ee      	LDD  R30,Y+14
0009e3 91af      	POP  R26
0009e4 17ae      	CP   R26,R30
0009e5 f5b8      	BRSH _0x204005F
0009e6 85a9      	LDD  R26,Y+9
0009e7 30a6      	CPI  R26,LOW(0x6)
0009e8 f469      	BRNE _0x2040060
0009e9 940e 107b 	CALL SUBOPT_0x2B
0009eb 93fa      	ST   -Y,R31
0009ec 93ea      	ST   -Y,R30
0009ed 940e 1062 	CALL SUBOPT_0x27
0009ef 9731      	SBIW R30,1
0009f0 5ae5      	SUBI R30,LOW(-_gfx_buffer_G102)
0009f1 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G102)
0009f2 81a0      	LD   R26,Z
0009f3 940e 0f41 	CALL _glcd_writemem
0009f5 c026      	RJMP _0x2040061
                 _0x2040060:
0009f6 85e9      	LDD  R30,Y+9
0009f7 30e9      	CPI  R30,LOW(0x9)
0009f8 f411      	BRNE _0x2040065
0009f9 e050      	LDI  R21,LOW(0)
0009fa c00e      	RJMP _0x2040066
                 _0x2040065:
0009fb 30ea      	CPI  R30,LOW(0xA)
0009fc f411      	BRNE _0x2040064
0009fd ef5f      	LDI  R21,LOW(255)
0009fe c00a      	RJMP _0x2040066
                 _0x2040064:
0009ff 940e 107b 	CALL SUBOPT_0x2B
000a01 940e 1084 	CALL SUBOPT_0x2C
000a03 2f5e      	MOV  R21,R30
000a04 85e9      	LDD  R30,Y+9
000a05 30e7      	CPI  R30,LOW(0x7)
000a06 f011      	BREQ _0x204006D
000a07 30e8      	CPI  R30,LOW(0x8)
000a08 f421      	BRNE _0x204006E
                 _0x204006D:
                 _0x2040066:
000a09 940e 108a 	CALL SUBOPT_0x2D
000a0b 2f5e      	MOV  R21,R30
000a0c c006      	RJMP _0x204006F
                 _0x204006E:
000a0d 30e3      	CPI  R30,LOW(0x3)
000a0e f411      	BRNE _0x2040071
000a0f 9550      	COM  R21
000a10 c002      	RJMP _0x2040072
                 _0x2040071:
000a11 30e0      	CPI  R30,0
000a12 f419      	BRNE _0x2040074
                 _0x2040072:
                 _0x204006F:
000a13 2fa5      	MOV  R26,R21
000a14 ddce      	RCALL _pcd8544_wrdata_G102
000a15 c006      	RJMP _0x204006B
                 _0x2040074:
000a16 940e 108e 	CALL SUBOPT_0x2E
000a18 efef      	LDI  R30,LOW(255)
000a19 93ea      	ST   -Y,R30
000a1a 85ad      	LDD  R26,Y+13
000a1b ded1      	RCALL _pcd8544_wrmasked_G102
                 _0x204006B:
                 _0x2040061:
000a1c cfc3      	RJMP _0x204005D
                 _0x204005F:
000a1d 85ef      	LDD  R30,Y+15
000a1e 5fe8      	SUBI R30,-LOW(8)
000a1f 87ef      	STD  Y+15,R30
000a20 85ed      	LDD  R30,Y+13
000a21 50e8      	SUBI R30,LOW(8)
000a22 87ed      	STD  Y+13,R30
000a23 c0df      	RJMP _0x2040075
                 _0x204004D:
000a24 855d      	LDD  R21,Y+13
000a25 e020      	LDI  R18,LOW(0)
000a26 e0e0      	LDI  R30,LOW(0)
000a27 87ed      	STD  Y+13,R30
000a28 c081      	RJMP _0x2040076
                 _0x204004C:
000a29 2fe3      	MOV  R30,R19
000a2a 85ad      	LDD  R26,Y+13
000a2b 0fae      	ADD  R26,R30
000a2c 30a9      	CPI  R26,LOW(0x9)
000a2d f420      	BRSH _0x2040077
000a2e 852d      	LDD  R18,Y+13
000a2f e0e0      	LDI  R30,LOW(0)
000a30 87ed      	STD  Y+13,R30
000a31 c003      	RJMP _0x2040078
                 _0x2040077:
000a32 e0e8      	LDI  R30,LOW(8)
000a33 1be3      	SUB  R30,R19
000a34 2f2e      	MOV  R18,R30
                 _0x2040078:
000a35 933a      	ST   -Y,R19
000a36 2fa2      	MOV  R26,R18
000a37 940e 0eef 	CALL _glcd_getmask
000a39 2f4e      	MOV  R20,R30
000a3a 85e9      	LDD  R30,Y+9
000a3b 30e6      	CPI  R30,LOW(0x6)
000a3c f529      	BRNE _0x204007C
000a3d 940e 1077 	CALL SUBOPT_0x2A
                 _0x204007D:
000a3f 931f      	PUSH R17
000a40 5f1f      	SUBI R17,-1
000a41 85ee      	LDD  R30,Y+14
000a42 91af      	POP  R26
000a43 17ae      	CP   R26,R30
000a44 f4e0      	BRSH _0x204007F
000a45 940e 1062 	CALL SUBOPT_0x27
000a47 9731      	SBIW R30,1
000a48 5ae5      	SUBI R30,LOW(-_gfx_buffer_G102)
000a49 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G102)
000a4a 81e0      	LD   R30,Z
000a4b 23e4      	AND  R30,R20
000a4c 2fae      	MOV  R26,R30
000a4d 2fe3      	MOV  R30,R19
000a4e 940e 1129 	CALL __LSRB12
000a50 940e 1094 	CALL SUBOPT_0x2F
000a52 2fe3      	MOV  R30,R19
000a53 2fa4      	MOV  R26,R20
000a54 940e 1129 	CALL __LSRB12
000a56 95e0      	COM  R30
000a57 21e1      	AND  R30,R1
000a58 2b5e      	OR   R21,R30
000a59 940e 107b 	CALL SUBOPT_0x2B
000a5b 93fa      	ST   -Y,R31
000a5c 93ea      	ST   -Y,R30
000a5d 2fa5      	MOV  R26,R21
000a5e 940e 0f41 	CALL _glcd_writemem
000a60 cfde      	RJMP _0x204007D
                 _0x204007F:
000a61 c02c      	RJMP _0x204007B
                 _0x204007C:
000a62 30e9      	CPI  R30,LOW(0x9)
000a63 f411      	BRNE _0x2040080
000a64 e050      	LDI  R21,LOW(0)
000a65 c003      	RJMP _0x2040081
                 _0x2040080:
000a66 30ea      	CPI  R30,LOW(0xA)
000a67 f4a9      	BRNE _0x2040087
000a68 ef5f      	LDI  R21,LOW(255)
                 _0x2040081:
000a69 940e 108a 	CALL SUBOPT_0x2D
000a6b 2fae      	MOV  R26,R30
000a6c 2fe3      	MOV  R30,R19
000a6d 940e 1121 	CALL __LSLB12
000a6f 2f5e      	MOV  R21,R30
                 _0x2040084:
000a70 931f      	PUSH R17
000a71 5f1f      	SUBI R17,-1
000a72 85ee      	LDD  R30,Y+14
000a73 91af      	POP  R26
000a74 17ae      	CP   R26,R30
000a75 f430      	BRSH _0x2040086
000a76 940e 108e 	CALL SUBOPT_0x2E
000a78 934a      	ST   -Y,R20
000a79 e0a0      	LDI  R26,LOW(0)
000a7a de72      	RCALL _pcd8544_wrmasked_G102
000a7b cff4      	RJMP _0x2040084
                 _0x2040086:
000a7c c011      	RJMP _0x204007B
                 _0x2040087:
                 _0x2040088:
000a7d 931f      	PUSH R17
000a7e 5f1f      	SUBI R17,-1
000a7f 85ee      	LDD  R30,Y+14
000a80 91af      	POP  R26
000a81 17ae      	CP   R26,R30
000a82 f458      	BRSH _0x204008A
000a83 940e 109f 	CALL SUBOPT_0x30
000a85 2fae      	MOV  R26,R30
000a86 2fe3      	MOV  R30,R19
000a87 940e 1121 	CALL __LSLB12
000a89 93ea      	ST   -Y,R30
000a8a 934a      	ST   -Y,R20
000a8b 85ad      	LDD  R26,Y+13
000a8c de60      	RCALL _pcd8544_wrmasked_G102
000a8d cfef      	RJMP _0x2040088
                 _0x204008A:
                 _0x204007B:
000a8e 85ed      	LDD  R30,Y+13
000a8f 30e0      	CPI  R30,0
000a90 f409      	BRNE _0x204008B
000a91 c07a      	RJMP _0x204004B
                 _0x204008B:
000a92 85ad      	LDD  R26,Y+13
000a93 30a8      	CPI  R26,LOW(0x8)
000a94 f428      	BRSH _0x204008C
000a95 85ed      	LDD  R30,Y+13
000a96 1be2      	SUB  R30,R18
000a97 2f5e      	MOV  R21,R30
000a98 e0e0      	LDI  R30,LOW(0)
000a99 c003      	RJMP _0x20400A1
                 _0x204008C:
000a9a 2f53      	MOV  R21,R19
000a9b 85ed      	LDD  R30,Y+13
000a9c 50e8      	SUBI R30,LOW(8)
                 _0x20400A1:
000a9d 87ed      	STD  Y+13,R30
000a9e e010      	LDI  R17,LOW(0)
000a9f 85ef      	LDD  R30,Y+15
000aa0 5fe8      	SUBI R30,-LOW(8)
000aa1 87ef      	STD  Y+15,R30
000aa2 e0e8      	LDI  R30,LOW(8)
000aa3 1be3      	SUB  R30,R19
000aa4 2f2e      	MOV  R18,R30
000aa5 8908      	LDD  R16,Y+16
000aa6 85ea      	LDD  R30,Y+10
000aa7 85fb      	LDD  R31,Y+10+1
000aa8 83ee      	STD  Y+6,R30
000aa9 83ff      	STD  Y+6+1,R31
                 _0x2040076:
000aaa 2fe5      	MOV  R30,R21
000aab e0f0      	LDI  R31,0
000aac 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000aad 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000aae 9144      	LPM  R20,Z
000aaf 85e9      	LDD  R30,Y+9
000ab0 30e6      	CPI  R30,LOW(0x6)
000ab1 f529      	BRNE _0x2040091
000ab2 940e 1077 	CALL SUBOPT_0x2A
                 _0x2040092:
000ab4 931f      	PUSH R17
000ab5 5f1f      	SUBI R17,-1
000ab6 85ee      	LDD  R30,Y+14
000ab7 91af      	POP  R26
000ab8 17ae      	CP   R26,R30
000ab9 f4e0      	BRSH _0x2040094
000aba 940e 1062 	CALL SUBOPT_0x27
000abc 9731      	SBIW R30,1
000abd 5ae5      	SUBI R30,LOW(-_gfx_buffer_G102)
000abe 4ff7      	SBCI R31,HIGH(-_gfx_buffer_G102)
000abf 81e0      	LD   R30,Z
000ac0 23e4      	AND  R30,R20
000ac1 2fae      	MOV  R26,R30
000ac2 2fe2      	MOV  R30,R18
000ac3 940e 1121 	CALL __LSLB12
000ac5 940e 1094 	CALL SUBOPT_0x2F
000ac7 2fe2      	MOV  R30,R18
000ac8 2fa4      	MOV  R26,R20
000ac9 940e 1121 	CALL __LSLB12
000acb 95e0      	COM  R30
000acc 21e1      	AND  R30,R1
000acd 2b5e      	OR   R21,R30
000ace 940e 107b 	CALL SUBOPT_0x2B
000ad0 93fa      	ST   -Y,R31
000ad1 93ea      	ST   -Y,R30
000ad2 2fa5      	MOV  R26,R21
000ad3 940e 0f41 	CALL _glcd_writemem
000ad5 cfde      	RJMP _0x2040092
                 _0x2040094:
000ad6 c02c      	RJMP _0x2040090
                 _0x2040091:
000ad7 30e9      	CPI  R30,LOW(0x9)
000ad8 f411      	BRNE _0x2040095
000ad9 e050      	LDI  R21,LOW(0)
000ada c003      	RJMP _0x2040096
                 _0x2040095:
000adb 30ea      	CPI  R30,LOW(0xA)
000adc f4a9      	BRNE _0x204009C
000add ef5f      	LDI  R21,LOW(255)
                 _0x2040096:
000ade 940e 108a 	CALL SUBOPT_0x2D
000ae0 2fae      	MOV  R26,R30
000ae1 2fe2      	MOV  R30,R18
000ae2 940e 1129 	CALL __LSRB12
000ae4 2f5e      	MOV  R21,R30
                 _0x2040099:
000ae5 931f      	PUSH R17
000ae6 5f1f      	SUBI R17,-1
000ae7 85ee      	LDD  R30,Y+14
000ae8 91af      	POP  R26
000ae9 17ae      	CP   R26,R30
000aea f430      	BRSH _0x204009B
000aeb 940e 108e 	CALL SUBOPT_0x2E
000aed 934a      	ST   -Y,R20
000aee e0a0      	LDI  R26,LOW(0)
000aef ddfd      	RCALL _pcd8544_wrmasked_G102
000af0 cff4      	RJMP _0x2040099
                 _0x204009B:
000af1 c011      	RJMP _0x2040090
                 _0x204009C:
                 _0x204009D:
000af2 931f      	PUSH R17
000af3 5f1f      	SUBI R17,-1
000af4 85ee      	LDD  R30,Y+14
000af5 91af      	POP  R26
000af6 17ae      	CP   R26,R30
000af7 f458      	BRSH _0x204009F
000af8 940e 109f 	CALL SUBOPT_0x30
000afa 2fae      	MOV  R26,R30
000afb 2fe2      	MOV  R30,R18
000afc 940e 1129 	CALL __LSRB12
000afe 93ea      	ST   -Y,R30
000aff 934a      	ST   -Y,R20
000b00 85ad      	LDD  R26,Y+13
000b01 ddeb      	RCALL _pcd8544_wrmasked_G102
000b02 cfef      	RJMP _0x204009D
                 _0x204009F:
                 _0x2040090:
                 _0x2040075:
000b03 85e8      	LDD  R30,Y+8
000b04 85aa      	LDD  R26,Y+10
000b05 85bb      	LDD  R27,Y+10+1
000b06 e0f0      	LDI  R31,0
000b07 0fea      	ADD  R30,R26
000b08 1ffb      	ADC  R31,R27
000b09 87ea      	STD  Y+10,R30
000b0a 87fb      	STD  Y+10+1,R31
000b0b ceaa      	RJMP _0x2040049
                 _0x204004B:
                 _0x2120009:
000b0c 940e 1173 	CALL __LOADLOCR6
000b0e 9661      	ADIW R28,17
000b0f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
000b10 940e 0f60 	CALL SUBOPT_0x0
000b12 940e 1168 	CALL __CPW02
000b14 f024      	BRLT _0x2060003
000b15 e0e0      	LDI  R30,LOW(0)
000b16 e0f0      	LDI  R31,HIGH(0)
000b17 940c 0ef8 	JMP  _0x2120002
                 _0x2060003:
000b19 81a8      	LD   R26,Y
000b1a 81b9      	LDD  R27,Y+1
000b1b 35a4      	CPI  R26,LOW(0x54)
000b1c e0e0      	LDI  R30,HIGH(0x54)
000b1d 07be      	CPC  R27,R30
000b1e f024      	BRLT _0x2060004
000b1f e5e3      	LDI  R30,LOW(83)
000b20 e0f0      	LDI  R31,HIGH(83)
000b21 940c 0ef8 	JMP  _0x2120002
                 _0x2060004:
000b23 81e8      	LD   R30,Y
000b24 81f9      	LDD  R31,Y+1
000b25 940c 0ef8 	JMP  _0x2120002
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000b27 940e 0f60 	CALL SUBOPT_0x0
000b29 940e 1168 	CALL __CPW02
000b2b f024      	BRLT _0x2060005
000b2c e0e0      	LDI  R30,LOW(0)
000b2d e0f0      	LDI  R31,HIGH(0)
000b2e 940c 0ef8 	JMP  _0x2120002
                 _0x2060005:
000b30 81a8      	LD   R26,Y
000b31 81b9      	LDD  R27,Y+1
000b32 97d0      	SBIW R26,48
000b33 f024      	BRLT _0x2060006
000b34 e2ef      	LDI  R30,LOW(47)
000b35 e0f0      	LDI  R31,HIGH(47)
000b36 940c 0ef8 	JMP  _0x2120002
                 _0x2060006:
000b38 81e8      	LD   R30,Y
000b39 81f9      	LDD  R31,Y+1
000b3a 940c 0ef8 	JMP  _0x2120002
                 ; .FEND
                 _glcd_getcharw_G103:
                 ; .FSTART _glcd_getcharw_G103
000b3c 93ba      	ST   -Y,R27
000b3d 93aa      	ST   -Y,R26
000b3e 9723      	SBIW R28,3
000b3f 940e 10ac 	CALL SUBOPT_0x31
000b41 018f      	MOVW R16,R30
000b42 2e00      	MOV  R0,R16
000b43 2a01      	OR   R0,R17
000b44 f419      	BRNE _0x206000B
000b45 e0e0      	LDI  R30,LOW(0)
000b46 e0f0      	LDI  R31,HIGH(0)
000b47 c05f      	RJMP _0x2120008
                 _0x206000B:
000b48 940e 10b3 	CALL SUBOPT_0x32
000b4a 820f      	STD  Y+7,R0
000b4b 940e 10b3 	CALL SUBOPT_0x32
000b4d 820e      	STD  Y+6,R0
000b4e 940e 10b3 	CALL SUBOPT_0x32
000b50 8608      	STD  Y+8,R0
000b51 85eb      	LDD  R30,Y+11
000b52 85a8      	LDD  R26,Y+8
000b53 17ea      	CP   R30,R26
000b54 f418      	BRSH _0x206000C
000b55 e0e0      	LDI  R30,LOW(0)
000b56 e0f0      	LDI  R31,HIGH(0)
000b57 c04f      	RJMP _0x2120008
                 _0x206000C:
000b58 01f8      	MOVW R30,R16
                +
000b59 5f0f     +SUBI R16 , LOW ( - 1 )
000b5a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000b5b 9154      	LPM  R21,Z
000b5c 85a8      	LDD  R26,Y+8
000b5d 27bb      	CLR  R27
000b5e 27ee      	CLR  R30
000b5f 0fa5      	ADD  R26,R21
000b60 1fbe      	ADC  R27,R30
000b61 85eb      	LDD  R30,Y+11
000b62 e0f0      	LDI  R31,0
000b63 17ea      	CP   R30,R26
000b64 07fb      	CPC  R31,R27
000b65 f018      	BRLO _0x206000D
000b66 e0e0      	LDI  R30,LOW(0)
000b67 e0f0      	LDI  R31,HIGH(0)
000b68 c03e      	RJMP _0x2120008
                 _0x206000D:
000b69 81ee      	LDD  R30,Y+6
000b6a 95e6      	LSR  R30
000b6b 95e6      	LSR  R30
000b6c 95e6      	LSR  R30
000b6d 2f4e      	MOV  R20,R30
000b6e 81ee      	LDD  R30,Y+6
000b6f 70e7      	ANDI R30,LOW(0x7)
000b70 f009      	BREQ _0x206000E
000b71 5f4f      	SUBI R20,-LOW(1)
                 _0x206000E:
000b72 81ef      	LDD  R30,Y+7
000b73 30e0      	CPI  R30,0
000b74 f0a1      	BREQ _0x206000F
000b75 85a9      	LDD  R26,Y+9
000b76 85ba      	LDD  R27,Y+9+1
000b77 93ec      	ST   X,R30
000b78 85a8      	LDD  R26,Y+8
000b79 85eb      	LDD  R30,Y+11
000b7a 1bea      	SUB  R30,R26
000b7b e0f0      	LDI  R31,0
000b7c 01df      	MOVW R26,R30
000b7d 81ef      	LDD  R30,Y+7
000b7e e0f0      	LDI  R31,0
000b7f 940e 1136 	CALL __MULW12U
000b81 01df      	MOVW R26,R30
000b82 2fe4      	MOV  R30,R20
000b83 e0f0      	LDI  R31,0
000b84 940e 1136 	CALL __MULW12U
000b86 0fe0      	ADD  R30,R16
000b87 1ff1      	ADC  R31,R17
000b88 c01e      	RJMP _0x2120008
                 _0x206000F:
000b89 0198      	MOVW R18,R16
000b8a 2fe5      	MOV  R30,R21
000b8b e0f0      	LDI  R31,0
                +
000b8c 0f0e     +ADD R16 , R30
000b8d 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2060010:
000b8e 85a8      	LDD  R26,Y+8
000b8f 5faf      	SUBI R26,-LOW(1)
000b90 87a8      	STD  Y+8,R26
000b91 50a1      	SUBI R26,LOW(1)
000b92 85eb      	LDD  R30,Y+11
000b93 17ae      	CP   R26,R30
000b94 f460      	BRSH _0x2060012
000b95 01f9      	MOVW R30,R18
                +
000b96 5f2f     +SUBI R18 , LOW ( - 1 )
000b97 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000b98 91a4      	LPM  R26,Z
000b99 e0b0      	LDI  R27,0
000b9a 2fe4      	MOV  R30,R20
000b9b e0f0      	LDI  R31,0
000b9c 940e 1136 	CALL __MULW12U
                +
000b9e 0f0e     +ADD R16 , R30
000b9f 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000ba0 cfed      	RJMP _0x2060010
                 _0x2060012:
000ba1 01f9      	MOVW R30,R18
000ba2 91e4      	LPM  R30,Z
000ba3 85a9      	LDD  R26,Y+9
000ba4 85ba      	LDD  R27,Y+9+1
000ba5 93ec      	ST   X,R30
000ba6 01f8      	MOVW R30,R16
                 _0x2120008:
000ba7 940e 1173 	CALL __LOADLOCR6
000ba9 962c      	ADIW R28,12
000baa 9508      	RET
                 ; .FEND
                 _glcd_new_line_G103:
                 ; .FSTART _glcd_new_line_G103
000bab e0e0      	LDI  R30,LOW(0)
                +
000bac 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000bae 91a0 067f+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000bb0 27bb      	CLR  R27
000bb1 940e 10b8 	CALL SUBOPT_0x33
000bb3 e0f0      	LDI  R31,0
000bb4 0fae      	ADD  R26,R30
000bb5 1fbf      	ADC  R27,R31
                +
000bb6 91e0 0683+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000bb8 e0f0      	LDI  R31,0
000bb9 0fae      	ADD  R26,R30
000bba 1fbf      	ADC  R27,R31
000bbb df6b      	RCALL _glcd_clipy
                +
000bbc 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000bbe 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000bbf 93aa      	ST   -Y,R26
000bc0 9721      	SBIW R28,1
000bc1 940e 10ac 	CALL SUBOPT_0x31
000bc3 9730      	SBIW R30,0
000bc4 f409      	BRNE PC+2
000bc5 c055      	RJMP _0x206001F
000bc6 81af      	LDD  R26,Y+7
000bc7 30aa      	CPI  R26,LOW(0xA)
000bc8 f409      	BRNE _0x2060020
000bc9 c04f      	RJMP _0x2060021
                 _0x2060020:
000bca 81ef      	LDD  R30,Y+7
000bcb 93ea      	ST   -Y,R30
000bcc 01de      	MOVW R26,R28
000bcd 9617      	ADIW R26,7
000bce df6d      	RCALL _glcd_getcharw_G103
000bcf 01af      	MOVW R20,R30
000bd0 9730      	SBIW R30,0
000bd1 f409      	BRNE _0x2060022
000bd2 c04a      	RJMP _0x2120007
                 _0x2060022:
                +
000bd3 91e0 0682+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000bd5 81ae      	LDD  R26,Y+6
000bd6 0fea      	ADD  R30,R26
000bd7 2f3e      	MOV  R19,R30
                +
000bd8 91a0 067e+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000bda 27bb      	CLR  R27
000bdb e0f0      	LDI  R31,0
000bdc 0fea      	ADD  R30,R26
000bdd 1ffb      	ADC  R31,R27
000bde 018f      	MOVW R16,R30
                +
000bdf 3505     +CPI R16 , LOW ( 85 )
000be0 e0e0     +LDI R30 , HIGH ( 85 )
000be1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
000be2 f018      	BRLO _0x2060023
000be3 2f03      	MOV  R16,R19
000be4 2711      	CLR  R17
000be5 dfc5      	RCALL _glcd_new_line_G103
                 _0x2060023:
                +
000be6 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000be8 93ea      	ST   -Y,R30
                +
000be9 91e0 067f+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000beb 93ea      	ST   -Y,R30
000bec 85e8      	LDD  R30,Y+8
000bed 93ea      	ST   -Y,R30
000bee 940e 10b8 	CALL SUBOPT_0x33
000bf0 93ea      	ST   -Y,R30
000bf1 e0e1      	LDI  R30,LOW(1)
000bf2 93ea      	ST   -Y,R30
000bf3 935a      	ST   -Y,R21
000bf4 934a      	ST   -Y,R20
000bf5 e0a7      	LDI  R26,LOW(7)
000bf6 dd2f      	RCALL _glcd_block
                +
000bf7 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000bf9 81ae      	LDD  R26,Y+6
000bfa 0fea      	ADD  R30,R26
000bfb 93ea      	ST   -Y,R30
                +
000bfc 91e0 067f+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000bfe 93ea      	ST   -Y,R30
                +
000bff 91e0 0682+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000c01 93ea      	ST   -Y,R30
000c02 940e 10b8 	CALL SUBOPT_0x33
000c04 940e 10bf 	CALL SUBOPT_0x34
                +
000c06 91e0 067e+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
000c08 93ea      	ST   -Y,R30
                +
000c09 91a0 067f+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000c0b 940e 10b8 	CALL SUBOPT_0x33
000c0d 0fea      	ADD  R30,R26
000c0e 93ea      	ST   -Y,R30
000c0f 933a      	ST   -Y,R19
                +
000c10 91e0 0683+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000c12 940e 10bf 	CALL SUBOPT_0x34
000c14 e5e4      	LDI  R30,LOW(84)
000c15 e0f0      	LDI  R31,HIGH(84)
000c16 17e0      	CP   R30,R16
000c17 07f1      	CPC  R31,R17
000c18 f411      	BRNE _0x2060024
                 _0x2060021:
000c19 df91      	RCALL _glcd_new_line_G103
000c1a c002      	RJMP _0x2120007
                 _0x2060024:
                 _0x206001F:
                +
000c1b 9300 067e+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2120007:
000c1d 940e 1173 	CALL __LOADLOCR6
000c1f 9628      	ADIW R28,8
000c20 9508      	RET
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000c21 93ba      	ST   -Y,R27
000c22 93aa      	ST   -Y,R26
000c23 931a      	ST   -Y,R17
                 _0x206002E:
000c24 81a9      	LDD  R26,Y+1
000c25 81ba      	LDD  R27,Y+1+1
000c26 91ed      	LD   R30,X+
000c27 83a9      	STD  Y+1,R26
000c28 83ba      	STD  Y+1+1,R27
000c29 2f1e      	MOV  R17,R30
000c2a 30e0      	CPI  R30,0
000c2b f019      	BREQ _0x2060030
000c2c 2fa1      	MOV  R26,R17
000c2d df91      	RCALL _glcd_putchar
000c2e cff5      	RJMP _0x206002E
                 _0x2060030:
000c2f 8118      	LDD  R17,Y+0
000c30 c30e      	RJMP _0x2120001
                 ; .FEND
                 _glcd_putpixelm_G103:
                 ; .FSTART _glcd_putpixelm_G103
000c31 93aa      	ST   -Y,R26
000c32 81ea      	LDD  R30,Y+2
000c33 93ea      	ST   -Y,R30
000c34 81ea      	LDD  R30,Y+2
000c35 93ea      	ST   -Y,R30
                +
000c36 91e0 0685+LDS R30 , _glcd_state + ( 9 )
                 	__GETB1MN _glcd_state,9
000c38 81aa      	LDD  R26,Y+2
000c39 23ea      	AND  R30,R26
000c3a f019      	BREQ _0x206003E
000c3b 91e0 067c 	LDS  R30,_glcd_state
000c3d c002      	RJMP _0x206003F
                 _0x206003E:
                +
000c3e 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
                 _0x206003F:
000c40 2fae      	MOV  R26,R30
000c41 dc89      	RCALL _glcd_putpixel
000c42 81e8      	LD   R30,Y
000c43 0fee      	LSL  R30
000c44 83e8      	ST   Y,R30
000c45 30e0      	CPI  R30,0
000c46 f411      	BRNE _0x2060041
000c47 e0e1      	LDI  R30,LOW(1)
000c48 83e8      	ST   Y,R30
                 _0x2060041:
000c49 81e8      	LD   R30,Y
000c4a c2f4      	RJMP _0x2120001
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000c4b 93aa      	ST   -Y,R26
000c4c 81a9      	LDD  R26,Y+1
000c4d 27bb      	CLR  R27
000c4e dec1      	RCALL _glcd_clipx
                +
000c4f 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000c51 81a8      	LD   R26,Y
000c52 27bb      	CLR  R27
000c53 ded3      	RCALL _glcd_clipy
                +
000c54 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000c56 c2a1      	RJMP _0x2120002
                 ; .FEND
                 _glcd_line:
                 ; .FSTART _glcd_line
000c57 93aa      	ST   -Y,R26
000c58 972b      	SBIW R28,11
000c59 940e 116c 	CALL __SAVELOCR6
000c5b 89ac      	LDD  R26,Y+20
000c5c 27bb      	CLR  R27
000c5d deb2      	RCALL _glcd_clipx
000c5e 8bec      	STD  Y+20,R30
000c5f 89aa      	LDD  R26,Y+18
000c60 27bb      	CLR  R27
000c61 deae      	RCALL _glcd_clipx
000c62 8bea      	STD  Y+18,R30
000c63 89ab      	LDD  R26,Y+19
000c64 27bb      	CLR  R27
000c65 dec1      	RCALL _glcd_clipy
000c66 8beb      	STD  Y+19,R30
000c67 89a9      	LDD  R26,Y+17
000c68 27bb      	CLR  R27
000c69 debd      	RCALL _glcd_clipy
000c6a 8be9      	STD  Y+17,R30
000c6b 89ea      	LDD  R30,Y+18
                +
000c6c 93e0 067e+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000c6e 89e9      	LDD  R30,Y+17
                +
000c6f 93e0 067f+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000c71 e0e1      	LDI  R30,LOW(1)
000c72 87e8      	STD  Y+8,R30
000c73 89e9      	LDD  R30,Y+17
000c74 89ab      	LDD  R26,Y+19
000c75 17ea      	CP   R30,R26
000c76 f571      	BRNE _0x2060042
000c77 891c      	LDD  R17,Y+20
000c78 89aa      	LDD  R26,Y+18
000c79 171a      	CP   R17,R26
000c7a f431      	BRNE _0x2060043
000c7b 931a      	ST   -Y,R17
000c7c 89ec      	LDD  R30,Y+20
000c7d 93ea      	ST   -Y,R30
000c7e e0a1      	LDI  R26,LOW(1)
000c7f dfb1      	RCALL _glcd_putpixelm_G103
000c80 c0c8      	RJMP _0x2120006
                 _0x2060043:
000c81 89aa      	LDD  R26,Y+18
000c82 171a      	CP   R17,R26
000c83 f430      	BRSH _0x2060044
000c84 89ea      	LDD  R30,Y+18
000c85 1be1      	SUB  R30,R17
000c86 2f0e      	MOV  R16,R30
                +
000c87 e041     +LDI R20 , LOW ( 1 )
000c88 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000c89 c006      	RJMP _0x2060045
                 _0x2060044:
000c8a 89aa      	LDD  R26,Y+18
000c8b 2fe1      	MOV  R30,R17
000c8c 1bea      	SUB  R30,R26
000c8d 2f0e      	MOV  R16,R30
                +
000c8e ef4f     +LDI R20 , LOW ( - 1 )
000c8f ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
                 _0x2060045:
                 _0x2060047:
000c90 893b      	LDD  R19,Y+19
000c91 e0e0      	LDI  R30,LOW(0)
000c92 83ee      	STD  Y+6,R30
                 _0x2060049:
000c93 940e 10c9 	CALL SUBOPT_0x35
000c95 f438      	BRSH _0x206004B
000c96 931a      	ST   -Y,R17
000c97 933a      	ST   -Y,R19
000c98 9533      	INC  R19
000c99 85aa      	LDD  R26,Y+10
000c9a df96      	RCALL _glcd_putpixelm_G103
000c9b 83ef      	STD  Y+7,R30
000c9c cff6      	RJMP _0x2060049
                 _0x206004B:
000c9d 81ef      	LDD  R30,Y+7
000c9e 87e8      	STD  Y+8,R30
000c9f 0f14      	ADD  R17,R20
000ca0 2fe0      	MOV  R30,R16
000ca1 5001      	SUBI R16,1
000ca2 30e0      	CPI  R30,0
000ca3 f761      	BRNE _0x2060047
000ca4 c0a4      	RJMP _0x206004C
                 _0x2060042:
000ca5 89ea      	LDD  R30,Y+18
000ca6 89ac      	LDD  R26,Y+20
000ca7 17ea      	CP   R30,R26
000ca8 f539      	BRNE _0x206004D
000ca9 893b      	LDD  R19,Y+19
000caa 89a9      	LDD  R26,Y+17
000cab 173a      	CP   R19,R26
000cac f430      	BRSH _0x206004E
000cad 89e9      	LDD  R30,Y+17
000cae 1be3      	SUB  R30,R19
000caf 2f2e      	MOV  R18,R30
000cb0 e0e1      	LDI  R30,LOW(1)
000cb1 e0f0      	LDI  R31,HIGH(1)
000cb2 c006      	RJMP _0x206011B
                 _0x206004E:
000cb3 89a9      	LDD  R26,Y+17
000cb4 2fe3      	MOV  R30,R19
000cb5 1bea      	SUB  R30,R26
000cb6 2f2e      	MOV  R18,R30
000cb7 efef      	LDI  R30,LOW(65535)
000cb8 efff      	LDI  R31,HIGH(65535)
                 _0x206011B:
000cb9 87ed      	STD  Y+13,R30
000cba 87fe      	STD  Y+13+1,R31
                 _0x2060051:
000cbb 891c      	LDD  R17,Y+20
000cbc e0e0      	LDI  R30,LOW(0)
000cbd 83ee      	STD  Y+6,R30
                 _0x2060053:
000cbe 940e 10c9 	CALL SUBOPT_0x35
000cc0 f430      	BRSH _0x2060055
000cc1 931a      	ST   -Y,R17
000cc2 9513      	INC  R17
000cc3 940e 10d1 	CALL SUBOPT_0x36
000cc5 83ef      	STD  Y+7,R30
000cc6 cff7      	RJMP _0x2060053
                 _0x2060055:
000cc7 81ef      	LDD  R30,Y+7
000cc8 87e8      	STD  Y+8,R30
000cc9 85ed      	LDD  R30,Y+13
000cca 0f3e      	ADD  R19,R30
000ccb 2fe2      	MOV  R30,R18
000ccc 5021      	SUBI R18,1
000ccd 30e0      	CPI  R30,0
000cce f761      	BRNE _0x2060051
000ccf c079      	RJMP _0x2060056
                 _0x206004D:
000cd0 e0e0      	LDI  R30,LOW(0)
000cd1 83ee      	STD  Y+6,R30
                 _0x2060057:
000cd2 940e 10c9 	CALL SUBOPT_0x35
000cd4 f008      	BRLO PC+2
000cd5 c073      	RJMP _0x2060059
000cd6 891c      	LDD  R17,Y+20
000cd7 893b      	LDD  R19,Y+19
000cd8 e0e1      	LDI  R30,LOW(1)
000cd9 2f2e      	MOV  R18,R30
000cda 2f0e      	MOV  R16,R30
000cdb 89aa      	LDD  R26,Y+18
000cdc 27bb      	CLR  R27
000cdd 89ec      	LDD  R30,Y+20
000cde e0f0      	LDI  R31,0
000cdf 1bae      	SUB  R26,R30
000ce0 0bbf      	SBC  R27,R31
000ce1 01ad      	MOVW R20,R26
000ce2 2355      	TST  R21
000ce3 f42a      	BRPL _0x206005A
000ce4 ef0f      	LDI  R16,LOW(255)
000ce5 01fa      	MOVW R30,R20
000ce6 940e 111d 	CALL __ANEGW1
000ce8 01af      	MOVW R20,R30
                 _0x206005A:
000ce9 01fa      	MOVW R30,R20
000cea 0fee      	LSL  R30
000ceb 1fff      	ROL  R31
000cec 87ef      	STD  Y+15,R30
000ced 8bf8      	STD  Y+15+1,R31
000cee 89a9      	LDD  R26,Y+17
000cef 27bb      	CLR  R27
000cf0 89eb      	LDD  R30,Y+19
000cf1 e0f0      	LDI  R31,0
000cf2 1bae      	SUB  R26,R30
000cf3 0bbf      	SBC  R27,R31
000cf4 87ad      	STD  Y+13,R26
000cf5 87be      	STD  Y+13+1,R27
000cf6 85ae      	LDD  R26,Y+14
000cf7 23aa      	TST  R26
000cf8 f43a      	BRPL _0x206005B
000cf9 ef2f      	LDI  R18,LOW(255)
000cfa 85ed      	LDD  R30,Y+13
000cfb 85fe      	LDD  R31,Y+13+1
000cfc 940e 111d 	CALL __ANEGW1
000cfe 87ed      	STD  Y+13,R30
000cff 87fe      	STD  Y+13+1,R31
                 _0x206005B:
000d00 85ed      	LDD  R30,Y+13
000d01 85fe      	LDD  R31,Y+13+1
000d02 0fee      	LSL  R30
000d03 1fff      	ROL  R31
000d04 87eb      	STD  Y+11,R30
000d05 87fc      	STD  Y+11+1,R31
000d06 931a      	ST   -Y,R17
000d07 933a      	ST   -Y,R19
000d08 e0a1      	LDI  R26,LOW(1)
000d09 df27      	RCALL _glcd_putpixelm_G103
000d0a 87e8      	STD  Y+8,R30
000d0b e0e0      	LDI  R30,LOW(0)
000d0c 87e9      	STD  Y+9,R30
000d0d 87ea      	STD  Y+9+1,R30
000d0e 85ad      	LDD  R26,Y+13
000d0f 85be      	LDD  R27,Y+13+1
000d10 174a      	CP   R20,R26
000d11 075b      	CPC  R21,R27
000d12 f0bc      	BRLT _0x206005C
                 _0x206005E:
000d13 0f10      	ADD  R17,R16
000d14 85eb      	LDD  R30,Y+11
000d15 85fc      	LDD  R31,Y+11+1
000d16 940e 10d5 	CALL SUBOPT_0x37
000d18 85a9      	LDD  R26,Y+9
000d19 85ba      	LDD  R27,Y+9+1
000d1a 174a      	CP   R20,R26
000d1b 075b      	CPC  R21,R27
000d1c f42c      	BRGE _0x2060060
000d1d 0f32      	ADD  R19,R18
000d1e 85af      	LDD  R26,Y+15
000d1f 89b8      	LDD  R27,Y+15+1
000d20 940e 10dc 	CALL SUBOPT_0x38
                 _0x2060060:
000d22 931a      	ST   -Y,R17
000d23 940e 10d1 	CALL SUBOPT_0x36
000d25 87e8      	STD  Y+8,R30
000d26 89ea      	LDD  R30,Y+18
000d27 17e1      	CP   R30,R17
000d28 f751      	BRNE _0x206005E
000d29 c018      	RJMP _0x2060061
                 _0x206005C:
                 _0x2060063:
000d2a 0f32      	ADD  R19,R18
000d2b 85ef      	LDD  R30,Y+15
000d2c 89f8      	LDD  R31,Y+15+1
000d2d 940e 10d5 	CALL SUBOPT_0x37
000d2f 85ed      	LDD  R30,Y+13
000d30 85fe      	LDD  R31,Y+13+1
000d31 85a9      	LDD  R26,Y+9
000d32 85ba      	LDD  R27,Y+9+1
000d33 17ea      	CP   R30,R26
000d34 07fb      	CPC  R31,R27
000d35 f42c      	BRGE _0x2060065
000d36 0f10      	ADD  R17,R16
000d37 85ab      	LDD  R26,Y+11
000d38 85bc      	LDD  R27,Y+11+1
000d39 940e 10dc 	CALL SUBOPT_0x38
                 _0x2060065:
000d3b 931a      	ST   -Y,R17
000d3c 940e 10d1 	CALL SUBOPT_0x36
000d3e 87e8      	STD  Y+8,R30
000d3f 89e9      	LDD  R30,Y+17
000d40 17e3      	CP   R30,R19
000d41 f741      	BRNE _0x2060063
                 _0x2060061:
000d42 89eb      	LDD  R30,Y+19
000d43 5fef      	SUBI R30,-LOW(1)
000d44 8beb      	STD  Y+19,R30
000d45 89e9      	LDD  R30,Y+17
000d46 5fef      	SUBI R30,-LOW(1)
000d47 8be9      	STD  Y+17,R30
000d48 cf89      	RJMP _0x2060057
                 _0x2060059:
                 _0x2060056:
                 _0x206004C:
                 _0x2120006:
000d49 940e 1173 	CALL __LOADLOCR6
000d4b 9665      	ADIW R28,21
000d4c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G105:
                 ; .FSTART _put_buff_G105
000d4d 93ba      	ST   -Y,R27
000d4e 93aa      	ST   -Y,R26
000d4f 931a      	ST   -Y,R17
000d50 930a      	ST   -Y,R16
000d51 81aa      	LDD  R26,Y+2
000d52 81bb      	LDD  R27,Y+2+1
000d53 9612      	ADIW R26,2
000d54 940e 113e 	CALL __GETW1P
000d56 9730      	SBIW R30,0
000d57 f129      	BREQ _0x20A0010
000d58 81aa      	LDD  R26,Y+2
000d59 81bb      	LDD  R27,Y+2+1
000d5a 9614      	ADIW R26,4
000d5b 940e 113e 	CALL __GETW1P
000d5d 018f      	MOVW R16,R30
000d5e 9730      	SBIW R30,0
000d5f f061      	BREQ _0x20A0012
                +
000d60 3002     +CPI R16 , LOW ( 2 )
000d61 e0e0     +LDI R30 , HIGH ( 2 )
000d62 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000d63 f080      	BRLO _0x20A0013
000d64 01f8      	MOVW R30,R16
000d65 9731      	SBIW R30,1
000d66 018f      	MOVW R16,R30
                +
000d67 81aa     +LDD R26 , Y + 2
000d68 81bb     +LDD R27 , Y + 2 + 1
000d69 9614     +ADIW R26 , 4
000d6a 93ed     +ST X + , R30
000d6b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x20A0012:
000d6c 81aa      	LDD  R26,Y+2
000d6d 81bb      	LDD  R27,Y+2+1
000d6e 9612      	ADIW R26,2
000d6f 940e 0ff5 	CALL SUBOPT_0x17
000d71 9731      	SBIW R30,1
000d72 81ac      	LDD  R26,Y+4
000d73 83a0      	STD  Z+0,R26
                 _0x20A0013:
000d74 81aa      	LDD  R26,Y+2
000d75 81bb      	LDD  R27,Y+2+1
000d76 940e 113e 	CALL __GETW1P
000d78 23ff      	TST  R31
000d79 f012      	BRMI _0x20A0014
000d7a 940e 0ff5 	CALL SUBOPT_0x17
                 _0x20A0014:
000d7c c006      	RJMP _0x20A0015
                 _0x20A0010:
000d7d 81aa      	LDD  R26,Y+2
000d7e 81bb      	LDD  R27,Y+2+1
000d7f efef      	LDI  R30,LOW(65535)
000d80 efff      	LDI  R31,HIGH(65535)
000d81 93ed      	ST   X+,R30
000d82 93fc      	ST   X,R31
                 _0x20A0015:
                 _0x2120004:
000d83 8119      	LDD  R17,Y+1
000d84 8108      	LDD  R16,Y+0
                 _0x2120005:
000d85 9625      	ADIW R28,5
000d86 9508      	RET
                 ; .FEND
                 __print_G105:
                 ; .FSTART __print_G105
000d87 93ba      	ST   -Y,R27
000d88 93aa      	ST   -Y,R26
000d89 9726      	SBIW R28,6
000d8a 940e 116c 	CALL __SAVELOCR6
000d8c e010      	LDI  R17,0
000d8d 85ac      	LDD  R26,Y+12
000d8e 85bd      	LDD  R27,Y+12+1
000d8f e0e0      	LDI  R30,LOW(0)
000d90 e0f0      	LDI  R31,HIGH(0)
000d91 93ed      	ST   X+,R30
000d92 93fc      	ST   X,R31
                 _0x20A0016:
000d93 89ea      	LDD  R30,Y+18
000d94 89fb      	LDD  R31,Y+18+1
000d95 9631      	ADIW R30,1
000d96 8bea      	STD  Y+18,R30
000d97 8bfb      	STD  Y+18+1,R31
000d98 9731      	SBIW R30,1
000d99 91e4      	LPM  R30,Z
000d9a 2f2e      	MOV  R18,R30
000d9b 30e0      	CPI  R30,0
000d9c f409      	BRNE PC+2
000d9d c115      	RJMP _0x20A0018
000d9e 2fe1      	MOV  R30,R17
000d9f 30e0      	CPI  R30,0
000da0 f439      	BRNE _0x20A001C
000da1 3225      	CPI  R18,37
000da2 f411      	BRNE _0x20A001D
000da3 e011      	LDI  R17,LOW(1)
000da4 c002      	RJMP _0x20A001E
                 _0x20A001D:
000da5 940e 10e3 	CALL SUBOPT_0x39
                 _0x20A001E:
000da7 c10a      	RJMP _0x20A001B
                 _0x20A001C:
000da8 30e1      	CPI  R30,LOW(0x1)
000da9 f4a9      	BRNE _0x20A001F
000daa 3225      	CPI  R18,37
000dab f419      	BRNE _0x20A0020
000dac 940e 10e3 	CALL SUBOPT_0x39
000dae c102      	RJMP _0x20A00CC
                 _0x20A0020:
000daf e012      	LDI  R17,LOW(2)
000db0 e040      	LDI  R20,LOW(0)
000db1 e000      	LDI  R16,LOW(0)
000db2 322d      	CPI  R18,45
000db3 f411      	BRNE _0x20A0021
000db4 e001      	LDI  R16,LOW(1)
000db5 c0fc      	RJMP _0x20A001B
                 _0x20A0021:
000db6 322b      	CPI  R18,43
000db7 f411      	BRNE _0x20A0022
000db8 e24b      	LDI  R20,LOW(43)
000db9 c0f8      	RJMP _0x20A001B
                 _0x20A0022:
000dba 3220      	CPI  R18,32
000dbb f411      	BRNE _0x20A0023
000dbc e240      	LDI  R20,LOW(32)
000dbd c0f4      	RJMP _0x20A001B
                 _0x20A0023:
000dbe c002      	RJMP _0x20A0024
                 _0x20A001F:
000dbf 30e2      	CPI  R30,LOW(0x2)
000dc0 f439      	BRNE _0x20A0025
                 _0x20A0024:
000dc1 e050      	LDI  R21,LOW(0)
000dc2 e013      	LDI  R17,LOW(3)
000dc3 3320      	CPI  R18,48
000dc4 f411      	BRNE _0x20A0026
000dc5 6800      	ORI  R16,LOW(128)
000dc6 c0eb      	RJMP _0x20A001B
                 _0x20A0026:
000dc7 c003      	RJMP _0x20A0027
                 _0x20A0025:
000dc8 30e3      	CPI  R30,LOW(0x3)
000dc9 f009      	BREQ PC+2
000dca c0e7      	RJMP _0x20A001B
                 _0x20A0027:
000dcb 3320      	CPI  R18,48
000dcc f010      	BRLO _0x20A002A
000dcd 332a      	CPI  R18,58
000dce f008      	BRLO _0x20A002B
                 _0x20A002A:
000dcf c007      	RJMP _0x20A0029
                 _0x20A002B:
000dd0 e0aa      	LDI  R26,LOW(10)
000dd1 9f5a      	MUL  R21,R26
000dd2 2d50      	MOV  R21,R0
000dd3 2fe2      	MOV  R30,R18
000dd4 53e0      	SUBI R30,LOW(48)
000dd5 0f5e      	ADD  R21,R30
000dd6 c0db      	RJMP _0x20A001B
                 _0x20A0029:
000dd7 2fe2      	MOV  R30,R18
000dd8 36e3      	CPI  R30,LOW(0x63)
000dd9 f449      	BRNE _0x20A002F
000dda 940e 10ea 	CALL SUBOPT_0x3A
000ddc 89e8      	LDD  R30,Y+16
000ddd 89f9      	LDD  R31,Y+16+1
000dde 81a4      	LDD  R26,Z+4
000ddf 93aa      	ST   -Y,R26
000de0 940e 10f0 	CALL SUBOPT_0x3B
000de2 c0ce      	RJMP _0x20A0030
                 _0x20A002F:
000de3 37e3      	CPI  R30,LOW(0x73)
000de4 f441      	BRNE _0x20A0032
000de5 940e 10ea 	CALL SUBOPT_0x3A
000de7 940e 10f6 	CALL SUBOPT_0x3C
000de9 940e 0768 	CALL _strlen
000deb 2f1e      	MOV  R17,R30
000dec c00a      	RJMP _0x20A0033
                 _0x20A0032:
000ded 37e0      	CPI  R30,LOW(0x70)
000dee f461      	BRNE _0x20A0035
000def 940e 10ea 	CALL SUBOPT_0x3A
000df1 940e 10f6 	CALL SUBOPT_0x3C
000df3 940e 0774 	CALL _strlenf
000df5 2f1e      	MOV  R17,R30
000df6 6008      	ORI  R16,LOW(8)
                 _0x20A0033:
000df7 6002      	ORI  R16,LOW(2)
000df8 770f      	ANDI R16,LOW(127)
000df9 e030      	LDI  R19,LOW(0)
000dfa c034      	RJMP _0x20A0036
                 _0x20A0035:
000dfb 36e4      	CPI  R30,LOW(0x64)
000dfc f011      	BREQ _0x20A0039
000dfd 36e9      	CPI  R30,LOW(0x69)
000dfe f411      	BRNE _0x20A003A
                 _0x20A0039:
000dff 6004      	ORI  R16,LOW(4)
000e00 c002      	RJMP _0x20A003B
                 _0x20A003A:
000e01 37e5      	CPI  R30,LOW(0x75)
000e02 f431      	BRNE _0x20A003C
                 _0x20A003B:
000e03 e7ea      	LDI  R30,LOW(_tbl10_G105*2)
000e04 e0f2      	LDI  R31,HIGH(_tbl10_G105*2)
000e05 83ee      	STD  Y+6,R30
000e06 83ff      	STD  Y+6+1,R31
000e07 e015      	LDI  R17,LOW(5)
000e08 c00c      	RJMP _0x20A003D
                 _0x20A003C:
000e09 35e8      	CPI  R30,LOW(0x58)
000e0a f411      	BRNE _0x20A003F
000e0b 6008      	ORI  R16,LOW(8)
000e0c c003      	RJMP _0x20A0040
                 _0x20A003F:
000e0d 37e8      	CPI  R30,LOW(0x78)
000e0e f009      	BREQ PC+2
000e0f c0a1      	RJMP _0x20A0071
                 _0x20A0040:
000e10 e8e4      	LDI  R30,LOW(_tbl16_G105*2)
000e11 e0f2      	LDI  R31,HIGH(_tbl16_G105*2)
000e12 83ee      	STD  Y+6,R30
000e13 83ff      	STD  Y+6+1,R31
000e14 e014      	LDI  R17,LOW(4)
                 _0x20A003D:
000e15 ff02      	SBRS R16,2
000e16 c014      	RJMP _0x20A0042
000e17 940e 10ea 	CALL SUBOPT_0x3A
000e19 940e 1100 	CALL SUBOPT_0x3D
000e1b 85ab      	LDD  R26,Y+11
000e1c 23aa      	TST  R26
000e1d f43a      	BRPL _0x20A0043
000e1e 85ea      	LDD  R30,Y+10
000e1f 85fb      	LDD  R31,Y+10+1
000e20 940e 111d 	CALL __ANEGW1
000e22 87ea      	STD  Y+10,R30
000e23 87fb      	STD  Y+10+1,R31
000e24 e24d      	LDI  R20,LOW(45)
                 _0x20A0043:
000e25 3040      	CPI  R20,0
000e26 f011      	BREQ _0x20A0044
000e27 5f1f      	SUBI R17,-LOW(1)
000e28 c001      	RJMP _0x20A0045
                 _0x20A0044:
000e29 7f0b      	ANDI R16,LOW(251)
                 _0x20A0045:
000e2a c004      	RJMP _0x20A0046
                 _0x20A0042:
000e2b 940e 10ea 	CALL SUBOPT_0x3A
000e2d 940e 1100 	CALL SUBOPT_0x3D
                 _0x20A0046:
                 _0x20A0036:
000e2f fd00      	SBRC R16,0
000e30 c011      	RJMP _0x20A0047
                 _0x20A0048:
000e31 1715      	CP   R17,R21
000e32 f478      	BRSH _0x20A004A
000e33 ff07      	SBRS R16,7
000e34 c008      	RJMP _0x20A004B
000e35 ff02      	SBRS R16,2
000e36 c004      	RJMP _0x20A004C
000e37 7f0b      	ANDI R16,LOW(251)
000e38 2f24      	MOV  R18,R20
000e39 5011      	SUBI R17,LOW(1)
000e3a c001      	RJMP _0x20A004D
                 _0x20A004C:
000e3b e320      	LDI  R18,LOW(48)
                 _0x20A004D:
000e3c c001      	RJMP _0x20A004E
                 _0x20A004B:
000e3d e220      	LDI  R18,LOW(32)
                 _0x20A004E:
000e3e 940e 10e3 	CALL SUBOPT_0x39
000e40 5051      	SUBI R21,LOW(1)
000e41 cfef      	RJMP _0x20A0048
                 _0x20A004A:
                 _0x20A0047:
000e42 2f31      	MOV  R19,R17
000e43 ff01      	SBRS R16,1
000e44 c017      	RJMP _0x20A004F
                 _0x20A0050:
000e45 3030      	CPI  R19,0
000e46 f0a1      	BREQ _0x20A0052
000e47 ff03      	SBRS R16,3
000e48 c006      	RJMP _0x20A0053
000e49 81ee      	LDD  R30,Y+6
000e4a 81ff      	LDD  R31,Y+6+1
000e4b 9125      	LPM  R18,Z+
000e4c 83ee      	STD  Y+6,R30
000e4d 83ff      	STD  Y+6+1,R31
000e4e c005      	RJMP _0x20A0054
                 _0x20A0053:
000e4f 81ae      	LDD  R26,Y+6
000e50 81bf      	LDD  R27,Y+6+1
000e51 912d      	LD   R18,X+
000e52 83ae      	STD  Y+6,R26
000e53 83bf      	STD  Y+6+1,R27
                 _0x20A0054:
000e54 940e 10e3 	CALL SUBOPT_0x39
000e56 3050      	CPI  R21,0
000e57 f009      	BREQ _0x20A0055
000e58 5051      	SUBI R21,LOW(1)
                 _0x20A0055:
000e59 5031      	SUBI R19,LOW(1)
000e5a cfea      	RJMP _0x20A0050
                 _0x20A0052:
000e5b c04b      	RJMP _0x20A0056
                 _0x20A004F:
                 _0x20A0058:
000e5c e320      	LDI  R18,LOW(48)
000e5d 81ee      	LDD  R30,Y+6
000e5e 81ff      	LDD  R31,Y+6+1
000e5f 940e 1142 	CALL __GETW1PF
000e61 87e8      	STD  Y+8,R30
000e62 87f9      	STD  Y+8+1,R31
000e63 81ee      	LDD  R30,Y+6
000e64 81ff      	LDD  R31,Y+6+1
000e65 9632      	ADIW R30,2
000e66 83ee      	STD  Y+6,R30
000e67 83ff      	STD  Y+6+1,R31
                 _0x20A005A:
000e68 85e8      	LDD  R30,Y+8
000e69 85f9      	LDD  R31,Y+8+1
000e6a 85aa      	LDD  R26,Y+10
000e6b 85bb      	LDD  R27,Y+10+1
000e6c 17ae      	CP   R26,R30
000e6d 07bf      	CPC  R27,R31
000e6e f050      	BRLO _0x20A005C
000e6f 5f2f      	SUBI R18,-LOW(1)
000e70 85a8      	LDD  R26,Y+8
000e71 85b9      	LDD  R27,Y+8+1
000e72 85ea      	LDD  R30,Y+10
000e73 85fb      	LDD  R31,Y+10+1
000e74 1bea      	SUB  R30,R26
000e75 0bfb      	SBC  R31,R27
000e76 87ea      	STD  Y+10,R30
000e77 87fb      	STD  Y+10+1,R31
000e78 cfef      	RJMP _0x20A005A
                 _0x20A005C:
000e79 332a      	CPI  R18,58
000e7a f028      	BRLO _0x20A005D
000e7b ff03      	SBRS R16,3
000e7c c002      	RJMP _0x20A005E
000e7d 5f29      	SUBI R18,-LOW(7)
000e7e c001      	RJMP _0x20A005F
                 _0x20A005E:
000e7f 5d29      	SUBI R18,-LOW(39)
                 _0x20A005F:
                 _0x20A005D:
000e80 fd04      	SBRC R16,4
000e81 c01a      	RJMP _0x20A0061
000e82 3321      	CPI  R18,49
000e83 f420      	BRSH _0x20A0063
000e84 85a8      	LDD  R26,Y+8
000e85 85b9      	LDD  R27,Y+8+1
000e86 9711      	SBIW R26,1
000e87 f409      	BRNE _0x20A0062
                 _0x20A0063:
000e88 c009      	RJMP _0x20A00CD
                 _0x20A0062:
000e89 1753      	CP   R21,R19
000e8a f010      	BRLO _0x20A0067
000e8b ff00      	SBRS R16,0
000e8c c001      	RJMP _0x20A0068
                 _0x20A0067:
000e8d c013      	RJMP _0x20A0066
                 _0x20A0068:
000e8e e220      	LDI  R18,LOW(32)
000e8f ff07      	SBRS R16,7
000e90 c00b      	RJMP _0x20A0069
000e91 e320      	LDI  R18,LOW(48)
                 _0x20A00CD:
000e92 6100      	ORI  R16,LOW(16)
000e93 ff02      	SBRS R16,2
000e94 c007      	RJMP _0x20A006A
000e95 7f0b      	ANDI R16,LOW(251)
000e96 934a      	ST   -Y,R20
000e97 940e 10f0 	CALL SUBOPT_0x3B
000e99 3050      	CPI  R21,0
000e9a f009      	BREQ _0x20A006B
000e9b 5051      	SUBI R21,LOW(1)
                 _0x20A006B:
                 _0x20A006A:
                 _0x20A0069:
                 _0x20A0061:
000e9c 940e 10e3 	CALL SUBOPT_0x39
000e9e 3050      	CPI  R21,0
000e9f f009      	BREQ _0x20A006C
000ea0 5051      	SUBI R21,LOW(1)
                 _0x20A006C:
                 _0x20A0066:
000ea1 5031      	SUBI R19,LOW(1)
000ea2 85a8      	LDD  R26,Y+8
000ea3 85b9      	LDD  R27,Y+8+1
000ea4 9712      	SBIW R26,2
000ea5 f008      	BRLO _0x20A0059
000ea6 cfb5      	RJMP _0x20A0058
                 _0x20A0059:
                 _0x20A0056:
000ea7 ff00      	SBRS R16,0
000ea8 c008      	RJMP _0x20A006D
                 _0x20A006E:
000ea9 3050      	CPI  R21,0
000eaa f031      	BREQ _0x20A0070
000eab 5051      	SUBI R21,LOW(1)
000eac e2e0      	LDI  R30,LOW(32)
000ead 93ea      	ST   -Y,R30
000eae 940e 10f0 	CALL SUBOPT_0x3B
000eb0 cff8      	RJMP _0x20A006E
                 _0x20A0070:
                 _0x20A006D:
                 _0x20A0071:
                 _0x20A0030:
                 _0x20A00CC:
000eb1 e010      	LDI  R17,LOW(0)
                 _0x20A001B:
000eb2 cee0      	RJMP _0x20A0016
                 _0x20A0018:
000eb3 85ac      	LDD  R26,Y+12
000eb4 85bd      	LDD  R27,Y+12+1
000eb5 940e 113e 	CALL __GETW1P
000eb7 940e 1173 	CALL __LOADLOCR6
000eb9 9664      	ADIW R28,20
000eba 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000ebb 92ff      	PUSH R15
000ebc 2ef8      	MOV  R15,R24
000ebd 9726      	SBIW R28,6
000ebe 940e 116e 	CALL __SAVELOCR4
000ec0 940e 1108 	CALL SUBOPT_0x3E
000ec2 9730      	SBIW R30,0
000ec3 f419      	BRNE _0x20A0072
000ec4 efef      	LDI  R30,LOW(65535)
000ec5 efff      	LDI  R31,HIGH(65535)
000ec6 c023      	RJMP _0x2120003
                 _0x20A0072:
000ec7 01de      	MOVW R26,R28
000ec8 9616      	ADIW R26,6
000ec9 940e 1119 	CALL __ADDW2R15
000ecb 018d      	MOVW R16,R26
000ecc 940e 1108 	CALL SUBOPT_0x3E
000ece 83ee      	STD  Y+6,R30
000ecf 83ff      	STD  Y+6+1,R31
000ed0 e0e0      	LDI  R30,LOW(0)
000ed1 87e8      	STD  Y+8,R30
000ed2 87e9      	STD  Y+8+1,R30
000ed3 01de      	MOVW R26,R28
000ed4 961a      	ADIW R26,10
000ed5 940e 1119 	CALL __ADDW2R15
000ed7 940e 113e 	CALL __GETW1P
000ed9 93fa      	ST   -Y,R31
000eda 93ea      	ST   -Y,R30
000edb 931a      	ST   -Y,R17
000edc 930a      	ST   -Y,R16
000edd e4ed      	LDI  R30,LOW(_put_buff_G105)
000ede e0fd      	LDI  R31,HIGH(_put_buff_G105)
000edf 93fa      	ST   -Y,R31
000ee0 93ea      	ST   -Y,R30
000ee1 01de      	MOVW R26,R28
000ee2 961a      	ADIW R26,10
000ee3 dea3      	RCALL __print_G105
000ee4 019f      	MOVW R18,R30
000ee5 81ae      	LDD  R26,Y+6
000ee6 81bf      	LDD  R27,Y+6+1
000ee7 e0e0      	LDI  R30,LOW(0)
000ee8 93ec      	ST   X,R30
000ee9 01f9      	MOVW R30,R18
                 _0x2120003:
000eea 940e 1175 	CALL __LOADLOCR4
000eec 962a      	ADIW R28,10
000eed 90ff      	POP  R15
000eee 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000eef 93aa      	ST   -Y,R26
000ef0 81e8      	LD   R30,Y
000ef1 e0f0      	LDI  R31,0
000ef2 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000ef3 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000ef4 91a4      	LPM  R26,Z
000ef5 81e9      	LDD  R30,Y+1
000ef6 940e 1121 	CALL __LSLB12
                 _0x2120002:
000ef8 9622      	ADIW R28,2
000ef9 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000efa 93aa      	ST   -Y,R26
000efb 931a      	ST   -Y,R17
000efc 81e9      	LDD  R30,Y+1
000efd 30e7      	CPI  R30,LOW(0x7)
000efe f011      	BREQ _0x2100007
000eff 30ea      	CPI  R30,LOW(0xA)
000f00 f419      	BRNE _0x2100008
                 _0x2100007:
000f01 9110 067c 	LDS  R17,_glcd_state
000f03 c009      	RJMP _0x2100009
                 _0x2100008:
000f04 30e9      	CPI  R30,LOW(0x9)
000f05 f419      	BRNE _0x210000B
                +
000f06 9110 067d+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000f08 c004      	RJMP _0x2100009
                 _0x210000B:
000f09 30e8      	CPI  R30,LOW(0x8)
000f0a f4a1      	BRNE _0x2100005
                +
000f0b 9110 068c+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2100009:
                +
000f0d 91e0 067d+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000f0f 30e0      	CPI  R30,0
000f10 f049      	BREQ _0x210000E
000f11 3010      	CPI  R17,0
000f12 f019      	BREQ _0x210000F
000f13 efef      	LDI  R30,LOW(255)
000f14 8118      	LDD  R17,Y+0
000f15 c029      	RJMP _0x2120001
                 _0x210000F:
000f16 81ea      	LDD  R30,Y+2
000f17 95e0      	COM  R30
000f18 8118      	LDD  R17,Y+0
000f19 c025      	RJMP _0x2120001
                 _0x210000E:
000f1a 3010      	CPI  R17,0
000f1b f419      	BRNE _0x2100011
000f1c e0e0      	LDI  R30,LOW(0)
000f1d 8118      	LDD  R17,Y+0
000f1e c020      	RJMP _0x2120001
                 _0x2100011:
                 _0x2100005:
000f1f 81ea      	LDD  R30,Y+2
000f20 8118      	LDD  R17,Y+0
000f21 c01d      	RJMP _0x2120001
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000f22 93ba      	ST   -Y,R27
000f23 93aa      	ST   -Y,R26
000f24 81ea      	LDD  R30,Y+2
000f25 30e1      	CPI  R30,LOW(0x1)
000f26 f421      	BRNE _0x2100015
000f27 81e8      	LD   R30,Y
000f28 81f9      	LDD  R31,Y+1
000f29 91e4      	LPM  R30,Z
000f2a c014      	RJMP _0x2120001
                 _0x2100015:
000f2b 30e2      	CPI  R30,LOW(0x2)
000f2c f429      	BRNE _0x2100016
000f2d 81a8      	LD   R26,Y
000f2e 81b9      	LDD  R27,Y+1
000f2f 940e 114b 	CALL __EEPROMRDB
000f31 c00d      	RJMP _0x2120001
                 _0x2100016:
000f32 30e3      	CPI  R30,LOW(0x3)
000f33 f441      	BRNE _0x2100018
000f34 81a8      	LD   R26,Y
000f35 81b9      	LDD  R27,Y+1
                +
000f36 91e0 0695+LDS R30 , _glcd_state + ( 25 )
000f38 91f0 0696+LDS R31 , _glcd_state + ( 25 ) + 1
000f3a 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000f3b c003      	RJMP _0x2120001
                 _0x2100018:
000f3c 81a8      	LD   R26,Y
000f3d 81b9      	LDD  R27,Y+1
000f3e 91ec      	LD   R30,X
                 _0x2120001:
000f3f 9623      	ADIW R28,3
000f40 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000f41 93aa      	ST   -Y,R26
000f42 81eb      	LDD  R30,Y+3
000f43 30e0      	CPI  R30,0
000f44 f429      	BRNE _0x210001C
000f45 81e8      	LD   R30,Y
000f46 81a9      	LDD  R26,Y+1
000f47 81ba      	LDD  R27,Y+1+1
000f48 93ec      	ST   X,R30
000f49 c014      	RJMP _0x210001B
                 _0x210001C:
000f4a 30e2      	CPI  R30,LOW(0x2)
000f4b f431      	BRNE _0x210001D
000f4c 81e8      	LD   R30,Y
000f4d 81a9      	LDD  R26,Y+1
000f4e 81ba      	LDD  R27,Y+1+1
000f4f 940e 1157 	CALL __EEPROMWRB
000f51 c00c      	RJMP _0x210001B
                 _0x210001D:
000f52 30e3      	CPI  R30,LOW(0x3)
000f53 f451      	BRNE _0x210001B
000f54 81e9      	LDD  R30,Y+1
000f55 81fa      	LDD  R31,Y+1+1
000f56 93fa      	ST   -Y,R31
000f57 93ea      	ST   -Y,R30
000f58 81aa      	LDD  R26,Y+2
                +
000f59 91e0 0697+LDS R30 , _glcd_state + ( 27 )
000f5b 91f0 0698+LDS R31 , _glcd_state + ( 27 ) + 1
000f5d 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x210001B:
000f5e 9624      	ADIW R28,4
000f5f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _glcd_state:
00067c           	.BYTE 0x1D
                 _rx_buffer0:
000699           	.BYTE 0x40
                 _buff:
0006d9           	.BYTE 0x104
                 _tx_buffer0:
0007dd           	.BYTE 0x40
                 _tx_rd_index0:
00081d           	.BYTE 0x1
                 _tx_counter0:
00081e           	.BYTE 0x1
                 _P_Add:
00081f           	.BYTE 0x1
                 _Code_tay_cam1:
000820           	.BYTE 0x1
                 _Code_tay_cam2:
000821           	.BYTE 0x1
                 _Code_tay_cam3:
000822           	.BYTE 0x1
                 _Code_tay_cam4:
000823           	.BYTE 0x1
                 _station_receive:
000824           	.BYTE 0xA
                 _tay_cam_receive:
00082e           	.BYTE 0x8
                 _data_receive:
000836           	.BYTE 0x12
                 _result:
000848           	.BYTE 0x1
                 _count:
000849           	.BYTE 0x2
                 _key:
00084b           	.BYTE 0xA
                 __seed_G101:
000855           	.BYTE 0x4
                 _gfx_addr_G102:
000859           	.BYTE 0x2
                 _gfx_buffer_G102:
00085b           	.BYTE 0x1F8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000f60 93ba      	ST   -Y,R27
000f61 93aa      	ST   -Y,R26
000f62 81a8      	LD   R26,Y
000f63 81b9      	LDD  R27,Y+1
000f64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000f65 1ba2      	SUB  R26,R18
000f66 0bb3      	SBC  R27,R19
000f67 a5ee      	LDD  R30,Y+46
000f68 a5ff      	LDD  R31,Y+46+1
000f69 17ea      	CP   R30,R26
000f6a 07fb      	CPC  R31,R27
000f6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
000f6c ede9      	LDI  R30,LOW(_buff)
000f6d e0f6      	LDI  R31,HIGH(_buff)
000f6e 93fa      	ST   -Y,R31
000f6f 93ea      	ST   -Y,R30
000f70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000f71 e0e7      	LDI  R30,LOW(7)
000f72 93ea      	ST   -Y,R30
000f73 e7ae      	LDI  R26,LOW(126)
000f74 940e 0459 	CALL _RF_Write_RX
000f76 eea2      	LDI  R26,LOW(226)
000f77 940c 047f 	JMP  _RF_Command_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
                +
000f79 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000f7a 958a     +DEC R24
000f7b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000f7c 81e9      	LDD  R30,Y+1
000f7d 0fee      	LSL  R30
000f7e 83e9      	STD  Y+1,R30
000f7f 9adc      	SBI  0x1B,4
                +
000f80 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000f81 958a     +DEC R24
000f82 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000f83 e0e0      	LDI  R30,0
000f84 99cd      	SBIC 0x19,5
000f85 e0e1      	LDI  R30,1
000f86 81a9      	LDD  R26,Y+1
000f87 2bea      	OR   R30,R26
000f88 83e9      	STD  Y+1,R30
000f89 98dc      	CBI  0x1B,4
000f8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000f8b 93aa      	ST   -Y,R26
000f8c 98da      	CBI  0x1B,2
000f8d 81e9      	LDD  R30,Y+1
000f8e 62e0      	ORI  R30,0x20
000f8f 2fae      	MOV  R26,R30
000f90 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000f91 9ada      	SBI  0x1B,2
                +
000f92 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000f93 958a     +DEC R24
000f94 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000f95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000f96 940e 0425 	CALL _SPI_RW_RX
000f98 81a8      	LD   R26,Y
000f99 940c 0425 	JMP  _SPI_RW_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000f9b 940e 0425 	CALL _SPI_RW_RX
000f9d 91a0 0821 	LDS  R26,_Code_tay_cam2
000f9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000fa0 940e 046f 	CALL _RF_Write3_RX
000fa2 e1e0      	LDI  R30,LOW(16)
000fa3 93ea      	ST   -Y,R30
000fa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000fa5 93ea      	ST   -Y,R30
000fa6 e0af      	LDI  R26,LOW(15)
000fa7 940c 0459 	JMP  _RF_Write_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000fa9 e0f0      	LDI  R31,0
000faa 93ed      	ST   X+,R30
000fab 93fc      	ST   X,R31
000fac 940c 0438 	JMP  _SPI_Read_RX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000fae 93ea      	ST   -Y,R30
000faf e3e0      	LDI  R30,LOW(48)
000fb0 93ea      	ST   -Y,R30
000fb1 e0af      	LDI  R26,LOW(15)
000fb2 940e 0c57 	CALL _glcd_line
000fb4 e0e0      	LDI  R30,LOW(0)
000fb5 93ea      	ST   -Y,R30
000fb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000fb7 93ea      	ST   -Y,R30
000fb8 e5e4      	LDI  R30,LOW(84)
000fb9 93ea      	ST   -Y,R30
000fba e3a0      	LDI  R26,LOW(48)
000fbb 940e 0c57 	CALL _glcd_line
000fbd e0e0      	LDI  R30,LOW(0)
000fbe 93ea      	ST   -Y,R30
000fbf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000fc0 93ea      	ST   -Y,R30
000fc1 e0a3      	LDI  R26,LOW(3)
000fc2 940c 0c4b 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000fc4 940e 0c21 	CALL _glcd_outtext
000fc6 e0e4      	LDI  R30,LOW(4)
000fc7 93ea      	ST   -Y,R30
000fc8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000fc9 93ea      	ST   -Y,R30
000fca e1a2      	LDI  R26,LOW(18)
000fcb 940c 0c4b 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000fcd 93ea      	ST   -Y,R30
000fce e1ac      	LDI  R26,LOW(28)
000fcf 940c 0c4b 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000fd1 93ea      	ST   -Y,R30
000fd2 e2a5      	LDI  R26,LOW(37)
000fd3 940c 0c4b 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000fd5 93fa      	ST   -Y,R31
000fd6 93ea      	ST   -Y,R30
000fd7 e0a2      	LDI  R26,LOW(2)
000fd8 e0b0      	LDI  R27,0
000fd9 940e 038f 	CALL _wait_until
000fdb e0a0      	LDI  R26,LOW(0)
000fdc e0b0      	LDI  R27,0
000fdd 940c 0384 	JMP  _refresh
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000fdf 93fa      	ST   -Y,R31
000fe0 93ea      	ST   -Y,R30
000fe1 e0a2      	LDI  R26,LOW(2)
000fe2 e0b0      	LDI  R27,0
000fe3 940c 038f 	JMP  _wait_until
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000fe5 93fa      	ST   -Y,R31
000fe6 93ea      	ST   -Y,R30
000fe7 e0e0      	LDI  R30,LOW(0)
000fe8 93ea      	ST   -Y,R30
000fe9 e1a4      	LDI  R26,LOW(20)
000fea e0b0      	LDI  R27,0
000feb 940c 0747 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
                +
000fed 01de     +MOVW R26 , R28
000fee 5aaf     +SUBI R26 , LOW ( - 81 )
000fef 4fbf     +SBCI R27 , HIGH ( - 81 )
000ff0 900d     +LD R0 , X +
000ff1 91bc     +LD R27 , X
000ff2 2da0     +MOV R26 , R0
                 	__GETW2SX 81
000ff3 91ec      	LD   R30,X
000ff4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
000ff5 91ed      	LD   R30,X+
000ff6 91fd      	LD   R31,X+
000ff7 9631      	ADIW R30,1
000ff8 93fe      	ST   -X,R31
000ff9 93ee      	ST   -X,R30
000ffa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000ffb 940e 036f 	CALL _put_string
000ffd e2ac      	LDI  R26,LOW(300)
000ffe e0b1      	LDI  R27,HIGH(300)
000fff 940c 110f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x19:
001001 01fe      	MOVW R30,R28
001002 96bc      	ADIW R30,44
001003 93fa      	ST   -Y,R31
001004 93ea      	ST   -Y,R30
001005 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
001006 940e 0757 	CALL _strcat
001008 cff8      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
                +
001009 91e0 082a+LDS R30 , _station_receive + ( 6 )
00100b 91f0 082b+LDS R31 , _station_receive + ( 6 ) + 1
                 	__GETW1MN _station_receive,6
00100d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
00100e 93fa      	ST   -Y,R31
00100f 93ea      	ST   -Y,R30
001010 01de      	MOVW R26,R28
001011 965a      	ADIW R26,26
001012 940e 0798 	CALL _itoa
001014 cfec      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
001015 01de      	MOVW R26,R28
001016 965a      	ADIW R26,26
001017 cfee      	RJMP SUBOPT_0x1A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
                +
001018 91e0 0828+LDS R30 , _station_receive + ( 4 )
00101a 91f0 0829+LDS R31 , _station_receive + ( 4 ) + 1
                 	__GETW1MN _station_receive,4
00101c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
                +
00101d 91e0 082c+LDS R30 , _station_receive + ( 8 )
00101f 91f0 082d+LDS R31 , _station_receive + ( 8 ) + 1
                 	__GETW1MN _station_receive,8
001021 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
001022 93fa      	ST   -Y,R31
001023 93ea      	ST   -Y,R30
001024 e0a5      	LDI  R26,LOW(5)
001025 e0b0      	LDI  R27,0
001026 940c 038f 	JMP  _wait_until
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
001028 eea8      	LDI  R26,LOW(1000)
001029 e0b3      	LDI  R27,HIGH(1000)
00102a 940c 110f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
00102c e0e1      	LDI  R30,LOW(1)
00102d e0f0      	LDI  R31,HIGH(1)
00102e 93e0 0849 	STS  _count,R30
001030 93f0 084a 	STS  _count+1,R31
001032 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x23:
001033 91e0 0824 	LDS  R30,_station_receive
001035 91f0 0825 	LDS  R31,_station_receive+1
001037 93fa      	ST   -Y,R31
001038 93ea      	ST   -Y,R30
001039 eda9      	LDI  R26,LOW(_buff)
00103a e0b6      	LDI  R27,HIGH(_buff)
00103b 940e 0798 	CALL _itoa
00103d eda9      	LDI  R26,LOW(_buff)
00103e e0b6      	LDI  R27,HIGH(_buff)
00103f 940e 0c21 	CALL _glcd_outtext
001041 e2ee      	LDI  R30,LOW(46)
001042 cf86      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x24:
                +
001043 e1e9     +LDI R30 , LOW ( 2 * _0x0 + ( 349 ) )
001044 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + ( 349 ) )
                 	__POINTW1FN _0x0,349
001045 93fa      	ST   -Y,R31
001046 93ea      	ST   -Y,R30
001047 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x25:
001048 940e 1131 	CALL __CWD1
00104a 940e 1146 	CALL __PUTPARD1
00104c e084      	LDI  R24,4
00104d 940e 0ebb 	CALL _sprintf
00104f 9628      	ADIW R28,8
001050 eda9      	LDI  R26,LOW(_buff)
001051 e0b6      	LDI  R27,HIGH(_buff)
001052 940e 0c21 	CALL _glcd_outtext
001054 e2ee      	LDI  R30,LOW(46)
001055 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x26:
001056 940e 1131 	CALL __CWD1
001058 940e 1146 	CALL __PUTPARD1
00105a e084      	LDI  R24,4
00105b 940e 0ebb 	CALL _sprintf
00105d 9628      	ADIW R28,8
00105e eda9      	LDI  R26,LOW(_buff)
00105f e0b6      	LDI  R27,HIGH(_buff)
001060 940c 0c21 	JMP  _glcd_outtext
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
001062 e5a9      	LDI  R26,LOW(_gfx_addr_G102)
001063 e0b8      	LDI  R27,HIGH(_gfx_addr_G102)
001064 cf90      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
001065 0fea      	ADD  R30,R26
001066 1ffb      	ADC  R31,R27
001067 83ee      	STD  Y+6,R30
001068 83ff      	STD  Y+6+1,R31
001069 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x29:
00106a 85ec      	LDD  R30,Y+12
00106b 93ea      	ST   -Y,R30
00106c 81ef      	LDD  R30,Y+7
00106d 85f8      	LDD  R31,Y+7+1
00106e 9631      	ADIW R30,1
00106f 83ef      	STD  Y+7,R30
001070 87f8      	STD  Y+7+1,R31
001071 9731      	SBIW R30,1
001072 93fa      	ST   -Y,R31
001073 93ea      	ST   -Y,R30
001074 e0a0      	LDI  R26,LOW(0)
001075 940c 0f41 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
001077 930a      	ST   -Y,R16
001078 89a8      	LDD  R26,Y+16
001079 940c 07e8 	JMP  _pcd8544_setaddr_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2B:
00107b 85ec      	LDD  R30,Y+12
00107c 93ea      	ST   -Y,R30
00107d 81ef      	LDD  R30,Y+7
00107e 85f8      	LDD  R31,Y+7+1
00107f 9631      	ADIW R30,1
001080 83ef      	STD  Y+7,R30
001081 87f8      	STD  Y+7+1,R31
001082 9731      	SBIW R30,1
001083 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2C:
001084 2766      	CLR  R22
001085 2777      	CLR  R23
001086 01df      	MOVW R26,R30
001087 01cb      	MOVW R24,R22
001088 940c 0f22 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
00108a 935a      	ST   -Y,R21
00108b 85aa      	LDD  R26,Y+10
00108c 940c 0efa 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
00108e 930a      	ST   -Y,R16
00108f 9503      	INC  R16
001090 89e8      	LDD  R30,Y+16
001091 93ea      	ST   -Y,R30
001092 935a      	ST   -Y,R21
001093 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2F:
001094 2f5e      	MOV  R21,R30
001095 85ec      	LDD  R30,Y+12
001096 93ea      	ST   -Y,R30
001097 81af      	LDD  R26,Y+7
001098 85b8      	LDD  R27,Y+7+1
001099 2788      	CLR  R24
00109a 2799      	CLR  R25
00109b 940e 0f22 	CALL _glcd_readmem
00109d 2e1e      	MOV  R1,R30
00109e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x30:
00109f 930a      	ST   -Y,R16
0010a0 9503      	INC  R16
0010a1 89e8      	LDD  R30,Y+16
0010a2 93ea      	ST   -Y,R30
0010a3 85ee      	LDD  R30,Y+14
0010a4 93ea      	ST   -Y,R30
0010a5 85e9      	LDD  R30,Y+9
0010a6 85fa      	LDD  R31,Y+9+1
0010a7 9631      	ADIW R30,1
0010a8 87e9      	STD  Y+9,R30
0010a9 87fa      	STD  Y+9+1,R31
0010aa 9731      	SBIW R30,1
0010ab cfd8      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
0010ac 940e 116c 	CALL __SAVELOCR6
                +
0010ae 91e0 0680+LDS R30 , _glcd_state + ( 4 )
0010b0 91f0 0681+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
0010b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
0010b3 01f8      	MOVW R30,R16
                +
0010b4 5f0f     +SUBI R16 , LOW ( - 1 )
0010b5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0010b6 9004      	LPM  R0,Z
0010b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x33:
                +
0010b8 91e0 0680+LDS R30 , _glcd_state + ( 4 )
0010ba 91f0 0681+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
0010bc 9631      	ADIW R30,1
0010bd 91e4      	LPM  R30,Z
0010be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
0010bf 93ea      	ST   -Y,R30
0010c0 e0e0      	LDI  R30,LOW(0)
0010c1 93ea      	ST   -Y,R30
0010c2 e0e0      	LDI  R30,LOW(0)
0010c3 e0f0      	LDI  R31,HIGH(0)
0010c4 93fa      	ST   -Y,R31
0010c5 93ea      	ST   -Y,R30
0010c6 e0a9      	LDI  R26,LOW(9)
0010c7 940c 0926 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x35:
0010c9 81ae      	LDD  R26,Y+6
0010ca 5faf      	SUBI R26,-LOW(1)
0010cb 83ae      	STD  Y+6,R26
0010cc 50a1      	SUBI R26,LOW(1)
                +
0010cd 91e0 0684+LDS R30 , _glcd_state + ( 8 )
                 	__GETB1MN _glcd_state,8
0010cf 17ae      	CP   R26,R30
0010d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
0010d1 933a      	ST   -Y,R19
0010d2 85aa      	LDD  R26,Y+10
0010d3 940c 0c31 	JMP  _glcd_putpixelm_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
0010d5 85a9      	LDD  R26,Y+9
0010d6 85ba      	LDD  R27,Y+9+1
0010d7 0fea      	ADD  R30,R26
0010d8 1ffb      	ADC  R31,R27
0010d9 87e9      	STD  Y+9,R30
0010da 87fa      	STD  Y+9+1,R31
0010db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
0010dc 85e9      	LDD  R30,Y+9
0010dd 85fa      	LDD  R31,Y+9+1
0010de 1bea      	SUB  R30,R26
0010df 0bfb      	SBC  R31,R27
0010e0 87e9      	STD  Y+9,R30
0010e1 87fa      	STD  Y+9+1,R31
0010e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x39:
0010e3 932a      	ST   -Y,R18
0010e4 85ad      	LDD  R26,Y+13
0010e5 85be      	LDD  R27,Y+13+1
0010e6 85ef      	LDD  R30,Y+15
0010e7 89f8      	LDD  R31,Y+15+1
0010e8 9509      	ICALL
0010e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3A:
0010ea 89e8      	LDD  R30,Y+16
0010eb 89f9      	LDD  R31,Y+16+1
0010ec 9734      	SBIW R30,4
0010ed 8be8      	STD  Y+16,R30
0010ee 8bf9      	STD  Y+16+1,R31
0010ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
0010f0 85ad      	LDD  R26,Y+13
0010f1 85be      	LDD  R27,Y+13+1
0010f2 85ef      	LDD  R30,Y+15
0010f3 89f8      	LDD  R31,Y+15+1
0010f4 9509      	ICALL
0010f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3C:
0010f6 89a8      	LDD  R26,Y+16
0010f7 89b9      	LDD  R27,Y+16+1
0010f8 9614      	ADIW R26,4
0010f9 940e 113e 	CALL __GETW1P
0010fb 83ee      	STD  Y+6,R30
0010fc 83ff      	STD  Y+6+1,R31
0010fd 81ae      	LDD  R26,Y+6
0010fe 81bf      	LDD  R27,Y+6+1
0010ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3D:
001100 89a8      	LDD  R26,Y+16
001101 89b9      	LDD  R27,Y+16+1
001102 9614      	ADIW R26,4
001103 940e 113e 	CALL __GETW1P
001105 87ea      	STD  Y+10,R30
001106 87fb      	STD  Y+10+1,R31
001107 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
001108 01de      	MOVW R26,R28
001109 961c      	ADIW R26,12
00110a 940e 1119 	CALL __ADDW2R15
00110c 940e 113e 	CALL __GETW1P
00110e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00110f 9610      	adiw r26,0
001110 f039      	breq __delay_ms1
                 __delay_ms0:
                +
001111 ed80     +LDI R24 , LOW ( 0x7D0 )
001112 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001113 9701     +SBIW R24 , 1
001114 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001115 95a8      	wdr
001116 9711      	sbiw r26,1
001117 f7c9      	brne __delay_ms0
                 __delay_ms1:
001118 9508      	ret
                 
                 __ADDW2R15:
001119 2400      	CLR  R0
00111a 0daf      	ADD  R26,R15
00111b 1db0      	ADC  R27,R0
00111c 9508      	RET
                 
                 __ANEGW1:
00111d 95f1      	NEG  R31
00111e 95e1      	NEG  R30
00111f 40f0      	SBCI R31,0
001120 9508      	RET
                 
                 __LSLB12:
001121 23ee      	TST  R30
001122 2e0e      	MOV  R0,R30
001123 2fea      	MOV  R30,R26
001124 f019      	BREQ __LSLB12R
                 __LSLB12L:
001125 0fee      	LSL  R30
001126 940a      	DEC  R0
001127 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001128 9508      	RET
                 
                 __LSRB12:
001129 23ee      	TST  R30
00112a 2e0e      	MOV  R0,R30
00112b 2fea      	MOV  R30,R26
00112c f019      	BREQ __LSRB12R
                 __LSRB12L:
00112d 95e6      	LSR  R30
00112e 940a      	DEC  R0
00112f f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001130 9508      	RET
                 
                 __CWD1:
001131 2f6f      	MOV  R22,R31
001132 0f66      	ADD  R22,R22
001133 0b66      	SBC  R22,R22
001134 2f76      	MOV  R23,R22
001135 9508      	RET
                 
                 __MULW12U:
001136 9ffa      	MUL  R31,R26
001137 2df0      	MOV  R31,R0
001138 9feb      	MUL  R30,R27
001139 0df0      	ADD  R31,R0
00113a 9fea      	MUL  R30,R26
00113b 2de0      	MOV  R30,R0
00113c 0df1      	ADD  R31,R1
00113d 9508      	RET
                 
                 __GETW1P:
00113e 91ed      	LD   R30,X+
00113f 91fc      	LD   R31,X
001140 9711      	SBIW R26,1
001141 9508      	RET
                 
                 __GETW1PF:
001142 9005      	LPM  R0,Z+
001143 91f4      	LPM  R31,Z
001144 2de0      	MOV  R30,R0
001145 9508      	RET
                 
                 __PUTPARD1:
001146 937a      	ST   -Y,R23
001147 936a      	ST   -Y,R22
001148 93fa      	ST   -Y,R31
001149 93ea      	ST   -Y,R30
00114a 9508      	RET
                 
                 __EEPROMRDB:
00114b 99e1      	SBIC EECR,EEWE
00114c cffe      	RJMP __EEPROMRDB
00114d 93ff      	PUSH R31
00114e b7ff      	IN   R31,SREG
00114f 94f8      	CLI
001150 bbae      	OUT  EEARL,R26
001151 bbbf      	OUT  EEARH,R27
001152 9ae0      	SBI  EECR,EERE
001153 b3ed      	IN   R30,EEDR
001154 bfff      	OUT  SREG,R31
001155 91ff      	POP  R31
001156 9508      	RET
                 
                 __EEPROMWRB:
001157 9be1      	SBIS EECR,EEWE
001158 c002      	RJMP __EEPROMWRB1
001159 95a8      	WDR
00115a cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00115b b79f      	IN   R25,SREG
00115c 94f8      	CLI
00115d bbae      	OUT  EEARL,R26
00115e bbbf      	OUT  EEARH,R27
00115f 9ae0      	SBI  EECR,EERE
001160 b38d      	IN   R24,EEDR
001161 17e8      	CP   R30,R24
001162 f019      	BREQ __EEPROMWRB0
001163 bbed      	OUT  EEDR,R30
001164 9ae2      	SBI  EECR,EEMWE
001165 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001166 bf9f      	OUT  SREG,R25
001167 9508      	RET
                 
                 __CPW02:
001168 2400      	CLR  R0
001169 160a      	CP   R0,R26
00116a 060b      	CPC  R0,R27
00116b 9508      	RET
                 
                 __SAVELOCR6:
00116c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00116d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00116e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00116f 932a      	ST   -Y,R18
                 __SAVELOCR2:
001170 931a      	ST   -Y,R17
001171 930a      	ST   -Y,R16
001172 9508      	RET
                 
                 __LOADLOCR6:
001173 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001174 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001175 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001176 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001177 8119      	LDD  R17,Y+1
001178 8108      	LD   R16,Y
001179 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00117a 0fac      	ADD  R26,R28
00117b 1fbd      	ADC  R27,R29
                 __INITLOC0:
00117c 9005      	LPM  R0,Z+
00117d 920d      	ST   X+,R0
00117e 958a      	DEC  R24
00117f f7e1      	BRNE __INITLOC0
001180 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  38 r1 :   5 r2 :   1 r3 :   0 r4 :   0 r5 :   4 r6 :   4 r7 :   3 
r8 :   5 r9 :   2 r10:   4 r11:   2 r12:   6 r13:   1 r14:   0 r15:   4 
r16:  99 r17: 135 r18:  69 r19:  53 r20:  36 r21:  52 r22:  35 r23:   6 
r24:  47 r25:  12 r26: 513 r27: 192 r28:  61 r29:   2 r30:1059 r31: 244 
x  :  49 y  : 752 z  :  38 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  36 
adiw  :  75 and   :  10 andi  :  19 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  53 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   7 brmi  :   1 brne  : 107 brpl  :   4 brsh  :  26 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 304 
cbi   :  17 cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :  42 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :  10 
cp    :  41 cpc   :  16 cpi   : 109 cpse  :   0 dec   :  11 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 
ijmp  :   0 in    :   9 inc   :   8 jmp   :  79 ld    :  83 ldd   : 354 
ldi   : 446 lds   :  61 lpm   :  31 lsl   :   8 lsr   :  15 mov   : 111 
movw  :  89 mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   8 ori   :  15 out   :  55 pop   :  12 push  :  12 rcall : 104 
ret   :  85 reti  :   2 rjmp  : 178 rol   :   3 ror   :   0 sbc   :   7 
sbci  :  20 sbi   :  25 sbic  :   8 sbis  :   1 sbiw  :  47 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 270 std   : 111 sts   :  60 sub   :  16 subi  :  66 
swap  :   0 tst   :  13 wdr   :   2 
Instructions used: 68 out of 117 (58.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002302   7742   1220   8962  131072   6.8%
[.dseg] 0x000100 0x000a53      0   1363   1363    4096  33.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 18 warnings
