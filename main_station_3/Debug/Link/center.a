;#include <delay.h>
;#include <string.h>
;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;// Graphic Display functions
;#include <glcd.h>
;// Font used for displaying text
;// on the graphic display
;#include <font5x7.h>
;
;// Declare your global variables here
;#define menu PINC.3
;#define back PINC.2
;#define enter PINC.0
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 64
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;char buff[260];
;int i = 0, time_flow = 0, time_s = 0;
;
;void del_string(unsigned char *s) {
; 0000 0028 void del_string(unsigned char *s) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0029     while (*s) {
;PCODE: $0000000F VOL: 0
;	*s -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A         *s = '\0';
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B         s++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002C     }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002D     i = 0;
;PCODE: $0000001D VOL: 0
; 0000 002E }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void) {
; 0000 0034 interrupt [19] void usart0_rx_isr(void) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035     char status,data;
; 0000 0036     status=UCSR0A;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0037     data=UDR0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0038     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0039         rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003A #if RX_BUFFER_SIZE0 == 256
; 0000 003B         // special case for receiver buffer size=256
; 0000 003C         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 003D #else
; 0000 003E         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003F         if (++rx_counter0 == RX_BUFFER_SIZE0) {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0040             rx_counter0=0;
;PCODE: $0000003A VOL: 0
; 0000 0041             rx_buffer_overflow0=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042         }
; 0000 0043 #endif
; 0000 0044     }
;PCODE: $0000003E VOL: 0
; 0000 0045     buff[i] = data;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0046     i++;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0047 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void) {
; 0000 004D char getchar(void) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004E     char data;
; 0000 004F     while (rx_counter0==0);
;PCODE: $0000004C VOL: 0
;	data -> R17
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0050     data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0051 #if RX_BUFFER_SIZE0 != 256
; 0000 0052     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0053 #endif
; 0000 0054 #asm("cli")
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
	cli
;PCODE: $0000005D VOL: 0
; 0000 0055     --rx_counter0;
;PCODE: $0000005E VOL: 0
; 0000 0056 #asm("sei")
;PCODE: $0000005F VOL: 0
	sei
;PCODE: $00000060 VOL: 0
; 0000 0057     return data;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0058 }
;PCODE: $00000064 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void) {
; 0000 006D interrupt [21] void usart0_tx_isr(void) {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006E     if (tx_counter0) {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006F         --tx_counter0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0070         UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0071 #if TX_BUFFER_SIZE0 != 256
; 0000 0072         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0073 #endif
; 0000 0074     }
;PCODE: $0000007A VOL: 0
; 0000 0075 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0000 0077 interrupt [17] void timer0_ovf_isr(void) {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0078     //0.02 ms => 50k = 1s.
; 0000 0079     TCNT0=0x9C;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007A     // Place your code here
; 0000 007B     time_flow++;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007C 
; 0000 007D     if (time_flow == 10000) {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E         time_s++;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007F         time_flow = 0;
;PCODE: $0000008C VOL: 0
; 0000 0080     }
; 0000 0081 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c) {
; 0000 0087 void putchar(char c) {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0088     while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000093 VOL: 0
;	c -> Y+0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0089 #asm("cli")
;PCODE: $0000009A VOL: 0
	cli
;PCODE: $0000009B VOL: 0
; 0000 008A     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008B         tx_buffer0[tx_wr_index0++]=c;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008C #if TX_BUFFER_SIZE0 != 256
; 0000 008D         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008E #endif
; 0000 008F         ++tx_counter0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0090     } else
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0091         UDR0=c;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0092 #asm("sei")
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
	sei
;PCODE: $000000B8 VOL: 0
; 0000 0093 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void put_string (unsigned char *s) {
; 0000 009A void put_string (unsigned char *s) {
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 009B     while(*s) {
;PCODE: $000000BE VOL: 0
;	*s -> Y+0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009C         putchar(*s);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009D         delay_ms(50);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009E         s++;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 009F     }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A0 }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;void refresh(int time_ms) {
; 0000 00A2 void refresh(int time_ms) {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A3 
; 0000 00A4     delay_ms(time_ms);
;PCODE: $000000D4 VOL: 0
;	time_ms -> Y+0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A5    // glcd_clear();
; 0000 00A6     //glcd_moveto(0,0);
; 0000 00A7    // glcd_outtext(buff);
; 0000 00A8     del_string(buff);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A9     i = 0;
;PCODE: $000000D9 VOL: 0
; 0000 00AA 
; 0000 00AB 
; 0000 00AC 
; 0000 00AD }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;void wait_until(unsigned char *keyword, int time_out_s) {
; 0000 00AF void wait_until(unsigned char *keyword, int time_out_s) {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B0     /*     deu biet cai temp2 de lam gi nhung khong co thi no khong chay trong 1 so truong hop @@
; 0000 00B1         Vi du nhap vao "Hell" thi no se tach thua ra them 2 char. Co the do vi tri o nho. Cha biet @@*/
; 0000 00B2     char temp[20], temp2[20];
; 0000 00B3     int i = 0, time_start, time_temp;
; 0000 00B4 
; 0000 00B5     del_string(temp);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;	*keyword -> Y+48
;	time_out_s -> Y+46
;	temp -> Y+26
;	temp2 -> Y+6
;	i -> R16,R17
;	time_start -> R18,R19
;	time_temp -> R20,R21
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B6 
; 0000 00B7     while (*keyword) {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B8         temp[i] = *keyword;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B9         temp2[i] = temp[i];
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00BA         keyword++;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00BB         i++;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00BC     }
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00BD 
; 0000 00BE     time_start = time_s;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00BF 
; 0000 00C0     while (1) {
;PCODE: $00000105 VOL: 0
; 0000 00C1         if (time_s < time_start) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00C2             time_temp = time_s + 60;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C3             if (time_temp - time_start > time_out_s) {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C4             //    glcd_outtext("Timed out\r\n");
; 0000 00C5                 break;
;PCODE: $00000111 VOL: 0
; 0000 00C6             }
; 0000 00C7         } else {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00C8             if (time_s - time_start > time_out_s) {
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00C9             //    glcd_outtext("Timed out\r\n");
; 0000 00CA                 break;
;PCODE: $0000011A VOL: 0
; 0000 00CB             }
; 0000 00CC         }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CD 
; 0000 00CE         if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00CF             break;
;PCODE: $0000012B VOL: 0
; 0000 00D0         }
; 0000 00D1         if (strstr(buff, "ERROR")) {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00D2          //   glcd_outtext("Error found, attempting to continue..\r\n");
; 0000 00D3           /*  delay_ms(3000);
; 0000 00D4             glcd_clear();
; 0000 00D5             glcd_moveto(0,0); */
; 0000 00D6             break;
;PCODE: $00000134 VOL: 0
; 0000 00D7             //nen lam them ve cai nay nua
; 0000 00D8         }
; 0000 00D9     }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00DA }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0

	.DSEG
_0x29:
	.BYTE 0x6
;#define CE PORTA.3
;#define CSN PORTA.2
;#define SCK PORTA.4
;#define MOSI PORTA.1
;#define MISO PINA.5
;#define IRQ PINA.0
;
;unsigned char P_Add, Code_tay_cam1 = 0xA1, Code_tay_cam2 = 0xA2, Code_tay_cam3 = 0xA3, Code_tay_cam4 = 0xA4;
;#include "nrf_code.c"
;#define _BV(x) (1<<(x))
;#define RX_DR       6
;#define TX_DS       5
;#define MAX_RT      4
;#define STATUS      0x07
;
;typedef struct
;{
;    int flag;
;    float a;
;    float b;
;    float c;
;    float d;
;}data;
;
;
;typedef struct
;{
;    int flag;
;    int light;
;    int humi;
;    int temp;
;    int sm;
;}station_info;
;
;typedef struct
;{
;    int analog_l;
;    int analog_r;
;    int digital_l;
;    int digital_r;
;}tay_cam_info;
;
;station_info station_receive;
;tay_cam_info tay_cam_receive;
;
;data data_receive;
;unsigned char data_receive_2;
;unsigned char result;
;
;
;void config();
;
;
;//-----------------------------TX Mode -----------------------------------------------//
;unsigned char SPI_RW_TX(unsigned char Buff);                                       //Function used for text moving
;void RF_Init_TX();                                                                 //Function allow to Initialize RF dev ...
;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value  ...
;void RF_Write_Address_TX(unsigned char Address);                                   //Function to write TX address for pi ...
;void RF_Write_Address_2_TX(unsigned char Address);                                 //Function to write TX address for pi ...
;void RX_Mode_Active_TX();                                                          //Function to put nRF in RX mode
;void TX_Mode_Active_TX();                                                          //Function to put nRF in TX mode
;void RF_Config_TX();                                                               //Function to config the nRF
;void RF_TX_Send_TX(data send);                                                     //Function to send data Value to RX A ...
;void RF_TX_Send_2_TX(data send);                                                   //Function to send data Value to RX a ...
;
;
;//---------------------------------RX Mode----------------------------------------------//
;unsigned char SPI_RW_RX(unsigned char Buff);                                       //Function used for text moving
;unsigned char SPI_Read_RX(void);
;void RF_Init_RX();                                                                 //Function allow to Initialize RF dev ...
;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a regi ...
;void RF_Command_RX(unsigned char command);                                         //Function to write a command
;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
;void RX_Mode_RX();                                                          //Function to put nRF in RX mode
;void RF_Config_RX();                                                               //Function to config the nRF
;void RF_Read_RX();                                                     //Function to read the data from RX FIFO
;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value);
;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value);
;void RF_Read_RX_2();
;
;
;
;
;void config()
; 0000 00E3 {

	.CSEG
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;RF_Write_RX(0x07,0b01111110);  // Clear flag
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;RF_Command_RX(0b11100010);     //Flush RX
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;delay_us(10);
;PCODE: $00000144 VOL: 0
;RF_Write_TX(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;delay_ms(2);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;RF_Write_TX(0x07,0b01111110);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;RF_Write_TX(0x1D, 0b00000100);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;RF_Write_TX(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;}
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;
;
;unsigned char SPI_RW_TX(unsigned char Buff){
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;	Buff -> Y+1
;	bit_ctr -> R17
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;       {
;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;        delay_us(5);
;PCODE: $00000171 VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;        delay_us(5);
;PCODE: $00000177 VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;       }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;}
;PCODE: $00000189 VOL: 0
;
;void RF_Init_TX()                                                    //Function allow to Initialize RF device
;{
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;    CE=1;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;    delay_us(700);
;PCODE: $0000018E VOL: 0
;    CE=0;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;    CSN=1;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;}
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;
;unsigned char RF_Write_TX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register  ...
;{
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;
;    CSN=0;
;PCODE: $00000197 VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;    result = SPI_RW_TX(0b00100000|Reg_Add);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;    SPI_RW_TX(Value);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;    CSN=1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;    delay_us(10);
;PCODE: $000001A3 VOL: 0
;	return result;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;}
;PCODE: $000001A7 VOL: 0
;
;void RF_Write_Address_TX(unsigned char Address)                      //Function to write TX and RX address
;{
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;    CSN=0;
;PCODE: $000001AA VOL: 0
;	Address -> Y+0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;    RF_Write_TX(0x03,0b00000011);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;    CSN=1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;    delay_us(10);
;PCODE: $000001B3 VOL: 0
;    CSN=0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;    SPI_RW_TX(0b00100000|0x0A);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;    CSN=1;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;    delay_us(10);
;PCODE: $000001C4 VOL: 0
;    CSN=0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;    SPI_RW_TX(0b00100000|0x10);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;
;    CSN=1;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;    delay_us(10);
;PCODE: $000001D5 VOL: 0
;}
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;
;void RF_Write_Address_TX_2(unsigned char Address)                      //Function to write TX and RX address
;{
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;    CSN=0;
;PCODE: $000001DB VOL: 0
;	Address -> Y+0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;    RF_Write_TX(0x03,0b00000011);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;    CSN=1;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;    delay_us(10);
;PCODE: $000001E4 VOL: 0
;    CSN=0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;    SPI_RW_TX(0b00100000|0x0A);
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;    CSN=1;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;    delay_us(10);
;PCODE: $000001F5 VOL: 0
;    CSN=0;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;    SPI_RW_TX(0b00100000|0x10);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;    SPI_RW_TX(Address);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;    SPI_RW_TX(0x02);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;
;    CSN=1;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;    delay_us(10);
;PCODE: $00000206 VOL: 0
;}
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;
;void RF_Mode_TX()                                             //Function to put nRF in TX mode
;{
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;    CE=0;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;    RF_Write_TX(0x00,0b00011110);     //CONFIG 0x00
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;}
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;
;void RF_Config_TX()                                                  //Function to config the nRF
;{
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;
;RF_Write_TX(0x1C,0b00000001);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;RF_Write_Address_TX(P_Add);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;}
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;
;void RF_Config_TX_2()                                                  //Function to config the nRF
;{
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;
;RF_Write_TX(0x1C,0b00000001);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;RF_Write_Address_TX_2(P_Add);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;RF_Write_TX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;RF_Write_TX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;}
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;
;void RF_Command_TX(unsigned char command)                            //Function to write a command
;{
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;    CSN=0;
;PCODE: $0000023A VOL: 0
;	command -> Y+0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;    SPI_RW_TX(command);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;    CSN=1;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;    delay_us(10);
;PCODE: $00000241 VOL: 0
;}
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;
;void RF_Send_TX(station_info send)     //Function to send data Value to a specify RX Address
;{
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;
;  RF_Write_Address_TX(P_Add);
;	send -> Y+0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;  CSN=1;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;  delay_us(10);
;PCODE: $0000024B VOL: 0
;  CSN=0;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;  SPI_RW_TX(0b11100001);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;  CSN=1;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;  delay_us(10);
;PCODE: $00000252 VOL: 0
;  CSN=0;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;  SPI_RW_TX(0b10100000);
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;  SPI_RW_TX(send.flag);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;  SPI_RW_TX(send.light);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;  SPI_RW_TX(send.humi);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;  SPI_RW_TX(send.temp);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;  SPI_RW_TX(send.sm);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;  CSN=1;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;  CE=1;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;  delay_us(500);
;PCODE: $00000265 VOL: 0
;  CE=0;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;  RF_Write_TX(0x07,0b01111110);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;  RF_Write_Address_TX(P_Add);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;  RF_Command_TX(0b11100001);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;
;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
;  tx_ok = status & 0b00010000;
;  return tx_ok; */
;}
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;
;void RF_Send_TX_2(data send)     //Function to send data Value to a specify RX Address
;{
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;
;  RF_Write_Address_TX_2(P_Add);
;	send -> Y+0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;  CSN=1;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;  delay_us(10);
;PCODE: $00000279 VOL: 0
;  CSN=0;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;  SPI_RW_TX(0b11100001);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;  CSN=1;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;  delay_us(10);
;PCODE: $00000280 VOL: 0
;  CSN=0;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;  SPI_RW_TX(0b10100000);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;  SPI_RW_TX(send.flag);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;  SPI_RW_TX(send.a);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;  SPI_RW_TX(send.b);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;  SPI_RW_TX(send.c);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;  SPI_RW_TX(send.d);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;  CSN=1;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;  CE=1;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;  delay_us(500);
;PCODE: $0000029B VOL: 0
;  CE=0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;  RF_Write_TX(0x07,0b01111110);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;  RF_Write_Address_TX_2(P_Add);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;  RF_Command_TX(0b11100001);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;
;  /*status = RF_Write_TX(0x07,0b00111000); //0b00111000
;  tx_ok = status & 0b00010000;
;  return tx_ok; */
;}
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;
;
;
;//--------------------------------------------RX function------------------------------------//
;unsigned char SPI_RW_RX(unsigned char Buff)
;{
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;	Buff -> Y+1
;	bit_ctr -> R17
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;       {
;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;        delay_us(5);
;PCODE: $000002C0 VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;        delay_us(5);
;PCODE: $000002C6 VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;       }
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;}
;PCODE: $000002D8 VOL: 0
;
;unsigned char SPI_Read_RX(void)
;{   unsigned char Buff=0;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;	Buff -> R17
;	bit_ctr -> R16
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;       {
;        delay_us(5);
;PCODE: $000002E8 VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $000002E9 VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;        delay_us(5);
;PCODE: $000002EC VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;       }
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;}
;PCODE: $000002FB VOL: 0
;
;void RF_Init_RX()                                                    //Function allow to Initialize RF device
;{
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;    CE=1;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;    delay_us(700);
;PCODE: $00000300 VOL: 0
;    CE=0;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;    CSN=1;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;}
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;
;void RF_Write_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;    CSN=0;
;PCODE: $00000309 VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;    SPI_RW_RX(0b00100000|Reg_Add);
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;    CSN=1;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;    delay_us(10);
;PCODE: $00000314 VOL: 0
;}
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;
;void RF_Write2_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;    CSN=0;
;PCODE: $0000031A VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;    SPI_RW_RX(0b00100000|Reg_Add);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;    CSN=1;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;    delay_us(10);
;PCODE: $0000032D VOL: 0
;}
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;
;void RF_Write3_RX(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;    CSN=0;
;PCODE: $00000333 VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;    SPI_RW_RX(0b00100000|Reg_Add);
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;    SPI_RW_RX(Code_tay_cam2);
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;    SPI_RW_RX(Code_tay_cam2);
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;    SPI_RW_RX(Code_tay_cam2);
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;    SPI_RW_RX(Code_tay_cam2);
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;    SPI_RW_RX(Value);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;
;
;    CSN=1;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;    delay_us(10);
;PCODE: $00000346 VOL: 0
;}
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;
;void RF_Command_RX(unsigned char command)                            //Function to write a command
;{
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;    CSN=0;
;PCODE: $0000034C VOL: 0
;	command -> Y+0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;    SPI_RW_RX(command);
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;    CSN=1;
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;    delay_us(10);
;PCODE: $00000353 VOL: 0
;}
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;
;void RF_Write_Address_RX(unsigned char Address1, unsigned char Address2, unsigned char Address3, unsigned char Address4) ...
;{
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;    CSN=0;
;PCODE: $00000359 VOL: 0
;	Address1 -> Y+3
;	Address2 -> Y+2
;	Address3 -> Y+1
;	Address4 -> Y+0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;    RF_Write_RX(0x03,0b00000011);
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;    CSN=1;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;    delay_us(10);
;PCODE: $00000362 VOL: 0
;    CSN=0;
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;    RF_Write2_RX(0x0A, Address1);
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;    RF_Write2_RX(0x10, Address1);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;
;    RF_Write3_RX(0x0B, Address2);
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;    RF_Write3_RX(0x10, Address2);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;
;    RF_Write3_RX(0x0C, Address3);
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;    RF_Write3_RX(0x10, Address3);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;
;    RF_Write3_RX(0x0D, Address4);
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;    RF_Write3_RX(0x10, Address4);
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;
;}
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;
;void RF_Write_Address_RX_2(unsigned char Address1){
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;    CSN=0;
;PCODE: $0000038A VOL: 0
;	Address1 -> Y+0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;    RF_Write_RX(0x03,0b00000011);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;    CSN=1;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;    delay_us(10);
;PCODE: $00000393 VOL: 0
;    CSN=0;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;
;    RF_Write2_RX(0x0A, Address1);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;    RF_Write2_RX(0x10, Address1);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;}
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;
;
;void RF_Mode_RX()                                             //Function to put nRF in RX mode
;{
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;    RF_Write_RX(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;    CE=1;
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;}
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;
;void RF_Config_RX()                                                  //Function to config the nRF
;{
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;RF_Write_RX(0x1C,0b00001111);
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;RF_Write_Address_RX(Code_tay_cam1, Code_tay_cam2, Code_tay_cam3, Code_tay_cam4);
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;RF_Write_RX(0x02,0b00001111);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;RF_Write_RX(0x01,0b00001111);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;}
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;
;void RF_Config_RX_2(){
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;    RF_Write_RX(0x1C,0b00001111);
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;    RF_Write_Address_RX_2(Code_tay_cam1);
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;    RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;    RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;}
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;
;void RF_Config_RX_3(){
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;RF_Write_RX(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;RF_Write_Address_RX_2(Code_tay_cam1);
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;RF_Write_RX(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;RF_Write_RX(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;RF_Write_RX(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;}
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;
;void RF_Read_RX()                                         //Function to read the data from RX FIFO
;{
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;   CE=0;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;   CSN=1;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;   delay_us(10);
;PCODE: $000003F1 VOL: 0
;   CSN=0;
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;   SPI_RW_RX(0b01100001);
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;   delay_us(10);
;PCODE: $000003F6 VOL: 0
;   data_receive.flag = SPI_Read_RX();
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;   data_receive.a = SPI_Read_RX();
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;   data_receive.b = SPI_Read_RX();
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;   data_receive.c = SPI_Read_RX();
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;   data_receive.d = SPI_Read_RX();
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;   CSN=1;
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;   CE=1;
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;   RF_Write_RX(0x07,0b01111110);  // Clear flag
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;   RF_Command_RX(0b11100010);     //Flush RX
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;}
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;
;void RF_Read_RX_2(){
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;    CE=0;
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;    CSN=1;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;    delay_us(10);
;PCODE: $00000420 VOL: 0
;    CSN=0;
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;    SPI_RW_RX(0b01100001);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;    delay_us(10);
;PCODE: $00000425 VOL: 0
;    tay_cam_receive.analog_l = SPI_Read_RX();
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;    tay_cam_receive.analog_r = SPI_Read_RX();
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;    tay_cam_receive.digital_l = SPI_Read_RX();
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;    tay_cam_receive.digital_r = SPI_Read_RX();
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;    CSN=1;
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;    CE=1;
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;    RF_Write_RX(0x07,0b01111110);  // Clear flag
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;    RF_Command_RX(0b11100010);     //Flush RX
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;}
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;
;void RF_Read_RX_3()                                         //Function to read the data from RX FIFO
;{
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;   CE=0;
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;   CSN=1;
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;   delay_us(10);
;PCODE: $0000044A VOL: 0
;   CSN=0;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;   SPI_RW_RX(0b01100001);
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;   delay_us(10);
;PCODE: $0000044F VOL: 0
;   station_receive.flag = SPI_Read_RX();
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;   station_receive.light = SPI_Read_RX();
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;   station_receive.humi = SPI_Read_RX();
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;   station_receive.temp = SPI_Read_RX();
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;   station_receive.sm = SPI_Read_RX();
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;   CSN=1;
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;   CE=1;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;   RF_Write_RX(0x07,0b01111110);  // Clear flag
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;   RF_Command_RX(0b11100010);     //Flush RX
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;}
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;int count;
;bool flag;
;unsigned char* key[] = {"", "7R6NSYFHBFRUAR6K", "5I000WROXOFS0V85", "6NHFXH076SC02DZ0", "WUIT8LX7N92X8J4W"};

	.DSEG
_0xCD:
	.BYTE 0x45
;char cmd[250];
;station_info data_send;
;#include "s_function.c"
;void border()
; 0000 00E9 {

	.CSEG
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;    glcd_line(48,0, 48, 15);
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;    glcd_line(0, 15, 48, 15);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;    glcd_line(0,0,84,0);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;    glcd_line(84,0, 84, 48);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;    glcd_line(0, 48, 84, 48);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;    glcd_line(0, 0, 0, 48);
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;    glcd_moveto(3,3);
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;    glcd_outtext("Node: ");
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;   // glcd_moveto(40, 3);
;   // glcd_outtext("4");
;
;    glcd_moveto(4, 18);
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;    glcd_outtext("Temp: ");
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;    glcd_moveto(4, 28);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;    glcd_outtext("Humid: ");
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;    glcd_moveto(4, 37);
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;    glcd_outtext("Water: ");
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;    glcd_moveto(68, 18);
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;    glcd_outtext("!C");
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;    glcd_moveto(69, 28);
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;    glcd_putchar(37);
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;    glcd_moveto(69, 37);
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;    glcd_outtext("cm");
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;}
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0

	.DSEG
_0xCF:
	.BYTE 0x24
;void temp()
;{

	.CSEG
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;     glcd_moveto(50, 28);
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;     glcd_outtext("21");
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;     glcd_moveto(50, 18);
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;     glcd_outtext("75");
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;     glcd_moveto(50, 37);
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;     glcd_outtext("45");
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;}
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0

	.DSEG
_0xD0:
	.BYTE 0x9
;void wifi_connect()
;{

	.CSEG
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;	glcd_moveto(10,10);
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;    glcd_clear();
;PCODE: $000004F6 VOL: 0
;    glcd_outtext("Booting");
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;    delay_ms(2000);
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;	put_string("AT\r\n");
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;    wait_until("OK", 2);
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;    refresh(0);
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;	delay_ms(100);
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;        put_string("AT+CIPSTATUS\r\n");
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;        wait_until("OK", 2);
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;        refresh(0);
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;        if (strstr(buff, "STATUS:2")) {
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;            glcd_outtext("Wifi Connected\r\n");
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;        }
;        else
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;        {
;            put_string("AT+CWMODE=1\r\n");
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;            wait_until("OK", 2);
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;           // refresh(0);
;            put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;            wait_until("OK", 10);
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;            refresh(0);
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;         //PORTA.6=!PORTA.6;
;        }
;PCODE: $00000538 VOL: 0
;
;  //  refresh(0);
;}
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0

	.DSEG
_0xD1:
	.BYTE 0x7B
;
;void read_and_send(unsigned char *s){
; 0000 00EA void read_and_send(unsigned char *s){

	.CSEG
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0000 00EB     // Thay nhung ham respones_read bang ham wait_until
; 0000 00EC     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
; 0000 00ED     int length = 0, i = 0;
; 0000 00EE     memset(api_key, '\0',20);
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;	*s -> Y+81
;	api_key -> Y+61
;	cmd -> Y+44
;	temp -> Y+24
;	temp2 -> Y+4
;	length -> R16,R17
;	i -> R18,R19
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 00EF     memset(temp, '\0',20);
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 00F0     memset(temp2, '\0',20);
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 00F1 
; 0000 00F2     while (*s) {
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 00F3         temp2[i] = *s;
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 00F4         api_key[i] = temp2[i];
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 00F5         s++;
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 00F6         i++;
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 00F7     }
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 00F8     put_string("AT+CIPMUX=1");
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 00F9     delay_ms(300);
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 00FA     put_string("\r\n");
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
; 0000 00FB     wait_until("OK", 2);
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 00FC     refresh(10);
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 00FD 
; 0000 00FE     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 00FF     delay_ms(300);
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 0100     put_string("\r\n");
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 0101     wait_until("OK", 20);
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0102     refresh(500);
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 0103 
; 0000 0104    // glcd_clear();
; 0000 0105   //  glcd_moveto(0,0);
; 0000 0106    // glcd_outtext("Server connected\r\n");
; 0000 0107 
; 0000 0108     strcat(cmd, api_key);
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 0109     strcat(cmd, "&field1=");
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
; 0000 010A 
; 0000 010B      itoa(station_receive.temp, temp);
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 010C 
; 0000 010D     //itoa(200, temp);
; 0000 010E     strcat(cmd, temp);
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 010F 
; 0000 0110     strcat(cmd, "&field2=");
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 0111      itoa(station_receive.humi, temp);
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 0112    // itoa(200, temp);
; 0000 0113     strcat(cmd, temp);
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 0114 
; 0000 0115     strcat(cmd, "&field3=");
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 0116      itoa(station_receive.sm, temp);
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0000 0117    // itoa(200, temp);
; 0000 0118     strcat(cmd, temp);
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 0119 
; 0000 011A     strcat(cmd, "\r\n");
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
; 0000 011B 
; 0000 011C     length = strlen(cmd);
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 011D 
; 0000 011E     itoa(length, temp);
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 011F 
; 0000 0120     put_string("AT+CIPSEND=0,");
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 0121     put_string(temp);
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
; 0000 0122     delay_ms(500);
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
; 0000 0123     put_string("\r\n");
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
; 0000 0124 
; 0000 0125     wait_until("> ", 5);
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0000 0126 
; 0000 0127    /* glcd_clear();
; 0000 0128     glcd_moveto(0,0);
; 0000 0129     glcd_outtext(cmd);*/
; 0000 012A 
; 0000 012B     put_string(cmd);
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0000 012C     delay_ms(1000);
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0000 012D     putchar(0x1A);
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
; 0000 012E 
; 0000 012F     refresh(10);
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0000 0130 	put_string("AT+CIPCLOSE=0\r\n");
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 0131 	wait_until("OK",5);
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0000 0132 
; 0000 0133 }
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0

	.DSEG
_0xD8:
	.BYTE 0x89
;
;
;void main(void) {
; 0000 0136 void main(void) {

	.CSEG
;PCODE: $000005FB VOL: 0
; 0000 0137 {
; 0000 0138 // Declare your local variables here
; 0000 0139 // Variable used to store graphic display
; 0000 013A // controller initialization data
; 0000 013B     GLCDINIT_t glcd_init_data;
; 0000 013C 
; 0000 013D // Input/Output Ports initialization
; 0000 013E // Port A initialization
; 0000 013F DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
;PCODE: $000005FC VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0000 0140 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0141 PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
; 0000 0142 
; 0000 0143 // Port B initialization
; 0000 0144 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0145     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0000 0146 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0147     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 0148 
; 0000 0149 // Port C initialization
; 0000 014A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 014B     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0000 014C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 014D     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0000 014E 
; 0000 014F // Port D initialization
; 0000 0150 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0151     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
; 0000 0152 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0153     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0000 0154 
; 0000 0155 // Port E initialization
; 0000 0156 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0157     DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 0158 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0159     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
; 0000 015A 
; 0000 015B // Port F initialization
; 0000 015C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 015D     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 015E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 015F     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 0160 
; 0000 0161 // Port G initialization
; 0000 0162 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0163     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
; 0000 0164 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0165     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 0166 
; 0000 0167 // Timer/Counter 0 initialization
; 0000 0168 // Clock source: System Clock
; 0000 0169 // Clock value: 8000.000 kHz
; 0000 016A // Mode: Normal top=0xFF
; 0000 016B // OC0 output: Disconnected
; 0000 016C // Timer Period: 0.02 ms
; 0000 016D 
; 0000 016E         ASSR=0<<AS0;
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 016F         TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
; 0000 0170         TCNT0=0x60;
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 0171         OCR0=0x00;
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 0172 
; 0000 0173 // Timer/Counter 1 initialization
; 0000 0174 // Clock source: System Clock
; 0000 0175 // Clock value: Timer1 Stopped
; 0000 0176 // Mode: Normal top=0xFFFF
; 0000 0177 // OC1A output: Disconnected
; 0000 0178 // OC1B output: Disconnected
; 0000 0179 // OC1C output: Disconnected
; 0000 017A // Noise Canceler: Off
; 0000 017B // Input Capture on Falling Edge
; 0000 017C // Timer1 Overflow Interrupt: Off
; 0000 017D // Input Capture Interrupt: Off
; 0000 017E // Compare A Match Interrupt: Off
; 0000 017F // Compare B Match Interrupt: Off
; 0000 0180 // Compare C Match Interrupt: Off
; 0000 0181     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
; 0000 0182     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 0183     TCNT1H=0x00;
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
; 0000 0184     TCNT1L=0x00;
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 0185     ICR1H=0x00;
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
; 0000 0186     ICR1L=0x00;
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 0187     OCR1AH=0x00;
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
; 0000 0188     OCR1AL=0x00;
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
; 0000 0189     OCR1BH=0x00;
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 018A     OCR1BL=0x00;
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
; 0000 018B     OCR1CH=0x00;
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 018C     OCR1CL=0x00;
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
; 0000 018D 
; 0000 018E // Timer/Counter 2 initialization
; 0000 018F // Clock source: System Clock
; 0000 0190 // Clock value: Timer2 Stopped
; 0000 0191 // Mode: Normal top=0xFF
; 0000 0192 // OC2 output: Disconnected
; 0000 0193     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 0194     TCNT2=0x00;
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
; 0000 0195     OCR2=0x00;
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
; 0000 0196 
; 0000 0197 // Timer/Counter 3 initialization
; 0000 0198 // Clock source: System Clock
; 0000 0199 // Clock value: Timer3 Stopped
; 0000 019A // Mode: Normal top=0xFFFF
; 0000 019B // OC3A output: Disconnected
; 0000 019C // OC3B output: Disconnected
; 0000 019D // OC3C output: Disconnected
; 0000 019E // Noise Canceler: Off
; 0000 019F // Input Capture on Falling Edge
; 0000 01A0 // Timer3 Overflow Interrupt: Off
; 0000 01A1 // Input Capture Interrupt: Off
; 0000 01A2 // Compare A Match Interrupt: Off
; 0000 01A3 // Compare B Match Interrupt: Off
; 0000 01A4 // Compare C Match Interrupt: Off
; 0000 01A5     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
; 0000 01A6     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
; 0000 01A7     TCNT3H=0x00;
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
; 0000 01A8     TCNT3L=0x00;
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
; 0000 01A9     ICR3H=0x00;
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
; 0000 01AA     ICR3L=0x00;
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
; 0000 01AB     OCR3AH=0x00;
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
; 0000 01AC     OCR3AL=0x00;
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0000 01AD     OCR3BH=0x00;
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
; 0000 01AE     OCR3BL=0x00;
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 01AF     OCR3CH=0x00;
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 01B0     OCR3CL=0x00;
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0000 01B1 
; 0000 01B2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01B3     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
; 0000 01B4     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0000 01B5 
; 0000 01B6 // External Interrupt(s) initialization
; 0000 01B7 // INT0: Off
; 0000 01B8 // INT1: Off
; 0000 01B9 // INT2: Off
; 0000 01BA // INT3: Off
; 0000 01BB // INT4: Off
; 0000 01BC // INT5: Off
; 0000 01BD // INT6: Off
; 0000 01BE // INT7: Off
; 0000 01BF     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
; 0000 01C0     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 01C1     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
; 0000 01C2 
; 0000 01C3 // USART0 initialization
; 0000 01C4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01C5 // USART0 Receiver: On
; 0000 01C6 // USART0 Transmitter: On
; 0000 01C7 // USART0 Mode: Asynchronous
; 0000 01C8 // USART0 Baud Rate: 9600
; 0000 01C9     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
; 0000 01CA     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0000 01CB     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 01CC     UBRR0H=0x00;
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 01CD     UBRR0L=0x33;
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
; 0000 01CE 
; 0000 01CF // USART1 initialization
; 0000 01D0 // USART1 disabled
; 0000 01D1     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 01D2 
; 0000 01D3 // Analog Comparator initialization
; 0000 01D4 // Analog Comparator: Off
; 0000 01D5 // The Analog Comparator's positive input is
; 0000 01D6 // connected to the AIN0 pin
; 0000 01D7 // The Analog Comparator's negative input is
; 0000 01D8 // connected to the AIN1 pin
; 0000 01D9     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
; 0000 01DA     SFIOR=(0<<ACME);
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
; 0000 01DB 
; 0000 01DC // ADC initialization
; 0000 01DD // ADC disabled
; 0000 01DE     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 01DF 
; 0000 01E0 // SPI initialization
; 0000 01E1 // SPI disabled
; 0000 01E2     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
; 0000 01E3 
; 0000 01E4 // TWI initialization
; 0000 01E5 // TWI disabled
; 0000 01E6     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
; 0000 01E7 
; 0000 01E8 // Graphic Display Controller initialization
; 0000 01E9 // The PCD8544 connections are specified in the
; 0000 01EA // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 01EB // SDIN - PORTC Bit 7
; 0000 01EC // SCLK - PORTA Bit 7
; 0000 01ED // D /C - PORTC Bit 6
; 0000 01EE // /SCE - PORTC Bit 5
; 0000 01EF // /RES - PORTC Bit 4
; 0000 01F0 
; 0000 01F1 // Specify the current font for displaying text
; 0000 01F2     glcd_init_data.font=font5x7;
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
; 0000 01F3 // No function is used for reading
; 0000 01F4 // image data from external memory
; 0000 01F5     glcd_init_data.readxmem=NULL;
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 01F6 // No function is used for writing
; 0000 01F7 // image data to external memory
; 0000 01F8     glcd_init_data.writexmem=NULL;
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
; 0000 01F9 // Set the LCD temperature coefficient
; 0000 01FA     glcd_init_data.temp_coef=90;
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 01FB // Set the LCD bias
; 0000 01FC     glcd_init_data.bias=3;
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
; 0000 01FD // Set the LCD contrast control voltage VLCD
; 0000 01FE     glcd_init_data.vlcd=55;
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0000 01FF 
; 0000 0200     glcd_init(&glcd_init_data);
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
; 0000 0201 
; 0000 0202 // Global enable interrupts
; 0000 0203 #asm("sei")
;PCODE: $0000068B VOL: 0
	sei
;PCODE: $0000068C VOL: 0
; 0000 0204 }
;PCODE: $0000068D VOL: 0
; 0000 0205 delay_ms(1000);
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 0206 wifi_connect();
;PCODE: $00000690 VOL: 0
; 0000 0207 
; 0000 0208 RF_Init_RX();
;PCODE: $00000691 VOL: 0
; 0000 0209 config();
;PCODE: $00000692 VOL: 0
; 0000 020A RF_Config_RX();
;PCODE: $00000693 VOL: 0
; 0000 020B count = 1;
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0000 020C glcd_clear();
;PCODE: $00000696 VOL: 0
; 0000 020D // menu hien len o day
; 0000 020E while (1)
;PCODE: $00000697 VOL: 0
; 0000 020F     {
; 0000 0210     if (menu==0)
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0000 0211     {
; 0000 0212         while(1)
;PCODE: $0000069B VOL: 0
; 0000 0213         {
; 0000 0214         RF_Mode_RX();
;PCODE: $0000069C VOL: 0
; 0000 0215         if(IRQ == 0){
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
; 0000 0216             RF_Read_RX_3();
;PCODE: $000006A0 VOL: 0
; 0000 0217             if(station_receive.flag == count){
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
; 0000 0218                 border();
;PCODE: $000006A5 VOL: 0
; 0000 0219                 glcd_moveto(40, 3);
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0000 021A                 itoa(station_receive.flag, buff);
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 021B                 glcd_outtext(buff);
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
; 0000 021C                 glcd_moveto(46, 18);
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
; 0000 021D                 sprintf(buff, "%d", station_receive.temp);
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
; 0000 021E                 glcd_outtext(buff);
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0000 021F                 glcd_moveto(46, 28);
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 0220                 sprintf(buff, "%d", station_receive.humi);
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0000 0221                 glcd_outtext(buff);
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
; 0000 0222                 glcd_moveto(46, 37);
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
; 0000 0223                 sprintf(buff, "%d", station_receive.sm);
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
; 0000 0224                 glcd_outtext(buff);
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 0225                 read_and_send(key[count]);
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
; 0000 0226                 delay_ms(800);
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0000 0227                 count++;
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
; 0000 0228                 if(count == 5)
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 0229                     count = 1;
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0000 022A                 }
;PCODE: $000006FB VOL: 0
; 0000 022B         }
;PCODE: $000006FC VOL: 0
; 0000 022C         }
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
; 0000 022D     }
; 0000 022E     if (back==0)
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0000 022F     {
; 0000 0230     while(1)
;PCODE: $00000704 VOL: 0
; 0000 0231     {
; 0000 0232      RF_Mode_RX();
;PCODE: $00000705 VOL: 0
; 0000 0233         if(IRQ == 0){
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 0234             RF_Read_RX_3();
;PCODE: $00000709 VOL: 0
; 0000 0235             border();
;PCODE: $0000070A VOL: 0
; 0000 0236             glcd_moveto(40, 3);
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 0237             itoa(station_receive.flag, buff);
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
; 0000 0238             glcd_outtext(buff);
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
; 0000 0239             glcd_moveto(46, 18);
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
; 0000 023A             sprintf(buff, "%d", station_receive.temp);
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
; 0000 023B             glcd_outtext(buff);
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 023C             glcd_moveto(46, 28);
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
; 0000 023D             sprintf(buff, "%d", station_receive.humi);
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
; 0000 023E             glcd_outtext(buff);
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
; 0000 023F             glcd_moveto(46, 37);
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
; 0000 0240             sprintf(buff, "%d", station_receive.sm);
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
; 0000 0241             glcd_outtext(buff);
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
; 0000 0242             delay_ms(1000);
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
; 0000 0243         }
; 0000 0244     }
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
; 0000 0245     }
; 0000 0246 }
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
; 0000 0247 }
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
