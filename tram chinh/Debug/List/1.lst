
AVRASM ver. 2.1.30  C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm Fri Sep 08 16:55:21 2017

C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1096): warning: Register r11 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1097): warning: Register r12 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1098): warning: Register r13 already defined by the .DEF directive
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1099): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R5
                 	.DEF _rx_rd_index0=R4
                 	.DEF _rx_counter0=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _time_flow=R10
                 	.DEF _time_flow_msb=R11
                 	.DEF _time_s=R12
                 	.DEF _time_s_msb=R13
                 	.DEF _tx_wr_index0=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0232 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 02cf 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0272 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 02ab 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 5f00
00004c 0000
00004d 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 _tbl10_G105:
00013d 2710
00013e 03e8
00013f 0064
000140 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000141 0001      	.DB  0x1,0x0
                 _tbl16_G105:
000142 1000
000143 0100
000144 0010
000145 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000146 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000147 0000
000148 0000      	.DB  0x0,0x0,0x0,0x0
000149 0000
00014a 0000      	.DB  0x0,0x0,0x0,0x0
00014b 0000      	.DB  0x0,0x0
                 
                 _0x2A:
00014c 4547
00014d 2054
00014e 752f
00014f 6470      	.DB  0x47,0x45,0x54,0x20,0x2F,0x75,0x70,0x64
000150 7461
000151 3f65
000152 656b
000153 3d79      	.DB  0x61,0x74,0x65,0x3F,0x6B,0x65,0x79,0x3D
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1228): warning: .cseg .db misalignment - padding zero byte
000154 0000      	.DB  0x0
                 _0x0:
000155 6954
000156 656d
000157 2064
000158 756f      	.DB  0x54,0x69,0x6D,0x65,0x64,0x20,0x6F,0x75
000159 0d74
00015a 000a
00015b 5245
00015c 4f52      	.DB  0x74,0xD,0xA,0x0,0x45,0x52,0x52,0x4F
00015d 0052
00015e 7245
00015f 6f72
000160 2072      	.DB  0x52,0x0,0x45,0x72,0x72,0x6F,0x72,0x20
000161 6f66
000162 6e75
000163 2c64
000164 6120      	.DB  0x66,0x6F,0x75,0x6E,0x64,0x2C,0x20,0x61
000165 7474
000166 6d65
000167 7470
000168 6e69      	.DB  0x74,0x74,0x65,0x6D,0x70,0x74,0x69,0x6E
000169 2067
00016a 6f74
00016b 6320
00016c 6e6f      	.DB  0x67,0x20,0x74,0x6F,0x20,0x63,0x6F,0x6E
00016d 6974
00016e 756e
00016f 2e65
000170 0d2e      	.DB  0x74,0x69,0x6E,0x75,0x65,0x2E,0x2E,0xD
000171 000a
000172 5441
000173 432b
000174 5049      	.DB  0xA,0x0,0x41,0x54,0x2B,0x43,0x49,0x50
000175 554d
000176 3d58
000177 0031
000178 4b4f      	.DB  0x4D,0x55,0x58,0x3D,0x31,0x0,0x4F,0x4B
000179 4100
00017a 2b54
00017b 4943
00017c 5350      	.DB  0x0,0x41,0x54,0x2B,0x43,0x49,0x50,0x53
00017d 4154
00017e 5452
00017f 303d
000180 222c      	.DB  0x54,0x41,0x52,0x54,0x3D,0x30,0x2C,0x22
000181 4354
000182 2250
000183 222c
000184 7061      	.DB  0x54,0x43,0x50,0x22,0x2C,0x22,0x61,0x70
000185 2e69
000186 6874
000187 6e69
000188 7367      	.DB  0x69,0x2E,0x74,0x68,0x69,0x6E,0x67,0x73
000189 6570
00018a 6b61
00018b 632e
00018c 6d6f      	.DB  0x70,0x65,0x61,0x6B,0x2E,0x63,0x6F,0x6D
00018d 2c22
00018e 3038
00018f 2600
000190 6966      	.DB  0x22,0x2C,0x38,0x30,0x0,0x26,0x66,0x69
000191 6c65
000192 3164
000193 003d
000194 6626      	.DB  0x65,0x6C,0x64,0x31,0x3D,0x0,0x26,0x66
000195 6569
000196 646c
000197 3d32
000198 2600      	.DB  0x69,0x65,0x6C,0x64,0x32,0x3D,0x0,0x26
000199 6966
00019a 6c65
00019b 3364
00019c 003d      	.DB  0x66,0x69,0x65,0x6C,0x64,0x33,0x3D,0x0
00019d 5441
00019e 432b
00019f 5049
0001a0 4553      	.DB  0x41,0x54,0x2B,0x43,0x49,0x50,0x53,0x45
0001a1 444e
0001a2 303d
0001a3 002c
0001a4 203e      	.DB  0x4E,0x44,0x3D,0x30,0x2C,0x0,0x3E,0x20
0001a5 5300
0001a6 6e65
0001a7 6964
0001a8 676e      	.DB  0x0,0x53,0x65,0x6E,0x64,0x69,0x6E,0x67
0001a9 4400
0001aa 6e6f
0001ab 0065
0001ac 5441      	.DB  0x0,0x44,0x6F,0x6E,0x65,0x0,0x41,0x54
0001ad 0a0d
0001ae 4100
0001af 2b54
0001b0 5743      	.DB  0xD,0xA,0x0,0x41,0x54,0x2B,0x43,0x57
0001b1 4f4d
0001b2 4544
0001b3 313d
0001b4 0a0d      	.DB  0x4D,0x4F,0x44,0x45,0x3D,0x31,0xD,0xA
0001b5 4100
0001b6 2b54
0001b7 5743
0001b8 414a      	.DB  0x0,0x41,0x54,0x2B,0x43,0x57,0x4A,0x41
0001b9 3d50
0001ba 5422
0001bb 6168
0001bc 5f79      	.DB  0x50,0x3D,0x22,0x54,0x68,0x61,0x79,0x5F
0001bd 6854
0001be 6f61
0001bf 645f
0001c0 6f65      	.DB  0x54,0x68,0x61,0x6F,0x5F,0x64,0x65,0x6F
0001c1 675f
0001c2 6169
0001c3 2269
0001c4 222c      	.DB  0x5F,0x67,0x69,0x61,0x69,0x22,0x2C,0x22
0001c5 6863
0001c6 6e69
0001c7 7868
0001c8 6361      	.DB  0x63,0x68,0x69,0x6E,0x68,0x78,0x61,0x63
0001c9 0d22
0001ca 000a
0001cb 5537
0001cc 4d30      	.DB  0x22,0xD,0xA,0x0,0x37,0x55,0x30,0x4D
0001cd 5535
0001ce 4554
0001cf 584b
0001d0 3645      	.DB  0x35,0x55,0x54,0x45,0x4B,0x58,0x45,0x36
0001d1 5a34
0001d2 394b
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1261): warning: .cseg .db misalignment - padding zero byte
0001d3 0000      	.DB  0x34,0x5A,0x4B,0x39,0x0
                 _0x2020060:
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1263): warning: .cseg .db misalignment - padding zero byte
0001d4 0001      	.DB  0x1
                 _0x2020000:
0001d5 4e2d
0001d6 4e41
0001d7 4900
0001d8 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\s0lut1on\Desktop\tuoi nuoc\tram chinh\Debug\List\1.asm(1266): warning: .cseg .db misalignment - padding zero byte
0001d9 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0001da 0001      	.DW  0x01
0001db 0002      	.DW  0x02
0001dc 028c      	.DW  __REG_BIT_VARS*2
                 
0001dd 000a      	.DW  0x0A
0001de 0004      	.DW  0x04
0001df 028e      	.DW  __REG_VARS*2
                 
0001e0 000c      	.DW  0x0C
0001e1 0500      	.DW  _0x23
0001e2 02aa      	.DW  _0x0*2
                 
0001e3 000c      	.DW  0x0C
0001e4 050c      	.DW  _0x23+12
0001e5 02aa      	.DW  _0x0*2
                 
0001e6 0006      	.DW  0x06
0001e7 0518      	.DW  _0x23+24
0001e8 02b6      	.DW  _0x0*2+12
                 
0001e9 0028      	.DW  0x28
0001ea 051e      	.DW  _0x23+30
0001eb 02bc      	.DW  _0x0*2+18
                 
0001ec 000c      	.DW  0x0C
0001ed 0546      	.DW  _0x2E
0001ee 02e4      	.DW  _0x0*2+58
                 
0001ef 0003      	.DW  0x03
0001f0 0552      	.DW  _0x2E+12
0001f1 02b3      	.DW  _0x0*2+9
                 
0001f2 0003      	.DW  0x03
0001f3 0555      	.DW  _0x2E+15
0001f4 02f0      	.DW  _0x0*2+70
                 
0001f5 002c      	.DW  0x2C
0001f6 0558      	.DW  _0x2E+18
0001f7 02f3      	.DW  _0x0*2+73
                 
0001f8 0003      	.DW  0x03
0001f9 0584      	.DW  _0x2E+62
0001fa 02b3      	.DW  _0x0*2+9
                 
0001fb 0003      	.DW  0x03
0001fc 0587      	.DW  _0x2E+65
0001fd 02f0      	.DW  _0x0*2+70
                 
0001fe 0009      	.DW  0x09
0001ff 058a      	.DW  _0x2E+68
000200 031f      	.DW  _0x0*2+117
                 
000201 0009      	.DW  0x09
000202 0593      	.DW  _0x2E+77
000203 0328      	.DW  _0x0*2+126
                 
000204 0009      	.DW  0x09
000205 059c      	.DW  _0x2E+86
000206 0331      	.DW  _0x0*2+135
                 
000207 000e      	.DW  0x0E
000208 05a5      	.DW  _0x2E+95
000209 033a      	.DW  _0x0*2+144
                 
00020a 0003      	.DW  0x03
00020b 05b3      	.DW  _0x2E+109
00020c 02b3      	.DW  _0x0*2+9
                 
00020d 0003      	.DW  0x03
00020e 05b6      	.DW  _0x2E+112
00020f 0348      	.DW  _0x0*2+158
                 
000210 0008      	.DW  0x08
000211 05b9      	.DW  _0x2E+115
000212 034b      	.DW  _0x0*2+161
                 
000213 0003      	.DW  0x03
000214 05c1      	.DW  _0x2E+123
000215 02b3      	.DW  _0x0*2+9
                 
000216 0005      	.DW  0x05
000217 05c4      	.DW  _0x2E+126
000218 0353      	.DW  _0x0*2+169
                 
000219 0005      	.DW  0x05
00021a 05c9      	.DW  _0x2F
00021b 0358      	.DW  _0x0*2+174
                 
00021c 0003      	.DW  0x03
00021d 05ce      	.DW  _0x2F+5
00021e 02f0      	.DW  _0x0*2+70
                 
00021f 000e      	.DW  0x0E
000220 05d1      	.DW  _0x2F+8
000221 035d      	.DW  _0x0*2+179
                 
000222 0003      	.DW  0x03
000223 05df      	.DW  _0x2F+22
000224 02f0      	.DW  _0x0*2+70
                 
000225 002b      	.DW  0x2B
000226 05e2      	.DW  _0x2F+25
000227 036b      	.DW  _0x0*2+193
                 
000228 0003      	.DW  0x03
000229 060d      	.DW  _0x2F+68
00022a 02f0      	.DW  _0x0*2+70
                 
00022b 0011      	.DW  0x11
00022c 0610      	.DW  _0x2F+71
00022d 0396      	.DW  _0x0*2+236
                 
00022e 0001      	.DW  0x01
00022f 07c4      	.DW  __seed_G101
000230 03a8      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000231 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000232 94f8      	CLI
000233 27ee      	CLR  R30
000234 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000235 e0f1      	LDI  R31,1
000236 bff5      	OUT  MCUCR,R31
000237 bfe5      	OUT  MCUCR,R30
000238 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00023a e08d      	LDI  R24,(14-2)+1
00023b e0a2      	LDI  R26,2
00023c 27bb      	CLR  R27
                 __CLEAR_REG:
00023d 93ed      	ST   X+,R30
00023e 958a      	DEC  R24
00023f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000240 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000241 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000242 e0a0      	LDI  R26,LOW(__SRAM_START)
000243 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000244 93ed      	ST   X+,R30
000245 9701      	SBIW R24,1
000246 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000247 ebe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000248 e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000249 9185      	LPM  R24,Z+
00024a 9195      	LPM  R25,Z+
00024b 9700      	SBIW R24,0
00024c f061      	BREQ __GLOBAL_INI_END
00024d 91a5      	LPM  R26,Z+
00024e 91b5      	LPM  R27,Z+
00024f 9005      	LPM  R0,Z+
000250 9015      	LPM  R1,Z+
000251 01bf      	MOVW R22,R30
000252 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000253 9005      	LPM  R0,Z+
000254 920d      	ST   X+,R0
000255 9701      	SBIW R24,1
000256 f7e1      	BRNE __GLOBAL_INI_LOOP
000257 01fb      	MOVW R30,R22
000258 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000259 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00025a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00025b bfed      	OUT  SPL,R30
00025c e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00025d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00025e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00025f e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000260 940c 0450 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;
                 ;// Graphic Display functions
                 ;#include <glcd.h>
                 ;
                 ;// Font used for displaying text
                 ;// on the graphic display
                 ;#include <font5x7.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;char buff[260];
                 ;int i = 0, time_flow = 0, time_s = 0;
                 ;
                 ;void del_string(unsigned char *s) {
                 ; 0000 0028 void del_string(unsigned char *s) {
                 
                 	.CSEG
                 _del_string:
                 ; .FSTART _del_string
                 ; 0000 0029     while (*s) {
000262 93ba      	ST   -Y,R27
000263 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x3:
000264 81a8      	LD   R26,Y
000265 81b9      	LDD  R27,Y+1
000266 91ec      	LD   R30,X
000267 30e0      	CPI  R30,0
000268 f041      	BREQ _0x5
                 ; 0000 002A         *s = '\0';
000269 e0e0      	LDI  R30,LOW(0)
00026a 93ec      	ST   X,R30
                 ; 0000 002B         s++;
00026b 81e8      	LD   R30,Y
00026c 81f9      	LDD  R31,Y+1
00026d 9631      	ADIW R30,1
00026e 83e8      	ST   Y,R30
00026f 83f9      	STD  Y+1,R31
                 ; 0000 002C     }
000270 cff3      	RJMP _0x3
                 _0x5:
                 ; 0000 002D }
000271 c0aa      	RJMP _0x2120009
                 ; .FEND
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0000 0033 interrupt [19] void usart0_rx_isr(void) {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000272 93ea      	ST   -Y,R30
000273 93fa      	ST   -Y,R31
000274 b7ef      	IN   R30,SREG
000275 93ea      	ST   -Y,R30
                 ; 0000 0034     char status,data;
                 ; 0000 0035     status=UCSR0A;
000276 931a      	ST   -Y,R17
000277 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000278 b11b      	IN   R17,11
                 ; 0000 0036     data=UDR0;
000279 b10c      	IN   R16,12
                 ; 0000 0037     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
00027a 2fe1      	MOV  R30,R17
00027b 71ec      	ANDI R30,LOW(0x1C)
00027c f489      	BRNE _0x6
                 ; 0000 0038         rx_buffer0[rx_wr_index0++]=data;
00027d 2de5      	MOV  R30,R5
00027e 9453      	INC  R5
00027f e0f0      	LDI  R31,0
000280 5ce2      	SUBI R30,LOW(-_rx_buffer0)
000281 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
000282 8300      	ST   Z,R16
                 ; 0000 0039 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 003A         // special case for receiver buffer size=256
                 ; 0000 003B         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 003C #else
                 ; 0000 003D         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000283 e4e0      	LDI  R30,LOW(64)
000284 15e5      	CP   R30,R5
000285 f409      	BRNE _0x7
000286 2455      	CLR  R5
                 ; 0000 003E         if (++rx_counter0 == RX_BUFFER_SIZE0) {
                 _0x7:
000287 9473      	INC  R7
000288 e4e0      	LDI  R30,LOW(64)
000289 15e7      	CP   R30,R7
00028a f419      	BRNE _0x8
                 ; 0000 003F             rx_counter0=0;
00028b 2477      	CLR  R7
                 ; 0000 0040             rx_buffer_overflow0=1;
00028c 9468      	SET
00028d f820      	BLD  R2,0
                 ; 0000 0041         }
                 ; 0000 0042 #endif
                 ; 0000 0043     }
                 _0x8:
                 ; 0000 0044     buff[i] = data;
                 _0x6:
00028e 01f4      	MOVW R30,R8
00028f 58e2      	SUBI R30,LOW(-_buff)
000290 4ff9      	SBCI R31,HIGH(-_buff)
000291 8300      	ST   Z,R16
                 ; 0000 0045     i++;
000292 01f4      	MOVW R30,R8
000293 9631      	ADIW R30,1
000294 014f      	MOVW R8,R30
                 ; 0000 0046 }
000295 9109      	LD   R16,Y+
000296 9119      	LD   R17,Y+
000297 c04a      	RJMP _0x34
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0000 004C char getchar(void) {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 004D     char data;
                 ; 0000 004E     while (rx_counter0==0);
000298 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x9:
000299 2077      	TST  R7
00029a f3f1      	BREQ _0x9
                 ; 0000 004F     data=rx_buffer0[rx_rd_index0++];
00029b 2de4      	MOV  R30,R4
00029c 9443      	INC  R4
00029d e0f0      	LDI  R31,0
00029e 5ce2      	SUBI R30,LOW(-_rx_buffer0)
00029f 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0002a0 8110      	LD   R17,Z
                 ; 0000 0050 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0051     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0002a1 e4e0      	LDI  R30,LOW(64)
0002a2 15e4      	CP   R30,R4
0002a3 f409      	BRNE _0xC
0002a4 2444      	CLR  R4
                 ; 0000 0052 #endif
                 ; 0000 0053 #asm("cli")
                 _0xC:
0002a5 94f8      	cli
                 ; 0000 0054     --rx_counter0;
0002a6 947a      	DEC  R7
                 ; 0000 0055 #asm("sei")
0002a7 9478      	sei
                 ; 0000 0056     return data;
0002a8 2fe1      	MOV  R30,R17
0002a9 9119      	LD   R17,Y+
0002aa 9508      	RET
                 ; 0000 0057 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void) {
                 ; 0000 006C interrupt [21] void usart0_tx_isr(void) {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0002ab 93aa      	ST   -Y,R26
0002ac 93ea      	ST   -Y,R30
0002ad 93fa      	ST   -Y,R31
0002ae b7ef      	IN   R30,SREG
0002af 93ea      	ST   -Y,R30
                 ; 0000 006D     if (tx_counter0) {
0002b0 91e0 07c3 	LDS  R30,_tx_counter0
0002b2 30e0      	CPI  R30,0
0002b3 f0a9      	BREQ _0xD
                 ; 0000 006E         --tx_counter0;
0002b4 50e1      	SUBI R30,LOW(1)
0002b5 93e0 07c3 	STS  _tx_counter0,R30
                 ; 0000 006F         UDR0=tx_buffer0[tx_rd_index0++];
0002b7 91e0 07c2 	LDS  R30,_tx_rd_index0
0002b9 5fef      	SUBI R30,-LOW(1)
0002ba 93e0 07c2 	STS  _tx_rd_index0,R30
0002bc 50e1      	SUBI R30,LOW(1)
0002bd e0f0      	LDI  R31,0
0002be 57ee      	SUBI R30,LOW(-_tx_buffer0)
0002bf 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0002c0 81e0      	LD   R30,Z
0002c1 b9ec      	OUT  0xC,R30
                 ; 0000 0070 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0071         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0002c2 91a0 07c2 	LDS  R26,_tx_rd_index0
0002c4 34a0      	CPI  R26,LOW(0x40)
0002c5 f419      	BRNE _0xE
0002c6 e0e0      	LDI  R30,LOW(0)
0002c7 93e0 07c2 	STS  _tx_rd_index0,R30
                 ; 0000 0072 #endif
                 ; 0000 0073     }
                 _0xE:
                 ; 0000 0074 }
                 _0xD:
0002c9 91e9      	LD   R30,Y+
0002ca bfef      	OUT  SREG,R30
0002cb 91f9      	LD   R31,Y+
0002cc 91e9      	LD   R30,Y+
0002cd 91a9      	LD   R26,Y+
0002ce 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0076 interrupt [17] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0002cf 93ea      	ST   -Y,R30
0002d0 93fa      	ST   -Y,R31
0002d1 b7ef      	IN   R30,SREG
0002d2 93ea      	ST   -Y,R30
                 ; 0000 0077 	//0.02 ms => 50k = 1s.
                 ; 0000 0078 	TCNT0=0x60;
0002d3 e6e0      	LDI  R30,LOW(96)
0002d4 bfe2      	OUT  0x32,R30
                 ; 0000 0079 	// Place your code here
                 ; 0000 007A     time_flow++;
0002d5 01f5      	MOVW R30,R10
0002d6 9631      	ADIW R30,1
0002d7 015f      	MOVW R10,R30
                 ; 0000 007B 
                 ; 0000 007C     if (time_flow == 50000) {
0002d8 e5e0      	LDI  R30,LOW(50000)
0002d9 ecf3      	LDI  R31,HIGH(50000)
0002da 15ea      	CP   R30,R10
0002db 05fb      	CPC  R31,R11
0002dc f429      	BRNE _0xF
                 ; 0000 007D         time_s++;
0002dd 01f6      	MOVW R30,R12
0002de 9631      	ADIW R30,1
0002df 016f      	MOVW R12,R30
                 ; 0000 007E         time_flow = 0;
0002e0 24aa      	CLR  R10
0002e1 24bb      	CLR  R11
                 ; 0000 007F     }
                 ; 0000 0080 }
                 _0xF:
                 _0x34:
0002e2 91e9      	LD   R30,Y+
0002e3 bfef      	OUT  SREG,R30
0002e4 91f9      	LD   R31,Y+
0002e5 91e9      	LD   R30,Y+
0002e6 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c) {
                 ; 0000 0086 void putchar(char c) {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0087     while (tx_counter0 == TX_BUFFER_SIZE0);
0002e7 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x10:
0002e8 91a0 07c3 	LDS  R26,_tx_counter0
0002ea 34a0      	CPI  R26,LOW(0x40)
0002eb f3e1      	BREQ _0x10
                 ; 0000 0088 #asm("cli")
0002ec 94f8      	cli
                 ; 0000 0089     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
0002ed 91e0 07c3 	LDS  R30,_tx_counter0
0002ef 30e0      	CPI  R30,0
0002f0 f411      	BRNE _0x14
0002f1 995d      	SBIC 0xB,5
0002f2 c011      	RJMP _0x13
                 _0x14:
                 ; 0000 008A         tx_buffer0[tx_wr_index0++]=c;
0002f3 2de6      	MOV  R30,R6
0002f4 9463      	INC  R6
0002f5 e0f0      	LDI  R31,0
0002f6 57ee      	SUBI R30,LOW(-_tx_buffer0)
0002f7 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0002f8 81a8      	LD   R26,Y
0002f9 83a0      	STD  Z+0,R26
                 ; 0000 008B #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008C         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0002fa e4e0      	LDI  R30,LOW(64)
0002fb 15e6      	CP   R30,R6
0002fc f409      	BRNE _0x16
0002fd 2466      	CLR  R6
                 ; 0000 008D #endif
                 ; 0000 008E         ++tx_counter0;
                 _0x16:
0002fe 91e0 07c3 	LDS  R30,_tx_counter0
000300 5fef      	SUBI R30,-LOW(1)
000301 93e0 07c3 	STS  _tx_counter0,R30
                 ; 0000 008F     } else
000303 c002      	RJMP _0x17
                 _0x13:
                 ; 0000 0090         UDR0=c;
000304 81e8      	LD   R30,Y
000305 b9ec      	OUT  0xC,R30
                 ; 0000 0091 #asm("sei")
                 _0x17:
000306 9478      	sei
                 ; 0000 0092 }
000307 940c 0649 	JMP  _0x2120008
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void put_string (unsigned char *s) {
                 ; 0000 0099 void put_string (unsigned char *s) {
                 _put_string:
                 ; .FSTART _put_string
                 ; 0000 009A     while(*s) {
000309 93ba      	ST   -Y,R27
00030a 93aa      	ST   -Y,R26
                 ;	*s -> Y+0
                 _0x18:
00030b 81a8      	LD   R26,Y
00030c 81b9      	LDD  R27,Y+1
00030d 91ec      	LD   R30,X
00030e 30e0      	CPI  R30,0
00030f f061      	BREQ _0x1A
                 ; 0000 009B         putchar(*s);
000310 91ac      	LD   R26,X
000311 dfd5      	RCALL _putchar
                 ; 0000 009C 		delay_ms(50);
000312 e3a2      	LDI  R26,LOW(50)
000313 e0b0      	LDI  R27,0
000314 940e 0ae1 	CALL _delay_ms
                 ; 0000 009D         s++;
000316 81e8      	LD   R30,Y
000317 81f9      	LDD  R31,Y+1
000318 9631      	ADIW R30,1
000319 83e8      	ST   Y,R30
00031a 83f9      	STD  Y+1,R31
                 ; 0000 009E     }
00031b cfef      	RJMP _0x18
                 _0x1A:
                 ; 0000 009F }
                 _0x2120009:
00031c 9622      	ADIW R28,2
00031d 9508      	RET
                 ; .FEND
                 ;
                 ;void refresh(int time_ms) {
                 ; 0000 00A1 void refresh(int time_ms) {
                 _refresh:
                 ; .FSTART _refresh
                 ; 0000 00A2     int j;
                 ; 0000 00A3 
                 ; 0000 00A4 	delay_ms(time_ms);
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 931a      	ST   -Y,R17
000321 930a      	ST   -Y,R16
                 ;	time_ms -> Y+2
                 ;	j -> R16,R17
000322 81aa      	LDD  R26,Y+2
000323 81bb      	LDD  R27,Y+2+1
000324 940e 0a20 	CALL SUBOPT_0x0
                 ; 0000 00A5 
                 ; 0000 00A6     glcd_clear();
                 ; 0000 00A7     glcd_moveto(0,0);
                 ; 0000 00A8 
                 ; 0000 00A9     glcd_outtext(buff);
000326 e7ae      	LDI  R26,LOW(_buff)
000327 e0b6      	LDI  R27,HIGH(_buff)
000328 940e 0993 	CALL _glcd_outtext
                 ; 0000 00AA 
                 ; 0000 00AB     del_string(buff);
00032a e7ae      	LDI  R26,LOW(_buff)
00032b e0b6      	LDI  R27,HIGH(_buff)
00032c df35      	RCALL _del_string
                 ; 0000 00AC 
                 ; 0000 00AD     i = 0;
00032d 2488      	CLR  R8
00032e 2499      	CLR  R9
                 ; 0000 00AE 
                 ; 0000 00AF 
                 ; 0000 00B0 
                 ; 0000 00B1 }
00032f 8119      	LDD  R17,Y+1
000330 8108      	LDD  R16,Y+0
000331 9624      	ADIW R28,4
000332 9508      	RET
                 ; .FEND
                 ;
                 ;void wait_until(unsigned char *keyword, int time_out_s) {
                 ; 0000 00B3 void wait_until(unsigned char *keyword, int time_out_s) {
                 _wait_until:
                 ; .FSTART _wait_until
                 ; 0000 00B4 	/* 	deu biet cai temp2 de lam gi nhung khong co thi no khong chay trong 1 so truong hop @@
                 ; 0000 00B5 		Vi du nhap vao "Hell" thi no se tach thua ra them 2 char. Co the do vi tri o nho. Cha biet @@*/
                 ; 0000 00B6 	char temp[20], temp2[20];
                 ; 0000 00B7 	int i = 0, time_start, time_temp;
                 ; 0000 00B8 
                 ; 0000 00B9 	del_string(temp);
000333 93ba      	ST   -Y,R27
000334 93aa      	ST   -Y,R26
000335 97a8      	SBIW R28,40
000336 940e 0b28 	CALL __SAVELOCR6
                 ;	*keyword -> Y+48
                 ;	time_out_s -> Y+46
                 ;	temp -> Y+26
                 ;	temp2 -> Y+6
                 ;	i -> R16,R17
                 ;	time_start -> R18,R19
                 ;	time_temp -> R20,R21
                +
000338 e000     +LDI R16 , LOW ( 0 )
000339 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00033a 01de      	MOVW R26,R28
00033b 965a      	ADIW R26,26
00033c df25      	RCALL _del_string
                 ; 0000 00BA 
                 ; 0000 00BB 	while (*keyword) {
                 _0x1B:
00033d a9a8      	LDD  R26,Y+48
00033e a9b9      	LDD  R27,Y+48+1
00033f 91ec      	LD   R30,X
000340 30e0      	CPI  R30,0
000341 f101      	BREQ _0x1D
                 ; 0000 00BC 		temp[i] = *keyword;
000342 01f8      	MOVW R30,R16
000343 01de      	MOVW R26,R28
000344 965a      	ADIW R26,26
000345 0fea      	ADD  R30,R26
000346 1ffb      	ADC  R31,R27
000347 010f      	MOVW R0,R30
000348 a9a8      	LDD  R26,Y+48
000349 a9b9      	LDD  R27,Y+48+1
00034a 91ec      	LD   R30,X
00034b 01d0      	MOVW R26,R0
00034c 93ec      	ST   X,R30
                 ; 0000 00BD 		temp2[i] = temp[i];
00034d 01f8      	MOVW R30,R16
00034e 01de      	MOVW R26,R28
00034f 9616      	ADIW R26,6
000350 0fea      	ADD  R30,R26
000351 1ffb      	ADC  R31,R27
000352 010f      	MOVW R0,R30
000353 01de      	MOVW R26,R28
000354 965a      	ADIW R26,26
000355 0fa0      	ADD  R26,R16
000356 1fb1      	ADC  R27,R17
000357 91ec      	LD   R30,X
000358 01d0      	MOVW R26,R0
000359 93ec      	ST   X,R30
                 ; 0000 00BE 		keyword++;
00035a a9e8      	LDD  R30,Y+48
00035b a9f9      	LDD  R31,Y+48+1
00035c 9631      	ADIW R30,1
00035d abe8      	STD  Y+48,R30
00035e abf9      	STD  Y+48+1,R31
                 ; 0000 00BF 		i++;
                +
00035f 5f0f     +SUBI R16 , LOW ( - 1 )
000360 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00C0 	}
000361 cfdb      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00C1 
                 ; 0000 00C2 	time_start = time_s;
000362 0196      	MOVW R18,R12
                 ; 0000 00C3 
                 ; 0000 00C4 	while (1) {
                 _0x1E:
                 ; 0000 00C5 		if (time_s < time_start) {
                +
000363 16c2     +CP R12 , R18
000364 06d3     +CPC R13 , R19
                 	__CPWRR 12,13,18,19
000365 f46c      	BRGE _0x21
                 ; 0000 00C6 			time_temp = time_s + 60;
000366 01f6      	MOVW R30,R12
000367 96fc      	ADIW R30,60
000368 01af      	MOVW R20,R30
                 ; 0000 00C7 			if (time_temp - time_start > time_out_s) {
000369 01da      	MOVW R26,R20
00036a 940e 0a29 	CALL SUBOPT_0x1
00036c f42c      	BRGE _0x22
                 ; 0000 00C8 				glcd_outtext("Timed out\r\n");
                +
00036d e0a0     +LDI R26 , LOW ( _0x23 + ( 0 ) )
00036e e0b5     +LDI R27 , HIGH ( _0x23 + ( 0 ) )
                 	__POINTW2MN _0x23,0
00036f 940e 0993 	CALL _glcd_outtext
                 ; 0000 00C9 				break;
000371 c02d      	RJMP _0x20
                 ; 0000 00CA 			}
                 ; 0000 00CB 		} else {
                 _0x22:
000372 c009      	RJMP _0x24
                 _0x21:
                 ; 0000 00CC 			if (time_s - time_start > time_out_s) {
000373 01d6      	MOVW R26,R12
000374 940e 0a29 	CALL SUBOPT_0x1
000376 f42c      	BRGE _0x25
                 ; 0000 00CD 				glcd_outtext("Timed out\r\n");
                +
000377 e0ac     +LDI R26 , LOW ( _0x23 + ( 12 ) )
000378 e0b5     +LDI R27 , HIGH ( _0x23 + ( 12 ) )
                 	__POINTW2MN _0x23,12
000379 940e 0993 	CALL _glcd_outtext
                 ; 0000 00CE 				break;
00037b c023      	RJMP _0x20
                 ; 0000 00CF 			}
                 ; 0000 00D0 		}
                 _0x25:
                 _0x24:
                 ; 0000 00D1 
                 ; 0000 00D2 		if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
00037c 940e 0a30 	CALL SUBOPT_0x2
00037e 01de      	MOVW R26,R28
00037f 965c      	ADIW R26,28
000380 940e 051d 	CALL _strstr
000382 9730      	SBIW R30,0
000383 f441      	BRNE _0x27
000384 940e 0a30 	CALL SUBOPT_0x2
000386 01de      	MOVW R26,R28
000387 9618      	ADIW R26,8
000388 940e 051d 	CALL _strstr
00038a 9730      	SBIW R30,0
00038b f009      	BREQ _0x26
                 _0x27:
                 ; 0000 00D3 			break;
00038c c012      	RJMP _0x20
                 ; 0000 00D4 		}
                 ; 0000 00D5 		if (strstr(buff, "ERROR")) {
                 _0x26:
00038d 940e 0a30 	CALL SUBOPT_0x2
                +
00038f e1a8     +LDI R26 , LOW ( _0x23 + ( 24 ) )
000390 e0b5     +LDI R27 , HIGH ( _0x23 + ( 24 ) )
                 	__POINTW2MN _0x23,24
000391 940e 051d 	CALL _strstr
000393 9730      	SBIW R30,0
000394 f049      	BREQ _0x29
                 ; 0000 00D6 			glcd_outtext("Error found, attempting to continue..\r\n");
                +
000395 e1ae     +LDI R26 , LOW ( _0x23 + ( 30 ) )
000396 e0b5     +LDI R27 , HIGH ( _0x23 + ( 30 ) )
                 	__POINTW2MN _0x23,30
000397 940e 0993 	CALL _glcd_outtext
                 ; 0000 00D7 			delay_ms(3000);
000399 eba8      	LDI  R26,LOW(3000)
00039a e0bb      	LDI  R27,HIGH(3000)
00039b 940e 0a20 	CALL SUBOPT_0x0
                 ; 0000 00D8 			glcd_clear();
                 ; 0000 00D9 			glcd_moveto(0,0);
                 ; 0000 00DA 			break;
00039d c001      	RJMP _0x20
                 ; 0000 00DB 			//nen lam them ve cai nay nua
                 ; 0000 00DC 		}
                 ; 0000 00DD 	}
                 _0x29:
00039e cfc4      	RJMP _0x1E
                 _0x20:
                 ; 0000 00DE }
00039f 940e 0b2f 	CALL __LOADLOCR6
0003a1 96e2      	ADIW R28,50
0003a2 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x23:
000500           	.BYTE 0x46
                 ;
                 ;void read_and_send(unsigned char *s){
                 ; 0000 00E0 void read_and_send(unsigned char *s){
                 
                 	.CSEG
                 _read_and_send:
                 ; .FSTART _read_and_send
                 ; 0000 00E1     // Thay nhung ham respones_read bang ham wait_until
                 ; 0000 00E2     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
                 ; 0000 00E3     int length = 0, i = 0;
                 ; 0000 00E4 
                 ; 0000 00E5 	while (*s) {
0003a3 93ba      	ST   -Y,R27
0003a4 93aa      	ST   -Y,R26
0003a5 97ef      	SBIW R28,63
0003a6 972e      	SBIW R28,14
0003a7 e181      	LDI  R24,17
0003a8 e2a8      	LDI  R26,LOW(40)
0003a9 e0b0      	LDI  R27,HIGH(40)
0003aa e9e8      	LDI  R30,LOW(_0x2A*2)
0003ab e0f2      	LDI  R31,HIGH(_0x2A*2)
0003ac 940e 0b36 	CALL __INITLOCB
0003ae 940e 0b2a 	CALL __SAVELOCR4
                 ;	*s -> Y+81
                 ;	api_key -> Y+61
                 ;	cmd -> Y+44
                 ;	temp -> Y+24
                 ;	temp2 -> Y+4
                 ;	length -> R16,R17
                 ;	i -> R18,R19
                +
0003b0 e000     +LDI R16 , LOW ( 0 )
0003b1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003b2 e020     +LDI R18 , LOW ( 0 )
0003b3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2B:
0003b4 940e 0a35 	CALL SUBOPT_0x3
0003b6 30e0      	CPI  R30,0
0003b7 f0f9      	BREQ _0x2D
                 ; 0000 00E6         temp2[i] = *s;
0003b8 01f9      	MOVW R30,R18
0003b9 01de      	MOVW R26,R28
0003ba 9614      	ADIW R26,4
0003bb 0fea      	ADD  R30,R26
0003bc 1ffb      	ADC  R31,R27
0003bd 01bf      	MOVW R22,R30
0003be 940e 0a35 	CALL SUBOPT_0x3
0003c0 01db      	MOVW R26,R22
0003c1 93ec      	ST   X,R30
                 ; 0000 00E7 		api_key[i] = temp2[i];
0003c2 01f9      	MOVW R30,R18
0003c3 01de      	MOVW R26,R28
0003c4 96dd      	ADIW R26,61
0003c5 0fea      	ADD  R30,R26
0003c6 1ffb      	ADC  R31,R27
0003c7 010f      	MOVW R0,R30
0003c8 01de      	MOVW R26,R28
0003c9 9614      	ADIW R26,4
0003ca 0fa2      	ADD  R26,R18
0003cb 1fb3      	ADC  R27,R19
0003cc 91ec      	LD   R30,X
0003cd 01d0      	MOVW R26,R0
0003ce 93ec      	ST   X,R30
                 ; 0000 00E8         s++;
0003cf 01de      	MOVW R26,R28
0003d0 5aaf      	SUBI R26,LOW(-(81))
0003d1 4fbf      	SBCI R27,HIGH(-(81))
0003d2 940e 0a3d 	CALL SUBOPT_0x4
                 ; 0000 00E9         i++;
                +
0003d4 5f2f     +SUBI R18 , LOW ( - 1 )
0003d5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00EA     }
0003d6 cfdd      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00EB 
                 ; 0000 00EC 
                 ; 0000 00ED     // glcd_clear();
                 ; 0000 00EE 	// glcd_moveto(0,0);
                 ; 0000 00EF 	// glcd_outtext("Wifi connected");
                 ; 0000 00F0 
                 ; 0000 00F1 	put_string("AT+CIPMUX=1");
                +
0003d7 e4a6     +LDI R26 , LOW ( _0x2E + ( 0 ) )
0003d8 e0b5     +LDI R27 , HIGH ( _0x2E + ( 0 ) )
                 	__POINTW2MN _0x2E,0
0003d9 940e 0a43 	CALL SUBOPT_0x5
                 ; 0000 00F2 	delay_ms(300);
                 ; 0000 00F3 	put_string("\r\n");
                +
0003db e5a2     +LDI R26 , LOW ( _0x2E + ( 12 ) )
0003dc e0b5     +LDI R27 , HIGH ( _0x2E + ( 12 ) )
                 	__POINTW2MN _0x2E,12
0003dd df2b      	RCALL _put_string
                 ; 0000 00F4     wait_until("OK", 2);
                +
0003de e5e5     +LDI R30 , LOW ( _0x2E + ( 15 ) )
0003df e0f5     +LDI R31 , HIGH ( _0x2E + ( 15 ) )
                 	__POINTW1MN _0x2E,15
0003e0 940e 0a49 	CALL SUBOPT_0x6
                 ; 0000 00F5     refresh(0);
                 ; 0000 00F6 
                 ; 0000 00F7     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
                +
0003e2 e5a8     +LDI R26 , LOW ( _0x2E + ( 18 ) )
0003e3 e0b5     +LDI R27 , HIGH ( _0x2E + ( 18 ) )
                 	__POINTW2MN _0x2E,18
0003e4 940e 0a43 	CALL SUBOPT_0x5
                 ; 0000 00F8 	delay_ms(300);
                 ; 0000 00F9 	put_string("\r\n");
                +
0003e6 e8a4     +LDI R26 , LOW ( _0x2E + ( 62 ) )
0003e7 e0b5     +LDI R27 , HIGH ( _0x2E + ( 62 ) )
                 	__POINTW2MN _0x2E,62
0003e8 df20      	RCALL _put_string
                 ; 0000 00FA     wait_until("OK", 20);
                +
0003e9 e8e7     +LDI R30 , LOW ( _0x2E + ( 65 ) )
0003ea e0f5     +LDI R31 , HIGH ( _0x2E + ( 65 ) )
                 	__POINTW1MN _0x2E,65
0003eb 93fa      	ST   -Y,R31
0003ec 93ea      	ST   -Y,R30
0003ed e1a4      	LDI  R26,LOW(20)
0003ee e0b0      	LDI  R27,0
0003ef df43      	RCALL _wait_until
                 ; 0000 00FB 	refresh(2000);
0003f0 eda0      	LDI  R26,LOW(2000)
0003f1 e0b7      	LDI  R27,HIGH(2000)
0003f2 df2b      	RCALL _refresh
                 ; 0000 00FC 
                 ; 0000 00FD 	glcd_clear();
0003f3 940e 0a53 	CALL SUBOPT_0x7
                 ; 0000 00FE 	glcd_moveto(0,0);
                 ; 0000 00FF 	// glcd_outtext("Server connected");
                 ; 0000 0100 
                 ; 0000 0101     strcat(cmd, temp2);
0003f5 940e 0a5a 	CALL SUBOPT_0x8
0003f7 01de      	MOVW R26,R28
0003f8 9616      	ADIW R26,6
0003f9 940e 0a5f 	CALL SUBOPT_0x9
                 ; 0000 0102     strcat(cmd, "&field1=");
                +
0003fb e8aa     +LDI R26 , LOW ( _0x2E + ( 68 ) )
0003fc e0b5     +LDI R27 , HIGH ( _0x2E + ( 68 ) )
                 	__POINTW2MN _0x2E,68
0003fd 940e 0a62 	CALL SUBOPT_0xA
                 ; 0000 0103 
                 ; 0000 0104     // itoa(station_receive.temp, cmd);
                 ; 0000 0105 
                 ; 0000 0106     itoa(200, temp);
                 ; 0000 0107 	strcat(cmd, temp);
0003ff 01de      	MOVW R26,R28
000400 965a      	ADIW R26,26
000401 940e 0a5f 	CALL SUBOPT_0x9
                 ; 0000 0108 
                 ; 0000 0109     strcat(cmd, "&field2=");
                +
000403 e9a3     +LDI R26 , LOW ( _0x2E + ( 77 ) )
000404 e0b5     +LDI R27 , HIGH ( _0x2E + ( 77 ) )
                 	__POINTW2MN _0x2E,77
000405 940e 0a62 	CALL SUBOPT_0xA
                 ; 0000 010A     // itoa(station_receive.humi, cmd);
                 ; 0000 010B     itoa(200, temp);
                 ; 0000 010C 	strcat(cmd, temp);
000407 01de      	MOVW R26,R28
000408 965a      	ADIW R26,26
000409 940e 0a5f 	CALL SUBOPT_0x9
                 ; 0000 010D 
                 ; 0000 010E     strcat(cmd, "&field3=");
                +
00040b e9ac     +LDI R26 , LOW ( _0x2E + ( 86 ) )
00040c e0b5     +LDI R27 , HIGH ( _0x2E + ( 86 ) )
                 	__POINTW2MN _0x2E,86
00040d 940e 0a62 	CALL SUBOPT_0xA
                 ; 0000 010F     // itoa(station_receive.water, cmd);
                 ; 0000 0110     itoa(200, temp);
                 ; 0000 0111 	strcat(cmd, temp);
00040f 01de      	MOVW R26,R28
000410 965a      	ADIW R26,26
000411 940e 0500 	CALL _strcat
                 ; 0000 0112 
                 ; 0000 0113 
                 ; 0000 0114 	// glcd_outtext(cmd);
                 ; 0000 0115 
                 ; 0000 0116 	length = strlen(cmd);
000413 01de      	MOVW R26,R28
000414 969c      	ADIW R26,44
000415 940e 0511 	CALL _strlen
000417 018f      	MOVW R16,R30
                 ; 0000 0117 	length += 2;
                +
000418 5f0e     +SUBI R16 , LOW ( - 2 )
000419 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ; 0000 0118 
                 ; 0000 0119 	itoa(length, temp);
00041a 931a      	ST   -Y,R17
00041b 930a      	ST   -Y,R16
00041c 01de      	MOVW R26,R28
00041d 965a      	ADIW R26,26
00041e 940e 0534 	CALL _itoa
                 ; 0000 011A 
                 ; 0000 011B 	// for (i = 0; i < 260; i++) {
                 ; 0000 011C 		// buff[i] = '\0';
                 ; 0000 011D 	// }
                 ; 0000 011E 	// i = 0;
                 ; 0000 011F 
                 ; 0000 0120 	del_string(buff);
000420 e7ae      	LDI  R26,LOW(_buff)
000421 e0b6      	LDI  R27,HIGH(_buff)
000422 940e 0262 	CALL _del_string
                 ; 0000 0121 
                 ; 0000 0122     put_string("AT+CIPSEND=0,");
                +
000424 eaa5     +LDI R26 , LOW ( _0x2E + ( 95 ) )
000425 e0b5     +LDI R27 , HIGH ( _0x2E + ( 95 ) )
                 	__POINTW2MN _0x2E,95
000426 dee2      	RCALL _put_string
                 ; 0000 0123     put_string(temp);
000427 01de      	MOVW R26,R28
000428 9658      	ADIW R26,24
000429 940e 0a6d 	CALL SUBOPT_0xB
                 ; 0000 0124 	delay_ms(1000);
                 ; 0000 0125     put_string("\r\n");
                +
00042b eba3     +LDI R26 , LOW ( _0x2E + ( 109 ) )
00042c e0b5     +LDI R27 , HIGH ( _0x2E + ( 109 ) )
                 	__POINTW2MN _0x2E,109
00042d dedb      	RCALL _put_string
                 ; 0000 0126 
                 ; 0000 0127     wait_until("> ", 5);
                +
00042e ebe6     +LDI R30 , LOW ( _0x2E + ( 112 ) )
00042f e0f5     +LDI R31 , HIGH ( _0x2E + ( 112 ) )
                 	__POINTW1MN _0x2E,112
000430 93fa      	ST   -Y,R31
000431 93ea      	ST   -Y,R30
000432 e0a5      	LDI  R26,LOW(5)
000433 e0b0      	LDI  R27,0
000434 defe      	RCALL _wait_until
                 ; 0000 0128 
                 ; 0000 0129 	glcd_clear();
000435 940e 0a53 	CALL SUBOPT_0x7
                 ; 0000 012A 	glcd_moveto(0,0);
                 ; 0000 012B 	glcd_outtext("Sending");
                +
000437 eba9     +LDI R26 , LOW ( _0x2E + ( 115 ) )
000438 e0b5     +LDI R27 , HIGH ( _0x2E + ( 115 ) )
                 	__POINTW2MN _0x2E,115
000439 940e 0993 	CALL _glcd_outtext
                 ; 0000 012C 
                 ; 0000 012D     put_string(cmd);
00043b 01de      	MOVW R26,R28
00043c 969c      	ADIW R26,44
00043d decb      	RCALL _put_string
                 ; 0000 012E 	put_string("\r\n");
                +
00043e eca1     +LDI R26 , LOW ( _0x2E + ( 123 ) )
00043f e0b5     +LDI R27 , HIGH ( _0x2E + ( 123 ) )
                 	__POINTW2MN _0x2E,123
000440 940e 0a6d 	CALL SUBOPT_0xB
                 ; 0000 012F     delay_ms(1000);
                 ; 0000 0130     putchar(0x1A);
000442 e1aa      	LDI  R26,LOW(26)
000443 dea3      	RCALL _putchar
                 ; 0000 0131 
                 ; 0000 0132 	refresh(0);
000444 e0a0      	LDI  R26,LOW(0)
000445 e0b0      	LDI  R27,0
000446 ded7      	RCALL _refresh
                 ; 0000 0133 
                 ; 0000 0134 	glcd_outtext("Done");
                +
000447 eca4     +LDI R26 , LOW ( _0x2E + ( 126 ) )
000448 e0b5     +LDI R27 , HIGH ( _0x2E + ( 126 ) )
                 	__POINTW2MN _0x2E,126
000449 940e 0993 	CALL _glcd_outtext
                 ; 0000 0135 
                 ; 0000 0136     /*if(check_ok==1){
                 ; 0000 0137         glcd_moveto(0,0);
                 ; 0000 0138         glcd_outtext("done");
                 ; 0000 0139     }
                 ; 0000 013A 
                 ; 0000 013B     delay_ms(1000); */
                 ; 0000 013C }
00044b 940e 0b31 	CALL __LOADLOCR4
00044d 96ef      	ADIW R28,63
00044e 9664      	ADIW R28,20
00044f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x2E:
000546           	.BYTE 0x83
                 ;
                 ;void main(void) {
                 ; 0000 013E void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 013F 
                 ; 0000 0140     char temp;
                 ; 0000 0141 // Declare your local variables here
                 ; 0000 0142 // Variable used to store graphic display
                 ; 0000 0143 // controller initialization data
                 ; 0000 0144     GLCDINIT_t glcd_init_data;
                 ; 0000 0145 
                 ; 0000 0146 // Input/Output Ports initialization
                 ; 0000 0147 // Port A initialization
                 ; 0000 0148 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0149     DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000450 9728      	SBIW R28,8
                 ;	temp -> R17
                 ;	glcd_init_data -> Y+0
000451 e4e0      	LDI  R30,LOW(64)
000452 bbea      	OUT  0x1A,R30
                 ; 0000 014A // State: Bit7=T Bit6=1 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 014B     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000453 e0e0      	LDI  R30,LOW(0)
000454 bbeb      	OUT  0x1B,R30
                 ; 0000 014C 
                 ; 0000 014D // Port B initialization
                 ; 0000 014E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 014F     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000455 bbe7      	OUT  0x17,R30
                 ; 0000 0150 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0151     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000456 bbe8      	OUT  0x18,R30
                 ; 0000 0152 
                 ; 0000 0153 // Port C initialization
                 ; 0000 0154 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0155     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000457 bbe4      	OUT  0x14,R30
                 ; 0000 0156 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0157     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000458 bbe5      	OUT  0x15,R30
                 ; 0000 0158 
                 ; 0000 0159 // Port D initialization
                 ; 0000 015A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 015B     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000459 bbe1      	OUT  0x11,R30
                 ; 0000 015C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 015D     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00045a bbe2      	OUT  0x12,R30
                 ; 0000 015E 
                 ; 0000 015F // Port E initialization
                 ; 0000 0160 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0161     DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
00045b b9e2      	OUT  0x2,R30
                 ; 0000 0162 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0163     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
00045c b9e3      	OUT  0x3,R30
                 ; 0000 0164 
                 ; 0000 0165 // Port F initialization
                 ; 0000 0166 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0167     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
00045d 93e0 0061 	STS  97,R30
                 ; 0000 0168 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0169     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
00045f 93e0 0062 	STS  98,R30
                 ; 0000 016A 
                 ; 0000 016B // Port G initialization
                 ; 0000 016C // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 016D     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
000461 93e0 0064 	STS  100,R30
                 ; 0000 016E // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 016F     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
000463 93e0 0065 	STS  101,R30
                 ; 0000 0170 
                 ; 0000 0171 // Timer/Counter 0 initialization
                 ; 0000 0172 // Clock source: System Clock
                 ; 0000 0173 // Clock value: 8000.000 kHz
                 ; 0000 0174 // Mode: Normal top=0xFF
                 ; 0000 0175 // OC0 output: Disconnected
                 ; 0000 0176 // Timer Period: 0.02 ms
                 ; 0000 0177 
                 ; 0000 0178         ASSR=0<<AS0;
000465 bfe0      	OUT  0x30,R30
                 ; 0000 0179         TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
000466 e0e1      	LDI  R30,LOW(1)
000467 bfe3      	OUT  0x33,R30
                 ; 0000 017A         TCNT0=0x60;
000468 e6e0      	LDI  R30,LOW(96)
000469 bfe2      	OUT  0x32,R30
                 ; 0000 017B         OCR0=0x00;
00046a e0e0      	LDI  R30,LOW(0)
00046b bfe1      	OUT  0x31,R30
                 ; 0000 017C 
                 ; 0000 017D // Timer/Counter 1 initialization
                 ; 0000 017E // Clock source: System Clock
                 ; 0000 017F // Clock value: Timer1 Stopped
                 ; 0000 0180 // Mode: Normal top=0xFFFF
                 ; 0000 0181 // OC1A output: Disconnected
                 ; 0000 0182 // OC1B output: Disconnected
                 ; 0000 0183 // OC1C output: Disconnected
                 ; 0000 0184 // Noise Canceler: Off
                 ; 0000 0185 // Input Capture on Falling Edge
                 ; 0000 0186 // Timer1 Overflow Interrupt: Off
                 ; 0000 0187 // Input Capture Interrupt: Off
                 ; 0000 0188 // Compare A Match Interrupt: Off
                 ; 0000 0189 // Compare B Match Interrupt: Off
                 ; 0000 018A // Compare C Match Interrupt: Off
                 ; 0000 018B     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
00046c bdef      	OUT  0x2F,R30
                 ; 0000 018C     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00046d bdee      	OUT  0x2E,R30
                 ; 0000 018D     TCNT1H=0x00;
00046e bded      	OUT  0x2D,R30
                 ; 0000 018E     TCNT1L=0x00;
00046f bdec      	OUT  0x2C,R30
                 ; 0000 018F     ICR1H=0x00;
000470 bde7      	OUT  0x27,R30
                 ; 0000 0190     ICR1L=0x00;
000471 bde6      	OUT  0x26,R30
                 ; 0000 0191     OCR1AH=0x00;
000472 bdeb      	OUT  0x2B,R30
                 ; 0000 0192     OCR1AL=0x00;
000473 bdea      	OUT  0x2A,R30
                 ; 0000 0193     OCR1BH=0x00;
000474 bde9      	OUT  0x29,R30
                 ; 0000 0194     OCR1BL=0x00;
000475 bde8      	OUT  0x28,R30
                 ; 0000 0195     OCR1CH=0x00;
000476 93e0 0079 	STS  121,R30
                 ; 0000 0196     OCR1CL=0x00;
000478 93e0 0078 	STS  120,R30
                 ; 0000 0197 
                 ; 0000 0198 // Timer/Counter 2 initialization
                 ; 0000 0199 // Clock source: System Clock
                 ; 0000 019A // Clock value: Timer2 Stopped
                 ; 0000 019B // Mode: Normal top=0xFF
                 ; 0000 019C // OC2 output: Disconnected
                 ; 0000 019D     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00047a bde5      	OUT  0x25,R30
                 ; 0000 019E     TCNT2=0x00;
00047b bde4      	OUT  0x24,R30
                 ; 0000 019F     OCR2=0x00;
00047c bde3      	OUT  0x23,R30
                 ; 0000 01A0 
                 ; 0000 01A1 // Timer/Counter 3 initialization
                 ; 0000 01A2 // Clock source: System Clock
                 ; 0000 01A3 // Clock value: Timer3 Stopped
                 ; 0000 01A4 // Mode: Normal top=0xFFFF
                 ; 0000 01A5 // OC3A output: Disconnected
                 ; 0000 01A6 // OC3B output: Disconnected
                 ; 0000 01A7 // OC3C output: Disconnected
                 ; 0000 01A8 // Noise Canceler: Off
                 ; 0000 01A9 // Input Capture on Falling Edge
                 ; 0000 01AA // Timer3 Overflow Interrupt: Off
                 ; 0000 01AB // Input Capture Interrupt: Off
                 ; 0000 01AC // Compare A Match Interrupt: Off
                 ; 0000 01AD // Compare B Match Interrupt: Off
                 ; 0000 01AE // Compare C Match Interrupt: Off
                 ; 0000 01AF     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
00047d 93e0 008b 	STS  139,R30
                 ; 0000 01B0     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
00047f 93e0 008a 	STS  138,R30
                 ; 0000 01B1     TCNT3H=0x00;
000481 93e0 0089 	STS  137,R30
                 ; 0000 01B2     TCNT3L=0x00;
000483 93e0 0088 	STS  136,R30
                 ; 0000 01B3     ICR3H=0x00;
000485 93e0 0081 	STS  129,R30
                 ; 0000 01B4     ICR3L=0x00;
000487 93e0 0080 	STS  128,R30
                 ; 0000 01B5     OCR3AH=0x00;
000489 93e0 0087 	STS  135,R30
                 ; 0000 01B6     OCR3AL=0x00;
00048b 93e0 0086 	STS  134,R30
                 ; 0000 01B7     OCR3BH=0x00;
00048d 93e0 0085 	STS  133,R30
                 ; 0000 01B8     OCR3BL=0x00;
00048f 93e0 0084 	STS  132,R30
                 ; 0000 01B9     OCR3CH=0x00;
000491 93e0 0083 	STS  131,R30
                 ; 0000 01BA     OCR3CL=0x00;
000493 93e0 0082 	STS  130,R30
                 ; 0000 01BB 
                 ; 0000 01BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01BD     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000495 bfe7      	OUT  0x37,R30
                 ; 0000 01BE     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000496 93e0 007d 	STS  125,R30
                 ; 0000 01BF 
                 ; 0000 01C0 // External Interrupt(s) initialization
                 ; 0000 01C1 // INT0: Off
                 ; 0000 01C2 // INT1: Off
                 ; 0000 01C3 // INT2: Off
                 ; 0000 01C4 // INT3: Off
                 ; 0000 01C5 // INT4: Off
                 ; 0000 01C6 // INT5: Off
                 ; 0000 01C7 // INT6: Off
                 ; 0000 01C8 // INT7: Off
                 ; 0000 01C9     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000498 93e0 006a 	STS  106,R30
                 ; 0000 01CA     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
00049a bfea      	OUT  0x3A,R30
                 ; 0000 01CB     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
00049b bfe9      	OUT  0x39,R30
                 ; 0000 01CC 
                 ; 0000 01CD // USART0 initialization
                 ; 0000 01CE // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01CF // USART0 Receiver: On
                 ; 0000 01D0 // USART0 Transmitter: On
                 ; 0000 01D1 // USART0 Mode: Asynchronous
                 ; 0000 01D2 // USART0 Baud Rate: 9600
                 ; 0000 01D3     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00049c b9eb      	OUT  0xB,R30
                 ; 0000 01D4     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00049d ede8      	LDI  R30,LOW(216)
00049e b9ea      	OUT  0xA,R30
                 ; 0000 01D5     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
00049f e0e6      	LDI  R30,LOW(6)
0004a0 93e0 0095 	STS  149,R30
                 ; 0000 01D6     UBRR0H=0x00;
0004a2 e0e0      	LDI  R30,LOW(0)
0004a3 93e0 0090 	STS  144,R30
                 ; 0000 01D7     UBRR0L=0x33;
0004a5 e3e3      	LDI  R30,LOW(51)
0004a6 b9e9      	OUT  0x9,R30
                 ; 0000 01D8 
                 ; 0000 01D9 // USART1 initialization
                 ; 0000 01DA // USART1 disabled
                 ; 0000 01DB     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
0004a7 e0e0      	LDI  R30,LOW(0)
0004a8 93e0 009a 	STS  154,R30
                 ; 0000 01DC 
                 ; 0000 01DD // Analog Comparator initialization
                 ; 0000 01DE // Analog Comparator: Off
                 ; 0000 01DF // The Analog Comparator's positive input is
                 ; 0000 01E0 // connected to the AIN0 pin
                 ; 0000 01E1 // The Analog Comparator's negative input is
                 ; 0000 01E2 // connected to the AIN1 pin
                 ; 0000 01E3     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0004aa e8e0      	LDI  R30,LOW(128)
0004ab b9e8      	OUT  0x8,R30
                 ; 0000 01E4     SFIOR=(0<<ACME);
0004ac e0e0      	LDI  R30,LOW(0)
0004ad bde0      	OUT  0x20,R30
                 ; 0000 01E5 
                 ; 0000 01E6 // ADC initialization
                 ; 0000 01E7 // ADC disabled
                 ; 0000 01E8     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0004ae b9e6      	OUT  0x6,R30
                 ; 0000 01E9 
                 ; 0000 01EA // SPI initialization
                 ; 0000 01EB // SPI disabled
                 ; 0000 01EC     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0004af b9ed      	OUT  0xD,R30
                 ; 0000 01ED 
                 ; 0000 01EE // TWI initialization
                 ; 0000 01EF // TWI disabled
                 ; 0000 01F0     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0004b0 93e0 0074 	STS  116,R30
                 ; 0000 01F1 
                 ; 0000 01F2 // Graphic Display Controller initialization
                 ; 0000 01F3 // The PCD8544 connections are specified in the
                 ; 0000 01F4 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
                 ; 0000 01F5 // SDIN - PORTC Bit 7
                 ; 0000 01F6 // SCLK - PORTA Bit 7
                 ; 0000 01F7 // D /C - PORTC Bit 6
                 ; 0000 01F8 // /SCE - PORTC Bit 5
                 ; 0000 01F9 // /RES - PORTC Bit 4
                 ; 0000 01FA 
                 ; 0000 01FB // Specify the current font for displaying text
                 ; 0000 01FC     glcd_init_data.font=font5x7;
0004b2 e8ec      	LDI  R30,LOW(_font5x7*2)
0004b3 e0f0      	LDI  R31,HIGH(_font5x7*2)
0004b4 83e8      	ST   Y,R30
0004b5 83f9      	STD  Y+1,R31
                 ; 0000 01FD // No function is used for reading
                 ; 0000 01FE // image data from external memory
                 ; 0000 01FF     glcd_init_data.readxmem=NULL;
0004b6 e0e0      	LDI  R30,LOW(0)
0004b7 83ea      	STD  Y+2,R30
0004b8 83eb      	STD  Y+2+1,R30
                 ; 0000 0200 // No function is used for writing
                 ; 0000 0201 // image data to external memory
                 ; 0000 0202     glcd_init_data.writexmem=NULL;
0004b9 83ec      	STD  Y+4,R30
0004ba 83ed      	STD  Y+4+1,R30
                 ; 0000 0203 // Set the LCD temperature coefficient
                 ; 0000 0204     glcd_init_data.temp_coef=90;
0004bb 81ee      	LDD  R30,Y+6
0004bc 7fec      	ANDI R30,LOW(0xFC)
0004bd 60e2      	ORI  R30,2
0004be 83ee      	STD  Y+6,R30
                 ; 0000 0205 // Set the LCD bias
                 ; 0000 0206     glcd_init_data.bias=3;
0004bf 7ee3      	ANDI R30,LOW(0xE3)
0004c0 60ec      	ORI  R30,LOW(0xC)
0004c1 83ee      	STD  Y+6,R30
                 ; 0000 0207 // Set the LCD contrast control voltage VLCD
                 ; 0000 0208     glcd_init_data.vlcd=55;
0004c2 81ef      	LDD  R30,Y+7
0004c3 78e0      	ANDI R30,LOW(0x80)
0004c4 63e7      	ORI  R30,LOW(0x37)
0004c5 83ef      	STD  Y+7,R30
                 ; 0000 0209 
                 ; 0000 020A     glcd_init(&glcd_init_data);
0004c6 01de      	MOVW R26,R28
0004c7 940e 05c2 	CALL _glcd_init
                 ; 0000 020B 
                 ; 0000 020C // Global enable interrupts
                 ; 0000 020D #asm("sei")
0004c9 9478      	sei
                 ; 0000 020E 
                 ; 0000 020F     put_string("AT\r\n");
                +
0004ca eca9     +LDI R26 , LOW ( _0x2F + ( 0 ) )
0004cb e0b5     +LDI R27 , HIGH ( _0x2F + ( 0 ) )
                 	__POINTW2MN _0x2F,0
0004cc de3c      	RCALL _put_string
                 ; 0000 0210     wait_until("OK", 2);
                +
0004cd ecee     +LDI R30 , LOW ( _0x2F + ( 5 ) )
0004ce e0f5     +LDI R31 , HIGH ( _0x2F + ( 5 ) )
                 	__POINTW1MN _0x2F,5
0004cf 940e 0a49 	CALL SUBOPT_0x6
                 ; 0000 0211     refresh(0);
                 ; 0000 0212 
                 ; 0000 0213     put_string("AT+CWMODE=1\r\n");
                +
0004d1 eda1     +LDI R26 , LOW ( _0x2F + ( 8 ) )
0004d2 e0b5     +LDI R27 , HIGH ( _0x2F + ( 8 ) )
                 	__POINTW2MN _0x2F,8
0004d3 de35      	RCALL _put_string
                 ; 0000 0214     wait_until("OK", 2);
                +
0004d4 edef     +LDI R30 , LOW ( _0x2F + ( 22 ) )
0004d5 e0f5     +LDI R31 , HIGH ( _0x2F + ( 22 ) )
                 	__POINTW1MN _0x2F,22
0004d6 940e 0a49 	CALL SUBOPT_0x6
                 ; 0000 0215     refresh(0);
                 ; 0000 0216 
                 ; 0000 0217     put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
                +
0004d8 eea2     +LDI R26 , LOW ( _0x2F + ( 25 ) )
0004d9 e0b5     +LDI R27 , HIGH ( _0x2F + ( 25 ) )
                 	__POINTW2MN _0x2F,25
0004da de2e      	RCALL _put_string
                 ; 0000 0218     wait_until("OK", 10);
                +
0004db e0ed     +LDI R30 , LOW ( _0x2F + ( 68 ) )
0004dc e0f6     +LDI R31 , HIGH ( _0x2F + ( 68 ) )
                 	__POINTW1MN _0x2F,68
0004dd 93fa      	ST   -Y,R31
0004de 93ea      	ST   -Y,R30
0004df e0aa      	LDI  R26,LOW(10)
0004e0 e0b0      	LDI  R27,0
0004e1 de51      	RCALL _wait_until
                 ; 0000 0219     refresh(0);
0004e2 e0a0      	LDI  R26,LOW(0)
0004e3 e0b0      	LDI  R27,0
0004e4 de39      	RCALL _refresh
                 ; 0000 021A 
                 ; 0000 021B     read_and_send("7U0M5UTEKXE64ZK9");
                +
0004e5 e1a0     +LDI R26 , LOW ( _0x2F + ( 71 ) )
0004e6 e0b6     +LDI R27 , HIGH ( _0x2F + ( 71 ) )
                 	__POINTW2MN _0x2F,71
0004e7 debb      	RCALL _read_and_send
                 ; 0000 021C 
                 ; 0000 021D     while (1) {
                 _0x30:
                 ; 0000 021E         temp = getchar();
0004e8 940e 0298 	CALL _getchar
0004ea 2f1e      	MOV  R17,R30
                 ; 0000 021F         glcd_putchar(temp);
0004eb 2fa1      	MOV  R26,R17
0004ec 940e 0931 	CALL _glcd_putchar
                 ; 0000 0220     }
0004ee cff9      	RJMP _0x30
                 ; 0000 0221 }
                 _0x33:
0004ef cfff      	RJMP _0x33
                 ; .FEND
                 
                 	.DSEG
                 _0x2F:
0005c9           	.BYTE 0x58
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0004f0 93ba      	ST   -Y,R27
0004f1 93aa      	ST   -Y,R26
0004f2 81b9          ldd  r27,y+1
0004f3 81a8          ld   r26,y
0004f4 9610          adiw r26,0
0004f5 f031          breq memset1
0004f6 81fc          ldd  r31,y+4
0004f7 81eb          ldd  r30,y+3
0004f8 816a          ldd  r22,y+2
                 memset0:
0004f9 9361          st   z+,r22
0004fa 9711          sbiw r26,1
0004fb f7e9          brne memset0
                 memset1:
0004fc 81eb          ldd  r30,y+3
0004fd 81fc          ldd  r31,y+4
0004fe 9625      	ADIW R28,5
0004ff 9508      	RET
                 ; .FEND
                 _strcat:
                 ; .FSTART _strcat
000500 93ba      	ST   -Y,R27
000501 93aa      	ST   -Y,R26
000502 91e9          ld   r30,y+
000503 91f9          ld   r31,y+
000504 91a9          ld   r26,y+
000505 91b9          ld   r27,y+
000506 01cd          movw r24,r26
                 strcat0:
000507 916d          ld   r22,x+
000508 2366          tst  r22
000509 f7e9          brne strcat0
00050a 9711          sbiw r26,1
                 strcat1:
00050b 9161          ld   r22,z+
00050c 936d          st   x+,r22
00050d 2366          tst  r22
00050e f7e1          brne strcat1
00050f 01fc          movw r30,r24
000510 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000511 93ba      	ST   -Y,R27
000512 93aa      	ST   -Y,R26
000513 91a9          ld   r26,y+
000514 91b9          ld   r27,y+
000515 27ee          clr  r30
000516 27ff          clr  r31
                 strlen0:
000517 916d          ld   r22,x+
000518 2366          tst  r22
000519 f011          breq strlen1
00051a 9631          adiw r30,1
00051b cffb          rjmp strlen0
                 strlen1:
00051c 9508          ret
                 ; .FEND
                 _strstr:
                 ; .FSTART _strstr
00051d 93ba      	ST   -Y,R27
00051e 93aa      	ST   -Y,R26
00051f 81aa          ldd  r26,y+2
000520 81bb          ldd  r27,y+3
000521 01cd          movw r24,r26
                 strstr0:
000522 81e8          ld   r30,y
000523 81f9          ldd  r31,y+1
                 strstr1:
000524 9171          ld   r23,z+
000525 2377          tst  r23
000526 f411          brne strstr2
000527 01fc          movw r30,r24
000528 c009          rjmp strstr3
                 strstr2:
000529 916d          ld   r22,x+
00052a 1767          cp   r22,r23
00052b f3c1          breq strstr1
00052c 9601          adiw r24,1
00052d 01dc          movw r26,r24
00052e 2366          tst  r22
00052f f791          brne strstr0
000530 27ee          clr  r30
000531 27ff          clr  r31
                 strstr3:
000532 940c 0a1e 	JMP  _0x2120001
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000534 93ba      	ST   -Y,R27
000535 93aa      	ST   -Y,R26
000536 91a9          ld   r26,y+
000537 91b9          ld   r27,y+
000538 91e9          ld   r30,y+
000539 91f9          ld   r31,y+
00053a 9630          adiw r30,0
00053b f42a          brpl __itoa0
00053c 95e0          com  r30
00053d 95f0          com  r31
00053e 9631          adiw r30,1
00053f e26d          ldi  r22,'-'
000540 936d          st   x+,r22
                 __itoa0:
000541 94e8          clt
000542 e180          ldi  r24,low(10000)
000543 e297          ldi  r25,high(10000)
000544 d00d          rcall __itoa1
000545 ee88          ldi  r24,low(1000)
000546 e093          ldi  r25,high(1000)
000547 d00a          rcall __itoa1
000548 e684          ldi  r24,100
000549 2799          clr  r25
00054a d007          rcall __itoa1
00054b e08a          ldi  r24,10
00054c d005          rcall __itoa1
00054d 2f6e          mov  r22,r30
00054e d010          rcall __itoa5
00054f 2766          clr  r22
000550 936c          st   x,r22
000551 9508          ret
                 
                 __itoa1:
000552 2766          clr	 r22
                 __itoa2:
000553 17e8          cp   r30,r24
000554 07f9          cpc  r31,r25
000555 f020          brlo __itoa3
000556 9563          inc  r22
000557 1be8          sub  r30,r24
000558 0bf9          sbc  r31,r25
000559 f7c9          brne __itoa2
                 __itoa3:
00055a 2366          tst  r22
00055b f411          brne __itoa4
00055c f016          brts __itoa5
00055d 9508          ret
                 __itoa4:
00055e 9468          set
                 __itoa5:
00055f 5d60          subi r22,-0x30
000560 936d          st   x+,r22
000561 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G102:
                 ; .FSTART _pcd8544_delay_G102
000562 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G102:
                 ; .FSTART _pcd8544_wrbus_G102
000563 93aa      	ST   -Y,R26
000564 931a      	ST   -Y,R17
000565 98ad      	CBI  0x15,5
000566 e018      	LDI  R17,LOW(8)
                 _0x2040004:
000567 dffa      	RCALL _pcd8544_delay_G102
000568 81e9      	LDD  R30,Y+1
000569 78e0      	ANDI R30,LOW(0x80)
00056a f011      	BREQ _0x2040006
00056b 9aaf      	SBI  0x15,7
00056c c001      	RJMP _0x2040007
                 _0x2040006:
00056d 98af      	CBI  0x15,7
                 _0x2040007:
00056e 81e9      	LDD  R30,Y+1
00056f 0fee      	LSL  R30
000570 83e9      	STD  Y+1,R30
000571 dff0      	RCALL _pcd8544_delay_G102
000572 9adf      	SBI  0x1B,7
000573 dfee      	RCALL _pcd8544_delay_G102
000574 98df      	CBI  0x1B,7
000575 5011      	SUBI R17,LOW(1)
000576 f781      	BRNE _0x2040004
000577 9aad      	SBI  0x15,5
000578 8118      	LDD  R17,Y+0
000579 940c 09b8 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
00057b 93aa      	ST   -Y,R26
00057c 98ae      	CBI  0x15,6
00057d 81a8      	LD   R26,Y
00057e dfe4      	RCALL _pcd8544_wrbus_G102
00057f c0c9      	RJMP _0x2120008
                 ; .FEND
                 _pcd8544_wrdata_G102:
                 ; .FSTART _pcd8544_wrdata_G102
000580 93aa      	ST   -Y,R26
000581 9aae      	SBI  0x15,6
000582 81a8      	LD   R26,Y
000583 dfdf      	RCALL _pcd8544_wrbus_G102
000584 c0c4      	RJMP _0x2120008
                 ; .FEND
                 _pcd8544_setaddr_G102:
                 ; .FSTART _pcd8544_setaddr_G102
000585 93aa      	ST   -Y,R26
000586 931a      	ST   -Y,R17
000587 81e9      	LDD  R30,Y+1
000588 95e6      	LSR  R30
000589 95e6      	LSR  R30
00058a 95e6      	LSR  R30
00058b 2f1e      	MOV  R17,R30
00058c e5e4      	LDI  R30,LOW(84)
00058d 9fe1      	MUL  R30,R17
00058e 01f0      	MOVW R30,R0
00058f 01df      	MOVW R26,R30
000590 81ea      	LDD  R30,Y+2
000591 e0f0      	LDI  R31,0
000592 0fea      	ADD  R30,R26
000593 1ffb      	ADC  R31,R27
000594 93e0 07c8 	STS  _gfx_addr_G102,R30
000596 93f0 07c9 	STS  _gfx_addr_G102+1,R31
000598 2fe1      	MOV  R30,R17
000599 8118      	LDD  R17,Y+0
00059a 940c 09ff 	JMP  _0x2120002
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
00059c 93aa      	ST   -Y,R26
00059d 81e9      	LDD  R30,Y+1
00059e 68e0      	ORI  R30,0x80
00059f 2fae      	MOV  R26,R30
0005a0 dfda      	RCALL _pcd8544_wrcmd
0005a1 81e9      	LDD  R30,Y+1
0005a2 93ea      	ST   -Y,R30
0005a3 81a9      	LDD  R26,Y+1
0005a4 dfe0      	RCALL _pcd8544_setaddr_G102
0005a5 64e0      	ORI  R30,0x40
0005a6 2fae      	MOV  R26,R30
0005a7 dfd3      	RCALL _pcd8544_wrcmd
0005a8 940c 09b8 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
0005aa 93aa      	ST   -Y,R26
0005ab 81e9      	LDD  R30,Y+1
0005ac 93ea      	ST   -Y,R30
0005ad 81a9      	LDD  R26,Y+1
0005ae dfed      	RCALL _pcd8544_gotoxy
0005af 91e0 07c8 	LDS  R30,_gfx_addr_G102
0005b1 91f0 07c9 	LDS  R31,_gfx_addr_G102+1
0005b3 53e6      	SUBI R30,LOW(-_gfx_buffer_G102)
0005b4 4ff8      	SBCI R31,HIGH(-_gfx_buffer_G102)
0005b5 81e0      	LD   R30,Z
0005b6 940c 09b8 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
0005b8 93aa      	ST   -Y,R26
0005b9 940e 0a73 	CALL SUBOPT_0xC
0005bb 9731      	SBIW R30,1
0005bc 53e6      	SUBI R30,LOW(-_gfx_buffer_G102)
0005bd 4ff8      	SBCI R31,HIGH(-_gfx_buffer_G102)
0005be 81a8      	LD   R26,Y
0005bf 83a0      	STD  Z+0,R26
0005c0 dfbf      	RCALL _pcd8544_wrdata_G102
0005c1 c087      	RJMP _0x2120008
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0005c2 93ba      	ST   -Y,R27
0005c3 93aa      	ST   -Y,R26
0005c4 940e 0b2a 	CALL __SAVELOCR4
0005c6 9aa5      	SBI  0x14,5
0005c7 9aad      	SBI  0x15,5
0005c8 9ad7      	SBI  0x1A,7
0005c9 98df      	CBI  0x1B,7
0005ca 9aa7      	SBI  0x14,7
0005cb 9aa6      	SBI  0x14,6
0005cc 9aa4      	SBI  0x14,4
0005cd 98ac      	CBI  0x15,4
0005ce e0aa      	LDI  R26,LOW(10)
0005cf e0b0      	LDI  R27,0
0005d0 940e 0ae1 	CALL _delay_ms
0005d2 9aac      	SBI  0x15,4
0005d3 81ec      	LDD  R30,Y+4
0005d4 81fd      	LDD  R31,Y+4+1
0005d5 9730      	SBIW R30,0
0005d6 f121      	BREQ _0x2040008
0005d7 81e6      	LDD  R30,Z+6
0005d8 70e3      	ANDI R30,LOW(0x3)
0005d9 2f1e      	MOV  R17,R30
0005da 81ec      	LDD  R30,Y+4
0005db 81fd      	LDD  R31,Y+4+1
0005dc 81e6      	LDD  R30,Z+6
0005dd 95e6      	LSR  R30
0005de 95e6      	LSR  R30
0005df 70e7      	ANDI R30,LOW(0x7)
0005e0 2f0e      	MOV  R16,R30
0005e1 81ec      	LDD  R30,Y+4
0005e2 81fd      	LDD  R31,Y+4+1
0005e3 81e7      	LDD  R30,Z+7
0005e4 77ef      	ANDI R30,0x7F
0005e5 2f3e      	MOV  R19,R30
0005e6 81ac      	LDD  R26,Y+4
0005e7 81bd      	LDD  R27,Y+4+1
0005e8 940e 0b03 	CALL __GETW1P
                +
0005ea 93e0 0625+STS _glcd_state + ( 4 ) , R30
0005ec 93f0 0626+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
0005ee 9612      	ADIW R26,2
0005ef 940e 0b03 	CALL __GETW1P
                +
0005f1 93e0 063a+STS _glcd_state + ( 25 ) , R30
0005f3 93f0 063b+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
0005f5 81ac      	LDD  R26,Y+4
0005f6 81bd      	LDD  R27,Y+4+1
0005f7 9614      	ADIW R26,4
0005f8 940e 0b03 	CALL __GETW1P
0005fa c00d      	RJMP _0x20400A0
                 _0x2040008:
0005fb e010      	LDI  R17,LOW(0)
0005fc e003      	LDI  R16,LOW(3)
0005fd e332      	LDI  R19,LOW(50)
0005fe e0e0      	LDI  R30,LOW(0)
0005ff e0f0      	LDI  R31,HIGH(0)
                +
000600 93e0 0625+STS _glcd_state + ( 4 ) , R30
000602 93f0 0626+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000604 93e0 063a+STS _glcd_state + ( 25 ) , R30
000606 93f0 063b+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20400A0:
                +
000608 93e0 063c+STS _glcd_state + ( 27 ) , R30
00060a 93f0 063d+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
00060c e2a1      	LDI  R26,LOW(33)
00060d df6d      	RCALL _pcd8544_wrcmd
00060e 2fe1      	MOV  R30,R17
00060f 60e4      	ORI  R30,4
000610 2fae      	MOV  R26,R30
000611 df69      	RCALL _pcd8544_wrcmd
000612 2fe0      	MOV  R30,R16
000613 61e0      	ORI  R30,0x10
000614 2fae      	MOV  R26,R30
000615 df65      	RCALL _pcd8544_wrcmd
000616 2fe3      	MOV  R30,R19
000617 68e0      	ORI  R30,0x80
000618 2fae      	MOV  R26,R30
000619 df61      	RCALL _pcd8544_wrcmd
00061a e2a0      	LDI  R26,LOW(32)
00061b df5f      	RCALL _pcd8544_wrcmd
00061c e0a1      	LDI  R26,LOW(1)
00061d d022      	RCALL _glcd_display
00061e e0e1      	LDI  R30,LOW(1)
00061f 93e0 0621 	STS  _glcd_state,R30
000621 e0e0      	LDI  R30,LOW(0)
                +
000622 93e0 0622+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000624 e0e1      	LDI  R30,LOW(1)
                +
000625 93e0 0627+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
000627 93e0 0628+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
000629 93e0 0629+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
00062b efef      	LDI  R30,LOW(255)
                +
00062c 93e0 062a+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
00062e e0e1      	LDI  R30,LOW(1)
                +
00062f 93e0 0631+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000631 e3e2     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000632 e0f6     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000633 93fa      	ST   -Y,R31
000634 93ea      	ST   -Y,R30
000635 efef      	LDI  R30,LOW(255)
000636 93ea      	ST   -Y,R30
000637 e0a8      	LDI  R26,LOW(8)
000638 e0b0      	LDI  R27,0
000639 940e 04f0 	CALL _memset
00063b d00f      	RCALL _glcd_clear
00063c e0e1      	LDI  R30,LOW(1)
00063d 940e 0b31 	CALL __LOADLOCR4
00063f c060      	RJMP _0x2120007
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
000640 93aa      	ST   -Y,R26
000641 81e8      	LD   R30,Y
000642 30e0      	CPI  R30,0
000643 f011      	BREQ _0x204000A
000644 e0ec      	LDI  R30,LOW(12)
000645 c001      	RJMP _0x204000B
                 _0x204000A:
000646 e0e8      	LDI  R30,LOW(8)
                 _0x204000B:
000647 2fae      	MOV  R26,R30
000648 df32      	RCALL _pcd8544_wrcmd
                 _0x2120008:
000649 9621      	ADIW R28,1
00064a 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
00064b 940e 0b2a 	CALL __SAVELOCR4
00064d e030      	LDI  R19,0
                +
00064e 91e0 0622+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000650 30e0      	CPI  R30,0
000651 f009      	BREQ _0x204000D
000652 ef3f      	LDI  R19,LOW(255)
                 _0x204000D:
000653 e0e0      	LDI  R30,LOW(0)
000654 93ea      	ST   -Y,R30
000655 e0a0      	LDI  R26,LOW(0)
000656 df45      	RCALL _pcd8544_gotoxy
                +
000657 ef08     +LDI R16 , LOW ( 504 )
000658 e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x204000E:
000659 01f8      	MOVW R30,R16
                +
00065a 5001     +SUBI R16 , LOW ( 1 )
00065b 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00065c 9730      	SBIW R30,0
00065d f019      	BREQ _0x2040010
00065e 2fa3      	MOV  R26,R19
00065f df58      	RCALL _pcd8544_wrbyte
000660 cff8      	RJMP _0x204000E
                 _0x2040010:
000661 e0e0      	LDI  R30,LOW(0)
000662 93ea      	ST   -Y,R30
000663 e0a0      	LDI  R26,LOW(0)
000664 d33e      	RCALL _glcd_moveto
000665 940e 0b31 	CALL __LOADLOCR4
000667 940c 0a1e 	JMP  _0x2120001
                 ; .FEND
                 _pcd8544_wrmasked_G102:
                 ; .FSTART _pcd8544_wrmasked_G102
000669 93aa      	ST   -Y,R26
00066a 931a      	ST   -Y,R17
00066b 81ed      	LDD  R30,Y+5
00066c 93ea      	ST   -Y,R30
00066d 81ad      	LDD  R26,Y+5
00066e df3b      	RCALL _pcd8544_rdbyte
00066f 2f1e      	MOV  R17,R30
000670 81e9      	LDD  R30,Y+1
000671 30e7      	CPI  R30,LOW(0x7)
000672 f011      	BREQ _0x2040020
000673 30e8      	CPI  R30,LOW(0x8)
000674 f439      	BRNE _0x2040021
                 _0x2040020:
000675 81eb      	LDD  R30,Y+3
000676 93ea      	ST   -Y,R30
000677 81aa      	LDD  R26,Y+2
000678 940e 09ba 	CALL _glcd_mappixcolor1bit
00067a 83eb      	STD  Y+3,R30
00067b c008      	RJMP _0x2040022
                 _0x2040021:
00067c 30e3      	CPI  R30,LOW(0x3)
00067d f421      	BRNE _0x2040024
00067e 81eb      	LDD  R30,Y+3
00067f 95e0      	COM  R30
000680 83eb      	STD  Y+3,R30
000681 c002      	RJMP _0x2040025
                 _0x2040024:
000682 30e0      	CPI  R30,0
000683 f421      	BRNE _0x2040026
                 _0x2040025:
                 _0x2040022:
000684 81ea      	LDD  R30,Y+2
000685 95e0      	COM  R30
000686 231e      	AND  R17,R30
000687 c002      	RJMP _0x2040027
                 _0x2040026:
000688 30e2      	CPI  R30,LOW(0x2)
000689 f429      	BRNE _0x2040028
                 _0x2040027:
00068a 81ea      	LDD  R30,Y+2
00068b 81ab      	LDD  R26,Y+3
00068c 23ea      	AND  R30,R26
00068d 2b1e      	OR   R17,R30
00068e c00e      	RJMP _0x204001E
                 _0x2040028:
00068f 30e1      	CPI  R30,LOW(0x1)
000690 f429      	BRNE _0x2040029
000691 81ea      	LDD  R30,Y+2
000692 81ab      	LDD  R26,Y+3
000693 23ea      	AND  R30,R26
000694 271e      	EOR  R17,R30
000695 c007      	RJMP _0x204001E
                 _0x2040029:
000696 30e4      	CPI  R30,LOW(0x4)
000697 f429      	BRNE _0x204001E
000698 81ea      	LDD  R30,Y+2
000699 95e0      	COM  R30
00069a 81ab      	LDD  R26,Y+3
00069b 2bea      	OR   R30,R26
00069c 231e      	AND  R17,R30
                 _0x204001E:
00069d 2fa1      	MOV  R26,R17
00069e df19      	RCALL _pcd8544_wrbyte
00069f 8118      	LDD  R17,Y+0
                 _0x2120007:
0006a0 9626      	ADIW R28,6
0006a1 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
0006a2 93aa      	ST   -Y,R26
0006a3 9723      	SBIW R28,3
0006a4 940e 0b28 	CALL __SAVELOCR6
0006a6 89a8      	LDD  R26,Y+16
0006a7 35a4      	CPI  R26,LOW(0x54)
0006a8 f448      	BRSH _0x204002C
0006a9 85af      	LDD  R26,Y+15
0006aa 33a0      	CPI  R26,LOW(0x30)
0006ab f430      	BRSH _0x204002C
0006ac 85ae      	LDD  R26,Y+14
0006ad 30a0      	CPI  R26,LOW(0x0)
0006ae f019      	BREQ _0x204002C
0006af 85ad      	LDD  R26,Y+13
0006b0 30a0      	CPI  R26,LOW(0x0)
0006b1 f409      	BRNE _0x204002B
                 _0x204002C:
0006b2 c1d5      	RJMP _0x2120006
                 _0x204002B:
0006b3 85ee      	LDD  R30,Y+14
0006b4 87e8      	STD  Y+8,R30
0006b5 89a8      	LDD  R26,Y+16
0006b6 27bb      	CLR  R27
0006b7 85ee      	LDD  R30,Y+14
0006b8 e0f0      	LDI  R31,0
0006b9 0fae      	ADD  R26,R30
0006ba 1fbf      	ADC  R27,R31
0006bb 35a5      	CPI  R26,LOW(0x55)
0006bc e0e0      	LDI  R30,HIGH(0x55)
0006bd 07be      	CPC  R27,R30
0006be f020      	BRLO _0x204002E
0006bf 89a8      	LDD  R26,Y+16
0006c0 e5e4      	LDI  R30,LOW(84)
0006c1 1bea      	SUB  R30,R26
0006c2 87ee      	STD  Y+14,R30
                 _0x204002E:
0006c3 852d      	LDD  R18,Y+13
0006c4 85af      	LDD  R26,Y+15
0006c5 27bb      	CLR  R27
0006c6 85ed      	LDD  R30,Y+13
0006c7 e0f0      	LDI  R31,0
0006c8 0fae      	ADD  R26,R30
0006c9 1fbf      	ADC  R27,R31
0006ca 97d1      	SBIW R26,49
0006cb f020      	BRLO _0x204002F
0006cc 85af      	LDD  R26,Y+15
0006cd e3e0      	LDI  R30,LOW(48)
0006ce 1bea      	SUB  R30,R26
0006cf 87ed      	STD  Y+13,R30
                 _0x204002F:
0006d0 85a9      	LDD  R26,Y+9
0006d1 30a6      	CPI  R26,LOW(0x6)
0006d2 f009      	BREQ PC+2
0006d3 c05b      	RJMP _0x2040030
0006d4 85ec      	LDD  R30,Y+12
0006d5 30e1      	CPI  R30,LOW(0x1)
0006d6 f409      	BRNE _0x2040034
0006d7 c1b0      	RJMP _0x2120006
                 _0x2040034:
0006d8 30e3      	CPI  R30,LOW(0x3)
0006d9 f439      	BRNE _0x2040037
                +
0006da 91e0 063c+LDS R30 , _glcd_state + ( 27 )
0006dc 91f0 063d+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
0006de 9730      	SBIW R30,0
0006df f409      	BRNE _0x2040036
0006e0 c1a7      	RJMP _0x2120006
                 _0x2040036:
                 _0x2040037:
0006e1 8508      	LDD  R16,Y+8
0006e2 85ed      	LDD  R30,Y+13
0006e3 95e6      	LSR  R30
0006e4 95e6      	LSR  R30
0006e5 95e6      	LSR  R30
0006e6 2f3e      	MOV  R19,R30
0006e7 2fe2      	MOV  R30,R18
0006e8 70e7      	ANDI R30,LOW(0x7)
0006e9 f419      	BRNE _0x2040039
0006ea 85ad      	LDD  R26,Y+13
0006eb 172a      	CP   R18,R26
0006ec f0e9      	BREQ _0x2040038
                 _0x2040039:
0006ed 2fa0      	MOV  R26,R16
0006ee 27bb      	CLR  R27
0006ef 2fe3      	MOV  R30,R19
0006f0 e0f0      	LDI  R31,0
0006f1 940e 0afb 	CALL __MULW12U
0006f3 85aa      	LDD  R26,Y+10
0006f4 85bb      	LDD  R27,Y+10+1
0006f5 940e 0a76 	CALL SUBOPT_0xD
0006f7 9526      	LSR  R18
0006f8 9526      	LSR  R18
0006f9 9526      	LSR  R18
0006fa 2f53      	MOV  R21,R19
                 _0x204003B:
0006fb 935f      	PUSH R21
0006fc 5f5f      	SUBI R21,-1
0006fd 2fe2      	MOV  R30,R18
0006fe 91af      	POP  R26
0006ff 17ea      	CP   R30,R26
000700 f048      	BRLO _0x204003D
000701 2f10      	MOV  R17,R16
                 _0x204003E:
000702 2fe1      	MOV  R30,R17
000703 5011      	SUBI R17,1
000704 30e0      	CPI  R30,0
000705 f019      	BREQ _0x2040040
000706 940e 0a7b 	CALL SUBOPT_0xE
000708 cff9      	RJMP _0x204003E
                 _0x2040040:
000709 cff1      	RJMP _0x204003B
                 _0x204003D:
                 _0x2040038:
00070a 85ae      	LDD  R26,Y+14
00070b 170a      	CP   R16,R26
00070c f111      	BREQ _0x2040041
00070d 85ee      	LDD  R30,Y+14
00070e 85aa      	LDD  R26,Y+10
00070f 85bb      	LDD  R27,Y+10+1
000710 e0f0      	LDI  R31,0
000711 940e 0a76 	CALL SUBOPT_0xD
000713 85ed      	LDD  R30,Y+13
000714 70e7      	ANDI R30,LOW(0x7)
000715 f009      	BREQ _0x2040042
000716 5f3f      	SUBI R19,-LOW(1)
                 _0x2040042:
000717 e020      	LDI  R18,LOW(0)
                 _0x2040043:
000718 932f      	PUSH R18
000719 5f2f      	SUBI R18,-1
00071a 2fe3      	MOV  R30,R19
00071b 91af      	POP  R26
00071c 17ae      	CP   R26,R30
00071d f488      	BRSH _0x2040045
00071e 851e      	LDD  R17,Y+14
                 _0x2040046:
00071f 931f      	PUSH R17
000720 5f1f      	SUBI R17,-1
000721 2fe0      	MOV  R30,R16
000722 91af      	POP  R26
000723 17ae      	CP   R26,R30
000724 f418      	BRSH _0x2040048
000725 940e 0a7b 	CALL SUBOPT_0xE
000727 cff7      	RJMP _0x2040046
                 _0x2040048:
000728 85ee      	LDD  R30,Y+14
000729 81ae      	LDD  R26,Y+6
00072a 81bf      	LDD  R27,Y+6+1
00072b e0f0      	LDI  R31,0
00072c 940e 0a76 	CALL SUBOPT_0xD
00072e cfe9      	RJMP _0x2040043
                 _0x2040045:
                 _0x2040041:
                 _0x2040030:
00072f 85ef      	LDD  R30,Y+15
000730 70e7      	ANDI R30,LOW(0x7)
000731 2f3e      	MOV  R19,R30
                 _0x2040049:
000732 85ed      	LDD  R30,Y+13
000733 30e0      	CPI  R30,0
000734 f409      	BRNE PC+2
000735 c152      	RJMP _0x204004B
000736 85ea      	LDD  R30,Y+10
000737 85fb      	LDD  R31,Y+10+1
000738 83ee      	STD  Y+6,R30
000739 83ff      	STD  Y+6+1,R31
00073a e010      	LDI  R17,LOW(0)
00073b 8908      	LDD  R16,Y+16
00073c 3030      	CPI  R19,0
00073d f009      	BREQ PC+2
00073e c066      	RJMP _0x204004C
00073f 85ad      	LDD  R26,Y+13
000740 30a8      	CPI  R26,LOW(0x8)
000741 f408      	BRSH PC+2
000742 c05d      	RJMP _0x204004D
000743 85e9      	LDD  R30,Y+9
000744 30e0      	CPI  R30,0
000745 f011      	BREQ _0x2040052
000746 30e3      	CPI  R30,LOW(0x3)
000747 f409      	BRNE _0x2040053
                 _0x2040052:
000748 c002      	RJMP _0x2040054
                 _0x2040053:
000749 30e7      	CPI  R30,LOW(0x7)
00074a f409      	BRNE _0x2040055
                 _0x2040054:
00074b c002      	RJMP _0x2040056
                 _0x2040055:
00074c 30e8      	CPI  R30,LOW(0x8)
00074d f409      	BRNE _0x2040057
                 _0x2040056:
00074e c002      	RJMP _0x2040058
                 _0x2040057:
00074f 30e9      	CPI  R30,LOW(0x9)
000750 f409      	BRNE _0x2040059
                 _0x2040058:
000751 c002      	RJMP _0x204005A
                 _0x2040059:
000752 30ea      	CPI  R30,LOW(0xA)
000753 f421      	BRNE _0x204005B
                 _0x204005A:
000754 930a      	ST   -Y,R16
000755 89a8      	LDD  R26,Y+16
000756 de45      	RCALL _pcd8544_gotoxy
000757 c004      	RJMP _0x2040050
                 _0x204005B:
000758 30e6      	CPI  R30,LOW(0x6)
000759 f411      	BRNE _0x2040050
00075a 940e 0a88 	CALL SUBOPT_0xF
                 _0x2040050:
                 _0x204005D:
00075c 931f      	PUSH R17
00075d 5f1f      	SUBI R17,-1
00075e 85ee      	LDD  R30,Y+14
00075f 91af      	POP  R26
000760 17ae      	CP   R26,R30
000761 f5b8      	BRSH _0x204005F
000762 85a9      	LDD  R26,Y+9
000763 30a6      	CPI  R26,LOW(0x6)
000764 f469      	BRNE _0x2040060
000765 940e 0a8c 	CALL SUBOPT_0x10
000767 93fa      	ST   -Y,R31
000768 93ea      	ST   -Y,R30
000769 940e 0a73 	CALL SUBOPT_0xC
00076b 9731      	SBIW R30,1
00076c 53e6      	SUBI R30,LOW(-_gfx_buffer_G102)
00076d 4ff8      	SBCI R31,HIGH(-_gfx_buffer_G102)
00076e 81a0      	LD   R26,Z
00076f 940e 0a01 	CALL _glcd_writemem
000771 c026      	RJMP _0x2040061
                 _0x2040060:
000772 85e9      	LDD  R30,Y+9
000773 30e9      	CPI  R30,LOW(0x9)
000774 f411      	BRNE _0x2040065
000775 e050      	LDI  R21,LOW(0)
000776 c00e      	RJMP _0x2040066
                 _0x2040065:
000777 30ea      	CPI  R30,LOW(0xA)
000778 f411      	BRNE _0x2040064
000779 ef5f      	LDI  R21,LOW(255)
00077a c00a      	RJMP _0x2040066
                 _0x2040064:
00077b 940e 0a8c 	CALL SUBOPT_0x10
00077d 940e 0a95 	CALL SUBOPT_0x11
00077f 2f5e      	MOV  R21,R30
000780 85e9      	LDD  R30,Y+9
000781 30e7      	CPI  R30,LOW(0x7)
000782 f011      	BREQ _0x204006D
000783 30e8      	CPI  R30,LOW(0x8)
000784 f421      	BRNE _0x204006E
                 _0x204006D:
                 _0x2040066:
000785 940e 0a9b 	CALL SUBOPT_0x12
000787 2f5e      	MOV  R21,R30
000788 c006      	RJMP _0x204006F
                 _0x204006E:
000789 30e3      	CPI  R30,LOW(0x3)
00078a f411      	BRNE _0x2040071
00078b 9550      	COM  R21
00078c c002      	RJMP _0x2040072
                 _0x2040071:
00078d 30e0      	CPI  R30,0
00078e f419      	BRNE _0x2040074
                 _0x2040072:
                 _0x204006F:
00078f 2fa5      	MOV  R26,R21
000790 ddef      	RCALL _pcd8544_wrdata_G102
000791 c006      	RJMP _0x204006B
                 _0x2040074:
000792 940e 0a9f 	CALL SUBOPT_0x13
000794 efef      	LDI  R30,LOW(255)
000795 93ea      	ST   -Y,R30
000796 85ad      	LDD  R26,Y+13
000797 ded1      	RCALL _pcd8544_wrmasked_G102
                 _0x204006B:
                 _0x2040061:
000798 cfc3      	RJMP _0x204005D
                 _0x204005F:
000799 85ef      	LDD  R30,Y+15
00079a 5fe8      	SUBI R30,-LOW(8)
00079b 87ef      	STD  Y+15,R30
00079c 85ed      	LDD  R30,Y+13
00079d 50e8      	SUBI R30,LOW(8)
00079e 87ed      	STD  Y+13,R30
00079f c0df      	RJMP _0x2040075
                 _0x204004D:
0007a0 855d      	LDD  R21,Y+13
0007a1 e020      	LDI  R18,LOW(0)
0007a2 e0e0      	LDI  R30,LOW(0)
0007a3 87ed      	STD  Y+13,R30
0007a4 c081      	RJMP _0x2040076
                 _0x204004C:
0007a5 2fe3      	MOV  R30,R19
0007a6 85ad      	LDD  R26,Y+13
0007a7 0fae      	ADD  R26,R30
0007a8 30a9      	CPI  R26,LOW(0x9)
0007a9 f420      	BRSH _0x2040077
0007aa 852d      	LDD  R18,Y+13
0007ab e0e0      	LDI  R30,LOW(0)
0007ac 87ed      	STD  Y+13,R30
0007ad c003      	RJMP _0x2040078
                 _0x2040077:
0007ae e0e8      	LDI  R30,LOW(8)
0007af 1be3      	SUB  R30,R19
0007b0 2f2e      	MOV  R18,R30
                 _0x2040078:
0007b1 933a      	ST   -Y,R19
0007b2 2fa2      	MOV  R26,R18
0007b3 940e 09af 	CALL _glcd_getmask
0007b5 2f4e      	MOV  R20,R30
0007b6 85e9      	LDD  R30,Y+9
0007b7 30e6      	CPI  R30,LOW(0x6)
0007b8 f529      	BRNE _0x204007C
0007b9 940e 0a88 	CALL SUBOPT_0xF
                 _0x204007D:
0007bb 931f      	PUSH R17
0007bc 5f1f      	SUBI R17,-1
0007bd 85ee      	LDD  R30,Y+14
0007be 91af      	POP  R26
0007bf 17ae      	CP   R26,R30
0007c0 f4e0      	BRSH _0x204007F
0007c1 940e 0a73 	CALL SUBOPT_0xC
0007c3 9731      	SBIW R30,1
0007c4 53e6      	SUBI R30,LOW(-_gfx_buffer_G102)
0007c5 4ff8      	SBCI R31,HIGH(-_gfx_buffer_G102)
0007c6 81e0      	LD   R30,Z
0007c7 23e4      	AND  R30,R20
0007c8 2fae      	MOV  R26,R30
0007c9 2fe3      	MOV  R30,R19
0007ca 940e 0af3 	CALL __LSRB12
0007cc 940e 0aa5 	CALL SUBOPT_0x14
0007ce 2fe3      	MOV  R30,R19
0007cf 2fa4      	MOV  R26,R20
0007d0 940e 0af3 	CALL __LSRB12
0007d2 95e0      	COM  R30
0007d3 21e1      	AND  R30,R1
0007d4 2b5e      	OR   R21,R30
0007d5 940e 0a8c 	CALL SUBOPT_0x10
0007d7 93fa      	ST   -Y,R31
0007d8 93ea      	ST   -Y,R30
0007d9 2fa5      	MOV  R26,R21
0007da 940e 0a01 	CALL _glcd_writemem
0007dc cfde      	RJMP _0x204007D
                 _0x204007F:
0007dd c02c      	RJMP _0x204007B
                 _0x204007C:
0007de 30e9      	CPI  R30,LOW(0x9)
0007df f411      	BRNE _0x2040080
0007e0 e050      	LDI  R21,LOW(0)
0007e1 c003      	RJMP _0x2040081
                 _0x2040080:
0007e2 30ea      	CPI  R30,LOW(0xA)
0007e3 f4a9      	BRNE _0x2040087
0007e4 ef5f      	LDI  R21,LOW(255)
                 _0x2040081:
0007e5 940e 0a9b 	CALL SUBOPT_0x12
0007e7 2fae      	MOV  R26,R30
0007e8 2fe3      	MOV  R30,R19
0007e9 940e 0aeb 	CALL __LSLB12
0007eb 2f5e      	MOV  R21,R30
                 _0x2040084:
0007ec 931f      	PUSH R17
0007ed 5f1f      	SUBI R17,-1
0007ee 85ee      	LDD  R30,Y+14
0007ef 91af      	POP  R26
0007f0 17ae      	CP   R26,R30
0007f1 f430      	BRSH _0x2040086
0007f2 940e 0a9f 	CALL SUBOPT_0x13
0007f4 934a      	ST   -Y,R20
0007f5 e0a0      	LDI  R26,LOW(0)
0007f6 de72      	RCALL _pcd8544_wrmasked_G102
0007f7 cff4      	RJMP _0x2040084
                 _0x2040086:
0007f8 c011      	RJMP _0x204007B
                 _0x2040087:
                 _0x2040088:
0007f9 931f      	PUSH R17
0007fa 5f1f      	SUBI R17,-1
0007fb 85ee      	LDD  R30,Y+14
0007fc 91af      	POP  R26
0007fd 17ae      	CP   R26,R30
0007fe f458      	BRSH _0x204008A
0007ff 940e 0ab0 	CALL SUBOPT_0x15
000801 2fae      	MOV  R26,R30
000802 2fe3      	MOV  R30,R19
000803 940e 0aeb 	CALL __LSLB12
000805 93ea      	ST   -Y,R30
000806 934a      	ST   -Y,R20
000807 85ad      	LDD  R26,Y+13
000808 de60      	RCALL _pcd8544_wrmasked_G102
000809 cfef      	RJMP _0x2040088
                 _0x204008A:
                 _0x204007B:
00080a 85ed      	LDD  R30,Y+13
00080b 30e0      	CPI  R30,0
00080c f409      	BRNE _0x204008B
00080d c07a      	RJMP _0x204004B
                 _0x204008B:
00080e 85ad      	LDD  R26,Y+13
00080f 30a8      	CPI  R26,LOW(0x8)
000810 f428      	BRSH _0x204008C
000811 85ed      	LDD  R30,Y+13
000812 1be2      	SUB  R30,R18
000813 2f5e      	MOV  R21,R30
000814 e0e0      	LDI  R30,LOW(0)
000815 c003      	RJMP _0x20400A1
                 _0x204008C:
000816 2f53      	MOV  R21,R19
000817 85ed      	LDD  R30,Y+13
000818 50e8      	SUBI R30,LOW(8)
                 _0x20400A1:
000819 87ed      	STD  Y+13,R30
00081a e010      	LDI  R17,LOW(0)
00081b 85ef      	LDD  R30,Y+15
00081c 5fe8      	SUBI R30,-LOW(8)
00081d 87ef      	STD  Y+15,R30
00081e e0e8      	LDI  R30,LOW(8)
00081f 1be3      	SUB  R30,R19
000820 2f2e      	MOV  R18,R30
000821 8908      	LDD  R16,Y+16
000822 85ea      	LDD  R30,Y+10
000823 85fb      	LDD  R31,Y+10+1
000824 83ee      	STD  Y+6,R30
000825 83ff      	STD  Y+6+1,R31
                 _0x2040076:
000826 2fe5      	MOV  R30,R21
000827 e0f0      	LDI  R31,0
000828 59e0      	SUBI R30,LOW(-__glcd_mask*2)
000829 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
00082a 9144      	LPM  R20,Z
00082b 85e9      	LDD  R30,Y+9
00082c 30e6      	CPI  R30,LOW(0x6)
00082d f529      	BRNE _0x2040091
00082e 940e 0a88 	CALL SUBOPT_0xF
                 _0x2040092:
000830 931f      	PUSH R17
000831 5f1f      	SUBI R17,-1
000832 85ee      	LDD  R30,Y+14
000833 91af      	POP  R26
000834 17ae      	CP   R26,R30
000835 f4e0      	BRSH _0x2040094
000836 940e 0a73 	CALL SUBOPT_0xC
000838 9731      	SBIW R30,1
000839 53e6      	SUBI R30,LOW(-_gfx_buffer_G102)
00083a 4ff8      	SBCI R31,HIGH(-_gfx_buffer_G102)
00083b 81e0      	LD   R30,Z
00083c 23e4      	AND  R30,R20
00083d 2fae      	MOV  R26,R30
00083e 2fe2      	MOV  R30,R18
00083f 940e 0aeb 	CALL __LSLB12
000841 940e 0aa5 	CALL SUBOPT_0x14
000843 2fe2      	MOV  R30,R18
000844 2fa4      	MOV  R26,R20
000845 940e 0aeb 	CALL __LSLB12
000847 95e0      	COM  R30
000848 21e1      	AND  R30,R1
000849 2b5e      	OR   R21,R30
00084a 940e 0a8c 	CALL SUBOPT_0x10
00084c 93fa      	ST   -Y,R31
00084d 93ea      	ST   -Y,R30
00084e 2fa5      	MOV  R26,R21
00084f 940e 0a01 	CALL _glcd_writemem
000851 cfde      	RJMP _0x2040092
                 _0x2040094:
000852 c02c      	RJMP _0x2040090
                 _0x2040091:
000853 30e9      	CPI  R30,LOW(0x9)
000854 f411      	BRNE _0x2040095
000855 e050      	LDI  R21,LOW(0)
000856 c003      	RJMP _0x2040096
                 _0x2040095:
000857 30ea      	CPI  R30,LOW(0xA)
000858 f4a9      	BRNE _0x204009C
000859 ef5f      	LDI  R21,LOW(255)
                 _0x2040096:
00085a 940e 0a9b 	CALL SUBOPT_0x12
00085c 2fae      	MOV  R26,R30
00085d 2fe2      	MOV  R30,R18
00085e 940e 0af3 	CALL __LSRB12
000860 2f5e      	MOV  R21,R30
                 _0x2040099:
000861 931f      	PUSH R17
000862 5f1f      	SUBI R17,-1
000863 85ee      	LDD  R30,Y+14
000864 91af      	POP  R26
000865 17ae      	CP   R26,R30
000866 f430      	BRSH _0x204009B
000867 940e 0a9f 	CALL SUBOPT_0x13
000869 934a      	ST   -Y,R20
00086a e0a0      	LDI  R26,LOW(0)
00086b ddfd      	RCALL _pcd8544_wrmasked_G102
00086c cff4      	RJMP _0x2040099
                 _0x204009B:
00086d c011      	RJMP _0x2040090
                 _0x204009C:
                 _0x204009D:
00086e 931f      	PUSH R17
00086f 5f1f      	SUBI R17,-1
000870 85ee      	LDD  R30,Y+14
000871 91af      	POP  R26
000872 17ae      	CP   R26,R30
000873 f458      	BRSH _0x204009F
000874 940e 0ab0 	CALL SUBOPT_0x15
000876 2fae      	MOV  R26,R30
000877 2fe2      	MOV  R30,R18
000878 940e 0af3 	CALL __LSRB12
00087a 93ea      	ST   -Y,R30
00087b 934a      	ST   -Y,R20
00087c 85ad      	LDD  R26,Y+13
00087d ddeb      	RCALL _pcd8544_wrmasked_G102
00087e cfef      	RJMP _0x204009D
                 _0x204009F:
                 _0x2040090:
                 _0x2040075:
00087f 85e8      	LDD  R30,Y+8
000880 85aa      	LDD  R26,Y+10
000881 85bb      	LDD  R27,Y+10+1
000882 e0f0      	LDI  R31,0
000883 0fea      	ADD  R30,R26
000884 1ffb      	ADC  R31,R27
000885 87ea      	STD  Y+10,R30
000886 87fb      	STD  Y+10+1,R31
000887 ceaa      	RJMP _0x2040049
                 _0x204004B:
                 _0x2120006:
000888 940e 0b2f 	CALL __LOADLOCR6
00088a 9661      	ADIW R28,17
00088b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
00088c 940e 0abd 	CALL SUBOPT_0x16
00088e f01c      	BRLT _0x2060003
00088f e0e0      	LDI  R30,LOW(0)
000890 e0f0      	LDI  R31,HIGH(0)
000891 c126      	RJMP _0x2120003
                 _0x2060003:
000892 81a8      	LD   R26,Y
000893 81b9      	LDD  R27,Y+1
000894 35a4      	CPI  R26,LOW(0x54)
000895 e0e0      	LDI  R30,HIGH(0x54)
000896 07be      	CPC  R27,R30
000897 f01c      	BRLT _0x2060004
000898 e5e3      	LDI  R30,LOW(83)
000899 e0f0      	LDI  R31,HIGH(83)
00089a c11d      	RJMP _0x2120003
                 _0x2060004:
00089b 81e8      	LD   R30,Y
00089c 81f9      	LDD  R31,Y+1
00089d c11a      	RJMP _0x2120003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
00089e 940e 0abd 	CALL SUBOPT_0x16
0008a0 f01c      	BRLT _0x2060005
0008a1 e0e0      	LDI  R30,LOW(0)
0008a2 e0f0      	LDI  R31,HIGH(0)
0008a3 c114      	RJMP _0x2120003
                 _0x2060005:
0008a4 81a8      	LD   R26,Y
0008a5 81b9      	LDD  R27,Y+1
0008a6 97d0      	SBIW R26,48
0008a7 f01c      	BRLT _0x2060006
0008a8 e2ef      	LDI  R30,LOW(47)
0008a9 e0f0      	LDI  R31,HIGH(47)
0008aa c10d      	RJMP _0x2120003
                 _0x2060006:
0008ab 81e8      	LD   R30,Y
0008ac 81f9      	LDD  R31,Y+1
0008ad c10a      	RJMP _0x2120003
                 ; .FEND
                 _glcd_getcharw_G103:
                 ; .FSTART _glcd_getcharw_G103
0008ae 93ba      	ST   -Y,R27
0008af 93aa      	ST   -Y,R26
0008b0 9723      	SBIW R28,3
0008b1 940e 0ac4 	CALL SUBOPT_0x17
0008b3 018f      	MOVW R16,R30
0008b4 2e00      	MOV  R0,R16
0008b5 2a01      	OR   R0,R17
0008b6 f419      	BRNE _0x206000B
0008b7 e0e0      	LDI  R30,LOW(0)
0008b8 e0f0      	LDI  R31,HIGH(0)
0008b9 c05f      	RJMP _0x2120005
                 _0x206000B:
0008ba 940e 0acb 	CALL SUBOPT_0x18
0008bc 820f      	STD  Y+7,R0
0008bd 940e 0acb 	CALL SUBOPT_0x18
0008bf 820e      	STD  Y+6,R0
0008c0 940e 0acb 	CALL SUBOPT_0x18
0008c2 8608      	STD  Y+8,R0
0008c3 85eb      	LDD  R30,Y+11
0008c4 85a8      	LDD  R26,Y+8
0008c5 17ea      	CP   R30,R26
0008c6 f418      	BRSH _0x206000C
0008c7 e0e0      	LDI  R30,LOW(0)
0008c8 e0f0      	LDI  R31,HIGH(0)
0008c9 c04f      	RJMP _0x2120005
                 _0x206000C:
0008ca 01f8      	MOVW R30,R16
                +
0008cb 5f0f     +SUBI R16 , LOW ( - 1 )
0008cc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008cd 9154      	LPM  R21,Z
0008ce 85a8      	LDD  R26,Y+8
0008cf 27bb      	CLR  R27
0008d0 27ee      	CLR  R30
0008d1 0fa5      	ADD  R26,R21
0008d2 1fbe      	ADC  R27,R30
0008d3 85eb      	LDD  R30,Y+11
0008d4 e0f0      	LDI  R31,0
0008d5 17ea      	CP   R30,R26
0008d6 07fb      	CPC  R31,R27
0008d7 f018      	BRLO _0x206000D
0008d8 e0e0      	LDI  R30,LOW(0)
0008d9 e0f0      	LDI  R31,HIGH(0)
0008da c03e      	RJMP _0x2120005
                 _0x206000D:
0008db 81ee      	LDD  R30,Y+6
0008dc 95e6      	LSR  R30
0008dd 95e6      	LSR  R30
0008de 95e6      	LSR  R30
0008df 2f4e      	MOV  R20,R30
0008e0 81ee      	LDD  R30,Y+6
0008e1 70e7      	ANDI R30,LOW(0x7)
0008e2 f009      	BREQ _0x206000E
0008e3 5f4f      	SUBI R20,-LOW(1)
                 _0x206000E:
0008e4 81ef      	LDD  R30,Y+7
0008e5 30e0      	CPI  R30,0
0008e6 f0a1      	BREQ _0x206000F
0008e7 85a9      	LDD  R26,Y+9
0008e8 85ba      	LDD  R27,Y+9+1
0008e9 93ec      	ST   X,R30
0008ea 85a8      	LDD  R26,Y+8
0008eb 85eb      	LDD  R30,Y+11
0008ec 1bea      	SUB  R30,R26
0008ed e0f0      	LDI  R31,0
0008ee 01df      	MOVW R26,R30
0008ef 81ef      	LDD  R30,Y+7
0008f0 e0f0      	LDI  R31,0
0008f1 940e 0afb 	CALL __MULW12U
0008f3 01df      	MOVW R26,R30
0008f4 2fe4      	MOV  R30,R20
0008f5 e0f0      	LDI  R31,0
0008f6 940e 0afb 	CALL __MULW12U
0008f8 0fe0      	ADD  R30,R16
0008f9 1ff1      	ADC  R31,R17
0008fa c01e      	RJMP _0x2120005
                 _0x206000F:
0008fb 0198      	MOVW R18,R16
0008fc 2fe5      	MOV  R30,R21
0008fd e0f0      	LDI  R31,0
                +
0008fe 0f0e     +ADD R16 , R30
0008ff 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2060010:
000900 85a8      	LDD  R26,Y+8
000901 5faf      	SUBI R26,-LOW(1)
000902 87a8      	STD  Y+8,R26
000903 50a1      	SUBI R26,LOW(1)
000904 85eb      	LDD  R30,Y+11
000905 17ae      	CP   R26,R30
000906 f460      	BRSH _0x2060012
000907 01f9      	MOVW R30,R18
                +
000908 5f2f     +SUBI R18 , LOW ( - 1 )
000909 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00090a 91a4      	LPM  R26,Z
00090b e0b0      	LDI  R27,0
00090c 2fe4      	MOV  R30,R20
00090d e0f0      	LDI  R31,0
00090e 940e 0afb 	CALL __MULW12U
                +
000910 0f0e     +ADD R16 , R30
000911 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000912 cfed      	RJMP _0x2060010
                 _0x2060012:
000913 01f9      	MOVW R30,R18
000914 91e4      	LPM  R30,Z
000915 85a9      	LDD  R26,Y+9
000916 85ba      	LDD  R27,Y+9+1
000917 93ec      	ST   X,R30
000918 01f8      	MOVW R30,R16
                 _0x2120005:
000919 940e 0b2f 	CALL __LOADLOCR6
00091b 962c      	ADIW R28,12
00091c 9508      	RET
                 ; .FEND
                 _glcd_new_line_G103:
                 ; .FSTART _glcd_new_line_G103
00091d e0e0      	LDI  R30,LOW(0)
                +
00091e 93e0 0623+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000920 91a0 0624+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000922 27bb      	CLR  R27
000923 940e 0ad0 	CALL SUBOPT_0x19
000925 e0f0      	LDI  R31,0
000926 0fae      	ADD  R26,R30
000927 1fbf      	ADC  R27,R31
                +
000928 91e0 0628+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
00092a e0f0      	LDI  R31,0
00092b 0fae      	ADD  R26,R30
00092c 1fbf      	ADC  R27,R31
00092d df70      	RCALL _glcd_clipy
                +
00092e 93e0 0624+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000930 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000931 93aa      	ST   -Y,R26
000932 9721      	SBIW R28,1
000933 940e 0ac4 	CALL SUBOPT_0x17
000935 9730      	SBIW R30,0
000936 f409      	BRNE PC+2
000937 c055      	RJMP _0x206001F
000938 81af      	LDD  R26,Y+7
000939 30aa      	CPI  R26,LOW(0xA)
00093a f409      	BRNE _0x2060020
00093b c04f      	RJMP _0x2060021
                 _0x2060020:
00093c 81ef      	LDD  R30,Y+7
00093d 93ea      	ST   -Y,R30
00093e 01de      	MOVW R26,R28
00093f 9617      	ADIW R26,7
000940 df6d      	RCALL _glcd_getcharw_G103
000941 01af      	MOVW R20,R30
000942 9730      	SBIW R30,0
000943 f409      	BRNE _0x2060022
000944 c04a      	RJMP _0x2120004
                 _0x2060022:
                +
000945 91e0 0627+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000947 81ae      	LDD  R26,Y+6
000948 0fea      	ADD  R30,R26
000949 2f3e      	MOV  R19,R30
                +
00094a 91a0 0623+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
00094c 27bb      	CLR  R27
00094d e0f0      	LDI  R31,0
00094e 0fea      	ADD  R30,R26
00094f 1ffb      	ADC  R31,R27
000950 018f      	MOVW R16,R30
                +
000951 3505     +CPI R16 , LOW ( 85 )
000952 e0e0     +LDI R30 , HIGH ( 85 )
000953 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
000954 f018      	BRLO _0x2060023
000955 2f03      	MOV  R16,R19
000956 2711      	CLR  R17
000957 dfc5      	RCALL _glcd_new_line_G103
                 _0x2060023:
                +
000958 91e0 0623+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00095a 93ea      	ST   -Y,R30
                +
00095b 91e0 0624+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
00095d 93ea      	ST   -Y,R30
00095e 85e8      	LDD  R30,Y+8
00095f 93ea      	ST   -Y,R30
000960 940e 0ad0 	CALL SUBOPT_0x19
000962 93ea      	ST   -Y,R30
000963 e0e1      	LDI  R30,LOW(1)
000964 93ea      	ST   -Y,R30
000965 935a      	ST   -Y,R21
000966 934a      	ST   -Y,R20
000967 e0a7      	LDI  R26,LOW(7)
000968 dd39      	RCALL _glcd_block
                +
000969 91e0 0623+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00096b 81ae      	LDD  R26,Y+6
00096c 0fea      	ADD  R30,R26
00096d 93ea      	ST   -Y,R30
                +
00096e 91e0 0624+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000970 93ea      	ST   -Y,R30
                +
000971 91e0 0627+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000973 93ea      	ST   -Y,R30
000974 940e 0ad0 	CALL SUBOPT_0x19
000976 940e 0ad7 	CALL SUBOPT_0x1A
                +
000978 91e0 0623+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00097a 93ea      	ST   -Y,R30
                +
00097b 91a0 0624+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
00097d 940e 0ad0 	CALL SUBOPT_0x19
00097f 0fea      	ADD  R30,R26
000980 93ea      	ST   -Y,R30
000981 933a      	ST   -Y,R19
                +
000982 91e0 0628+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000984 940e 0ad7 	CALL SUBOPT_0x1A
000986 e5e4      	LDI  R30,LOW(84)
000987 e0f0      	LDI  R31,HIGH(84)
000988 17e0      	CP   R30,R16
000989 07f1      	CPC  R31,R17
00098a f411      	BRNE _0x2060024
                 _0x2060021:
00098b df91      	RCALL _glcd_new_line_G103
00098c c002      	RJMP _0x2120004
                 _0x2060024:
                 _0x206001F:
                +
00098d 9300 0623+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2120004:
00098f 940e 0b2f 	CALL __LOADLOCR6
000991 9628      	ADIW R28,8
000992 9508      	RET
                 ; .FEND
                 _glcd_outtext:
                 ; .FSTART _glcd_outtext
000993 93ba      	ST   -Y,R27
000994 93aa      	ST   -Y,R26
000995 931a      	ST   -Y,R17
                 _0x206002E:
000996 81a9      	LDD  R26,Y+1
000997 81ba      	LDD  R27,Y+1+1
000998 91ed      	LD   R30,X+
000999 83a9      	STD  Y+1,R26
00099a 83ba      	STD  Y+1+1,R27
00099b 2f1e      	MOV  R17,R30
00099c 30e0      	CPI  R30,0
00099d f019      	BREQ _0x2060030
00099e 2fa1      	MOV  R26,R17
00099f df91      	RCALL _glcd_putchar
0009a0 cff5      	RJMP _0x206002E
                 _0x2060030:
0009a1 8118      	LDD  R17,Y+0
0009a2 c05c      	RJMP _0x2120002
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
0009a3 93aa      	ST   -Y,R26
0009a4 81a9      	LDD  R26,Y+1
0009a5 27bb      	CLR  R27
0009a6 dee5      	RCALL _glcd_clipx
                +
0009a7 93e0 0623+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
0009a9 81a8      	LD   R26,Y
0009aa 27bb      	CLR  R27
0009ab def2      	RCALL _glcd_clipy
                +
0009ac 93e0 0624+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
0009ae c009      	RJMP _0x2120003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
0009af 93aa      	ST   -Y,R26
0009b0 81e8      	LD   R30,Y
0009b1 e0f0      	LDI  R31,0
0009b2 59e0      	SUBI R30,LOW(-__glcd_mask*2)
0009b3 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
0009b4 91a4      	LPM  R26,Z
0009b5 81e9      	LDD  R30,Y+1
0009b6 940e 0aeb 	CALL __LSLB12
                 _0x2120003:
0009b8 9622      	ADIW R28,2
0009b9 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
0009ba 93aa      	ST   -Y,R26
0009bb 931a      	ST   -Y,R17
0009bc 81e9      	LDD  R30,Y+1
0009bd 30e7      	CPI  R30,LOW(0x7)
0009be f011      	BREQ _0x2100007
0009bf 30ea      	CPI  R30,LOW(0xA)
0009c0 f419      	BRNE _0x2100008
                 _0x2100007:
0009c1 9110 0621 	LDS  R17,_glcd_state
0009c3 c009      	RJMP _0x2100009
                 _0x2100008:
0009c4 30e9      	CPI  R30,LOW(0x9)
0009c5 f419      	BRNE _0x210000B
                +
0009c6 9110 0622+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
0009c8 c004      	RJMP _0x2100009
                 _0x210000B:
0009c9 30e8      	CPI  R30,LOW(0x8)
0009ca f4a1      	BRNE _0x2100005
                +
0009cb 9110 0631+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2100009:
                +
0009cd 91e0 0622+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
0009cf 30e0      	CPI  R30,0
0009d0 f049      	BREQ _0x210000E
0009d1 3010      	CPI  R17,0
0009d2 f019      	BREQ _0x210000F
0009d3 efef      	LDI  R30,LOW(255)
0009d4 8118      	LDD  R17,Y+0
0009d5 c029      	RJMP _0x2120002
                 _0x210000F:
0009d6 81ea      	LDD  R30,Y+2
0009d7 95e0      	COM  R30
0009d8 8118      	LDD  R17,Y+0
0009d9 c025      	RJMP _0x2120002
                 _0x210000E:
0009da 3010      	CPI  R17,0
0009db f419      	BRNE _0x2100011
0009dc e0e0      	LDI  R30,LOW(0)
0009dd 8118      	LDD  R17,Y+0
0009de c020      	RJMP _0x2120002
                 _0x2100011:
                 _0x2100005:
0009df 81ea      	LDD  R30,Y+2
0009e0 8118      	LDD  R17,Y+0
0009e1 c01d      	RJMP _0x2120002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
0009e2 93ba      	ST   -Y,R27
0009e3 93aa      	ST   -Y,R26
0009e4 81ea      	LDD  R30,Y+2
0009e5 30e1      	CPI  R30,LOW(0x1)
0009e6 f421      	BRNE _0x2100015
0009e7 81e8      	LD   R30,Y
0009e8 81f9      	LDD  R31,Y+1
0009e9 91e4      	LPM  R30,Z
0009ea c014      	RJMP _0x2120002
                 _0x2100015:
0009eb 30e2      	CPI  R30,LOW(0x2)
0009ec f429      	BRNE _0x2100016
0009ed 81a8      	LD   R26,Y
0009ee 81b9      	LDD  R27,Y+1
0009ef 940e 0b07 	CALL __EEPROMRDB
0009f1 c00d      	RJMP _0x2120002
                 _0x2100016:
0009f2 30e3      	CPI  R30,LOW(0x3)
0009f3 f441      	BRNE _0x2100018
0009f4 81a8      	LD   R26,Y
0009f5 81b9      	LDD  R27,Y+1
                +
0009f6 91e0 063a+LDS R30 , _glcd_state + ( 25 )
0009f8 91f0 063b+LDS R31 , _glcd_state + ( 25 ) + 1
0009fa 9509     +ICALL
                 	__CALL1MN _glcd_state,25
0009fb c003      	RJMP _0x2120002
                 _0x2100018:
0009fc 81a8      	LD   R26,Y
0009fd 81b9      	LDD  R27,Y+1
0009fe 91ec      	LD   R30,X
                 _0x2120002:
0009ff 9623      	ADIW R28,3
000a00 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000a01 93aa      	ST   -Y,R26
000a02 81eb      	LDD  R30,Y+3
000a03 30e0      	CPI  R30,0
000a04 f429      	BRNE _0x210001C
000a05 81e8      	LD   R30,Y
000a06 81a9      	LDD  R26,Y+1
000a07 81ba      	LDD  R27,Y+1+1
000a08 93ec      	ST   X,R30
000a09 c014      	RJMP _0x210001B
                 _0x210001C:
000a0a 30e2      	CPI  R30,LOW(0x2)
000a0b f431      	BRNE _0x210001D
000a0c 81e8      	LD   R30,Y
000a0d 81a9      	LDD  R26,Y+1
000a0e 81ba      	LDD  R27,Y+1+1
000a0f 940e 0b13 	CALL __EEPROMWRB
000a11 c00c      	RJMP _0x210001B
                 _0x210001D:
000a12 30e3      	CPI  R30,LOW(0x3)
000a13 f451      	BRNE _0x210001B
000a14 81e9      	LDD  R30,Y+1
000a15 81fa      	LDD  R31,Y+1+1
000a16 93fa      	ST   -Y,R31
000a17 93ea      	ST   -Y,R30
000a18 81aa      	LDD  R26,Y+2
                +
000a19 91e0 063c+LDS R30 , _glcd_state + ( 27 )
000a1b 91f0 063d+LDS R31 , _glcd_state + ( 27 ) + 1
000a1d 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x210001B:
                 _0x2120001:
000a1e 9624      	ADIW R28,4
000a1f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _glcd_state:
000621           	.BYTE 0x1D
                 _rx_buffer0:
00063e           	.BYTE 0x40
                 _buff:
00067e           	.BYTE 0x104
                 _tx_buffer0:
000782           	.BYTE 0x40
                 _tx_rd_index0:
0007c2           	.BYTE 0x1
                 _tx_counter0:
0007c3           	.BYTE 0x1
                 __seed_G101:
0007c4           	.BYTE 0x4
                 _gfx_addr_G102:
0007c8           	.BYTE 0x2
                 _gfx_buffer_G102:
0007ca           	.BYTE 0x1F8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000a20 940e 0ae1 	CALL _delay_ms
000a22 940e 064b 	CALL _glcd_clear
000a24 e0e0      	LDI  R30,LOW(0)
000a25 93ea      	ST   -Y,R30
000a26 e0a0      	LDI  R26,LOW(0)
000a27 940c 09a3 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000a29 1ba2      	SUB  R26,R18
000a2a 0bb3      	SBC  R27,R19
000a2b a5ee      	LDD  R30,Y+46
000a2c a5ff      	LDD  R31,Y+46+1
000a2d 17ea      	CP   R30,R26
000a2e 07fb      	CPC  R31,R27
000a2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000a30 e7ee      	LDI  R30,LOW(_buff)
000a31 e0f6      	LDI  R31,HIGH(_buff)
000a32 93fa      	ST   -Y,R31
000a33 93ea      	ST   -Y,R30
000a34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
                +
000a35 01de     +MOVW R26 , R28
000a36 5aaf     +SUBI R26 , LOW ( - 81 )
000a37 4fbf     +SBCI R27 , HIGH ( - 81 )
000a38 900d     +LD R0 , X +
000a39 91bc     +LD R27 , X
000a3a 2da0     +MOV R26 , R0
                 	__GETW2SX 81
000a3b 91ec      	LD   R30,X
000a3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000a3d 91ed      	LD   R30,X+
000a3e 91fd      	LD   R31,X+
000a3f 9631      	ADIW R30,1
000a40 93fe      	ST   -X,R31
000a41 93ee      	ST   -X,R30
000a42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000a43 940e 0309 	CALL _put_string
000a45 e2ac      	LDI  R26,LOW(300)
000a46 e0b1      	LDI  R27,HIGH(300)
000a47 940c 0ae1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000a49 93fa      	ST   -Y,R31
000a4a 93ea      	ST   -Y,R30
000a4b e0a2      	LDI  R26,LOW(2)
000a4c e0b0      	LDI  R27,0
000a4d 940e 0333 	CALL _wait_until
000a4f e0a0      	LDI  R26,LOW(0)
000a50 e0b0      	LDI  R27,0
000a51 940c 031e 	JMP  _refresh
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000a53 940e 064b 	CALL _glcd_clear
000a55 e0e0      	LDI  R30,LOW(0)
000a56 93ea      	ST   -Y,R30
000a57 e0a0      	LDI  R26,LOW(0)
000a58 940c 09a3 	JMP  _glcd_moveto
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000a5a 01fe      	MOVW R30,R28
000a5b 96bc      	ADIW R30,44
000a5c 93fa      	ST   -Y,R31
000a5d 93ea      	ST   -Y,R30
000a5e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000a5f 940e 0500 	CALL _strcat
000a61 cff8      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000a62 940e 0500 	CALL _strcat
000a64 ece8      	LDI  R30,LOW(200)
000a65 e0f0      	LDI  R31,HIGH(200)
000a66 93fa      	ST   -Y,R31
000a67 93ea      	ST   -Y,R30
000a68 01de      	MOVW R26,R28
000a69 965a      	ADIW R26,26
000a6a 940e 0534 	CALL _itoa
000a6c cfed      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000a6d 940e 0309 	CALL _put_string
000a6f eea8      	LDI  R26,LOW(1000)
000a70 e0b3      	LDI  R27,HIGH(1000)
000a71 940c 0ae1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000a73 eca8      	LDI  R26,LOW(_gfx_addr_G102)
000a74 e0b7      	LDI  R27,HIGH(_gfx_addr_G102)
000a75 cfc7      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000a76 0fea      	ADD  R30,R26
000a77 1ffb      	ADC  R31,R27
000a78 83ee      	STD  Y+6,R30
000a79 83ff      	STD  Y+6+1,R31
000a7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xE:
000a7b 85ec      	LDD  R30,Y+12
000a7c 93ea      	ST   -Y,R30
000a7d 81ef      	LDD  R30,Y+7
000a7e 85f8      	LDD  R31,Y+7+1
000a7f 9631      	ADIW R30,1
000a80 83ef      	STD  Y+7,R30
000a81 87f8      	STD  Y+7+1,R31
000a82 9731      	SBIW R30,1
000a83 93fa      	ST   -Y,R31
000a84 93ea      	ST   -Y,R30
000a85 e0a0      	LDI  R26,LOW(0)
000a86 940c 0a01 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000a88 930a      	ST   -Y,R16
000a89 89a8      	LDD  R26,Y+16
000a8a 940c 0585 	JMP  _pcd8544_setaddr_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x10:
000a8c 85ec      	LDD  R30,Y+12
000a8d 93ea      	ST   -Y,R30
000a8e 81ef      	LDD  R30,Y+7
000a8f 85f8      	LDD  R31,Y+7+1
000a90 9631      	ADIW R30,1
000a91 83ef      	STD  Y+7,R30
000a92 87f8      	STD  Y+7+1,R31
000a93 9731      	SBIW R30,1
000a94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000a95 2766      	CLR  R22
000a96 2777      	CLR  R23
000a97 01df      	MOVW R26,R30
000a98 01cb      	MOVW R24,R22
000a99 940c 09e2 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000a9b 935a      	ST   -Y,R21
000a9c 85aa      	LDD  R26,Y+10
000a9d 940c 09ba 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000a9f 930a      	ST   -Y,R16
000aa0 9503      	INC  R16
000aa1 89e8      	LDD  R30,Y+16
000aa2 93ea      	ST   -Y,R30
000aa3 935a      	ST   -Y,R21
000aa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
000aa5 2f5e      	MOV  R21,R30
000aa6 85ec      	LDD  R30,Y+12
000aa7 93ea      	ST   -Y,R30
000aa8 81af      	LDD  R26,Y+7
000aa9 85b8      	LDD  R27,Y+7+1
000aaa 2788      	CLR  R24
000aab 2799      	CLR  R25
000aac 940e 09e2 	CALL _glcd_readmem
000aae 2e1e      	MOV  R1,R30
000aaf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000ab0 930a      	ST   -Y,R16
000ab1 9503      	INC  R16
000ab2 89e8      	LDD  R30,Y+16
000ab3 93ea      	ST   -Y,R30
000ab4 85ee      	LDD  R30,Y+14
000ab5 93ea      	ST   -Y,R30
000ab6 85e9      	LDD  R30,Y+9
000ab7 85fa      	LDD  R31,Y+9+1
000ab8 9631      	ADIW R30,1
000ab9 87e9      	STD  Y+9,R30
000aba 87fa      	STD  Y+9+1,R31
000abb 9731      	SBIW R30,1
000abc cfd8      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000abd 93ba      	ST   -Y,R27
000abe 93aa      	ST   -Y,R26
000abf 81a8      	LD   R26,Y
000ac0 81b9      	LDD  R27,Y+1
000ac1 940e 0b24 	CALL __CPW02
000ac3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000ac4 940e 0b28 	CALL __SAVELOCR6
                +
000ac6 91e0 0625+LDS R30 , _glcd_state + ( 4 )
000ac8 91f0 0626+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000aca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000acb 01f8      	MOVW R30,R16
                +
000acc 5f0f     +SUBI R16 , LOW ( - 1 )
000acd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ace 9004      	LPM  R0,Z
000acf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
                +
000ad0 91e0 0625+LDS R30 , _glcd_state + ( 4 )
000ad2 91f0 0626+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000ad4 9631      	ADIW R30,1
000ad5 91e4      	LPM  R30,Z
000ad6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
000ad7 93ea      	ST   -Y,R30
000ad8 e0e0      	LDI  R30,LOW(0)
000ad9 93ea      	ST   -Y,R30
000ada e0e0      	LDI  R30,LOW(0)
000adb e0f0      	LDI  R31,HIGH(0)
000adc 93fa      	ST   -Y,R31
000add 93ea      	ST   -Y,R30
000ade e0a9      	LDI  R26,LOW(9)
000adf 940c 06a2 	JMP  _glcd_block
                 
                 
                 	.CSEG
                 _delay_ms:
000ae1 9610      	adiw r26,0
000ae2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000ae3 ed80     +LDI R24 , LOW ( 0x7D0 )
000ae4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000ae5 9701     +SBIW R24 , 1
000ae6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000ae7 95a8      	wdr
000ae8 9711      	sbiw r26,1
000ae9 f7c9      	brne __delay_ms0
                 __delay_ms1:
000aea 9508      	ret
                 
                 __LSLB12:
000aeb 23ee      	TST  R30
000aec 2e0e      	MOV  R0,R30
000aed 2fea      	MOV  R30,R26
000aee f019      	BREQ __LSLB12R
                 __LSLB12L:
000aef 0fee      	LSL  R30
000af0 940a      	DEC  R0
000af1 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000af2 9508      	RET
                 
                 __LSRB12:
000af3 23ee      	TST  R30
000af4 2e0e      	MOV  R0,R30
000af5 2fea      	MOV  R30,R26
000af6 f019      	BREQ __LSRB12R
                 __LSRB12L:
000af7 95e6      	LSR  R30
000af8 940a      	DEC  R0
000af9 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000afa 9508      	RET
                 
                 __MULW12U:
000afb 9ffa      	MUL  R31,R26
000afc 2df0      	MOV  R31,R0
000afd 9feb      	MUL  R30,R27
000afe 0df0      	ADD  R31,R0
000aff 9fea      	MUL  R30,R26
000b00 2de0      	MOV  R30,R0
000b01 0df1      	ADD  R31,R1
000b02 9508      	RET
                 
                 __GETW1P:
000b03 91ed      	LD   R30,X+
000b04 91fc      	LD   R31,X
000b05 9711      	SBIW R26,1
000b06 9508      	RET
                 
                 __EEPROMRDB:
000b07 99e1      	SBIC EECR,EEWE
000b08 cffe      	RJMP __EEPROMRDB
000b09 93ff      	PUSH R31
000b0a b7ff      	IN   R31,SREG
000b0b 94f8      	CLI
000b0c bbae      	OUT  EEARL,R26
000b0d bbbf      	OUT  EEARH,R27
000b0e 9ae0      	SBI  EECR,EERE
000b0f b3ed      	IN   R30,EEDR
000b10 bfff      	OUT  SREG,R31
000b11 91ff      	POP  R31
000b12 9508      	RET
                 
                 __EEPROMWRB:
000b13 9be1      	SBIS EECR,EEWE
000b14 c002      	RJMP __EEPROMWRB1
000b15 95a8      	WDR
000b16 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000b17 b79f      	IN   R25,SREG
000b18 94f8      	CLI
000b19 bbae      	OUT  EEARL,R26
000b1a bbbf      	OUT  EEARH,R27
000b1b 9ae0      	SBI  EECR,EERE
000b1c b38d      	IN   R24,EEDR
000b1d 17e8      	CP   R30,R24
000b1e f019      	BREQ __EEPROMWRB0
000b1f bbed      	OUT  EEDR,R30
000b20 9ae2      	SBI  EECR,EEMWE
000b21 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000b22 bf9f      	OUT  SREG,R25
000b23 9508      	RET
                 
                 __CPW02:
000b24 2400      	CLR  R0
000b25 160a      	CP   R0,R26
000b26 060b      	CPC  R0,R27
000b27 9508      	RET
                 
                 __SAVELOCR6:
000b28 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b29 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b2a 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b2b 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b2c 931a      	ST   -Y,R17
000b2d 930a      	ST   -Y,R16
000b2e 9508      	RET
                 
                 __LOADLOCR6:
000b2f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b30 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b31 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b32 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b33 8119      	LDD  R17,Y+1
000b34 8108      	LD   R16,Y
000b35 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000b36 0fac      	ADD  R26,R28
000b37 1fbd      	ADC  R27,R29
                 __INITLOC0:
000b38 9005      	LPM  R0,Z+
000b39 920d      	ST   X+,R0
000b3a 958a      	DEC  R24
000b3b f7e1      	BRNE __INITLOC0
000b3c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  31 r1 :   5 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   5 
r8 :   4 r9 :   1 r10:   4 r11:   2 r12:   6 r13:   1 r14:   0 r15:   0 
r16:  53 r17:  87 r18:  34 r19:  33 r20:  20 r21:  32 r22:  28 r23:   4 
r24:  28 r25:  11 r26: 337 r27: 123 r28:  46 r29:   2 r30: 727 r31: 157 
x  :  37 y  : 441 z  :  32 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  25 
adiw  :  54 and   :   8 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  38 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   4 brmi  :   0 brne  :  71 brpl  :   1 brsh  :  16 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 133 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   5 cln   :   0 
clr   :  32 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   9 
cp    :  27 cpc   :  10 cpi   :  70 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   9 inc   :   7 jmp   :  53 ld    :  73 ldd   : 204 
ldi   : 255 lds   :  35 lpm   :  24 lsl   :   2 lsr   :  15 mov   :  85 
movw  :  72 mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   5 ori   :   8 out   :  55 pop   :  11 push  :  11 rcall :  62 
ret   :  45 reti  :   2 rjmp  : 109 rol   :   0 ror   :   0 sbc   :   2 
sbci  :  21 sbi   :  15 sbic  :   2 sbis  :   1 sbiw  :  32 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 171 std   :  46 sts   :  53 sub   :   8 subi  :  46 
swap  :   0 tst   :   9 wdr   :   2 
Instructions used: 63 out of 117 (53.8%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00167a   4770    984   5754  131072   4.4%
[.dseg] 0x000100 0x0009c2      0   1218   1218    4096  29.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 15 warnings
