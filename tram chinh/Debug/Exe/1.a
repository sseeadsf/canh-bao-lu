;#include <delay.h>
;#include <string.h>
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;
;// Graphic Display functions
;#include <glcd.h>
;
;// Font used for displaying text
;// on the graphic display
;#include <font5x7.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 64
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;char buff[260];
;int i = 0, time_flow = 0, time_s = 0;
;
;void del_string(unsigned char *s) {
; 0000 0028 void del_string(unsigned char *s) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0029     while (*s) {
;PCODE: $0000000F VOL: 0
;	*s -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A         *s = '\0';
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B         s++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002C     }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002D }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void) {
; 0000 0033 interrupt [19] void usart0_rx_isr(void) {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0034     char status,data;
; 0000 0035     status=UCSR0A;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0036     data=UDR0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0037     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0038         rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0039 #if RX_BUFFER_SIZE0 == 256
; 0000 003A         // special case for receiver buffer size=256
; 0000 003B         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 003C #else
; 0000 003D         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003E         if (++rx_counter0 == RX_BUFFER_SIZE0) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003F             rx_counter0=0;
;PCODE: $00000039 VOL: 0
; 0000 0040             rx_buffer_overflow0=1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0041         }
; 0000 0042 #endif
; 0000 0043     }
;PCODE: $0000003D VOL: 0
; 0000 0044     buff[i] = data;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0045     i++;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0046 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void) {
; 0000 004C char getchar(void) {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004D     char data;
; 0000 004E     while (rx_counter0==0);
;PCODE: $0000004B VOL: 0
;	data -> R17
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004F     data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0050 #if RX_BUFFER_SIZE0 != 256
; 0000 0051     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0052 #endif
; 0000 0053 #asm("cli")
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
	cli
;PCODE: $0000005C VOL: 0
; 0000 0054     --rx_counter0;
;PCODE: $0000005D VOL: 0
; 0000 0055 #asm("sei")
;PCODE: $0000005E VOL: 0
	sei
;PCODE: $0000005F VOL: 0
; 0000 0056     return data;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0057 }
;PCODE: $00000063 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0=0,tx_rd_index0=0;
;#else
;unsigned int tx_wr_index0=0,tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;unsigned char tx_counter0=0;
;#else
;unsigned int tx_counter0=0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void) {
; 0000 006C interrupt [21] void usart0_tx_isr(void) {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 006D     if (tx_counter0) {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 006E         --tx_counter0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006F         UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0070 #if TX_BUFFER_SIZE0 != 256
; 0000 0071         if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0072 #endif
; 0000 0073     }
;PCODE: $00000079 VOL: 0
; 0000 0074 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0000 0076 interrupt [17] void timer0_ovf_isr(void) {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0077 	//0.02 ms => 50k = 1s.
; 0000 0078 	TCNT0=0x60;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0079 	// Place your code here
; 0000 007A     time_flow++;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007B 
; 0000 007C     if (time_flow == 50000) {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007D         time_s++;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007E         time_flow = 0;
;PCODE: $0000008B VOL: 0
; 0000 007F     }
; 0000 0080 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c) {
; 0000 0086 void putchar(char c) {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0087     while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000092 VOL: 0
;	c -> Y+0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0088 #asm("cli")
;PCODE: $00000099 VOL: 0
	cli
;PCODE: $0000009A VOL: 0
; 0000 0089     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0)) {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 008A         tx_buffer0[tx_wr_index0++]=c;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 008B #if TX_BUFFER_SIZE0 != 256
; 0000 008C         if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008D #endif
; 0000 008E         ++tx_counter0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008F     } else
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0090         UDR0=c;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0091 #asm("sei")
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
	sei
;PCODE: $000000B7 VOL: 0
; 0000 0092 }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;PCODE: $000000BB VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $000000BC VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $000000BD VOL: 0
	.EQU __se_bit=0x20
;PCODE: $000000BE VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $000000BF VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $000000C0 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $000000C1 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $000000C2 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $000000C3 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $000000C4 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $000000C5 VOL: 0
	#endif
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;void put_string (unsigned char *s) {
; 0000 0099 void put_string (unsigned char *s) {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009A     while(*s) {
;PCODE: $000000CA VOL: 0
;	*s -> Y+0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009B         putchar(*s);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 009C 		delay_ms(50);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 009D         s++;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 009E     }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 009F }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
;void refresh(int time_ms) {
; 0000 00A1 void refresh(int time_ms) {
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00A2     int j;
; 0000 00A3 
; 0000 00A4 	delay_ms(time_ms);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;	time_ms -> Y+2
;	j -> R16,R17
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A5 
; 0000 00A6     glcd_clear();
;PCODE: $000000E5 VOL: 0
; 0000 00A7     glcd_moveto(0,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00A8 
; 0000 00A9     glcd_outtext(buff);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00AA 
; 0000 00AB     del_string(buff);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00AC 
; 0000 00AD     i = 0;
;PCODE: $000000EE VOL: 0
; 0000 00AE 
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;
;void wait_until(unsigned char *keyword, int time_out_s) {
; 0000 00B3 void wait_until(unsigned char *keyword, int time_out_s) {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B4 	/* 	deu biet cai temp2 de lam gi nhung khong co thi no khong chay trong 1 so truong hop @@
; 0000 00B5 		Vi du nhap vao "Hell" thi no se tach thua ra them 2 char. Co the do vi tri o nho. Cha biet @@*/
; 0000 00B6 	char temp[20], temp2[20];
; 0000 00B7 	int i = 0, time_start, time_temp;
; 0000 00B8 
; 0000 00B9 	del_string(temp);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;	*keyword -> Y+48
;	time_out_s -> Y+46
;	temp -> Y+26
;	temp2 -> Y+6
;	i -> R16,R17
;	time_start -> R18,R19
;	time_temp -> R20,R21
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00BA 
; 0000 00BB 	while (*keyword) {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00BC 		temp[i] = *keyword;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00BD 		temp2[i] = temp[i];
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00BE 		keyword++;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00BF 		i++;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00C0 	}
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C1 
; 0000 00C2 	time_start = time_s;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00C3 
; 0000 00C4 	while (1) {
;PCODE: $0000011E VOL: 0
; 0000 00C5 		if (time_s < time_start) {
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C6 			time_temp = time_s + 60;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C7 			if (time_temp - time_start > time_out_s) {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C8 				glcd_outtext("Timed out\r\n");
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00C9 				break;
;PCODE: $0000012D VOL: 0
; 0000 00CA 			}
; 0000 00CB 		} else {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CC 			if (time_s - time_start > time_out_s) {
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00CD 				glcd_outtext("Timed out\r\n");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00CE 				break;
;PCODE: $00000139 VOL: 0
; 0000 00CF 			}
; 0000 00D0 		}
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D1 
; 0000 00D2 		if ((strstr(buff, temp)) || (strstr(buff, temp2))) {
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D3 			break;
;PCODE: $0000014A VOL: 0
; 0000 00D4 		}
; 0000 00D5 		if (strstr(buff, "ERROR")) {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00D6 			glcd_outtext("Error found, attempting to continue..\r\n");
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00D7 			delay_ms(3000);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00D8 			glcd_clear();
;PCODE: $00000158 VOL: 0
; 0000 00D9 			glcd_moveto(0,0);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00DA 			break;
;PCODE: $0000015D VOL: 0
; 0000 00DB 			//nen lam them ve cai nay nua
; 0000 00DC 		}
; 0000 00DD 	}
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00DE }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0

	.DSEG
_0x23:
	.BYTE 0x46
;
;void read_and_send(unsigned char *s){
; 0000 00E0 void read_and_send(unsigned char *s){

	.CSEG
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00E1     // Thay nhung ham respones_read bang ham wait_until
; 0000 00E2     char api_key[20], cmd[] = "GET /update?key=", temp[20], temp2[20];
; 0000 00E3     int length = 0, i = 0;
; 0000 00E4 
; 0000 00E5 	while (*s) {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;	*s -> Y+81
;	api_key -> Y+61
;	cmd -> Y+44
;	temp -> Y+24
;	temp2 -> Y+4
;	length -> R16,R17
;	i -> R18,R19
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00E6         temp2[i] = *s;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E7 		api_key[i] = temp2[i];
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00E8         s++;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00E9         i++;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00EA     }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00EB 
; 0000 00EC 
; 0000 00ED     // glcd_clear();
; 0000 00EE 	// glcd_moveto(0,0);
; 0000 00EF 	// glcd_outtext("Wifi connected");
; 0000 00F0 
; 0000 00F1 	put_string("AT+CIPMUX=1");
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00F2 	delay_ms(300);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00F3 	put_string("\r\n");
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00F4     wait_until("OK", 2);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00F5     refresh(0);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00F6 
; 0000 00F7     put_string("AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80");
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00F8 	delay_ms(300);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00F9 	put_string("\r\n");
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00FA     wait_until("OK", 20);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00FB 	refresh(2000);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00FC 
; 0000 00FD 	glcd_clear();
;PCODE: $000001B1 VOL: 0
; 0000 00FE 	glcd_moveto(0,0);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00FF 	// glcd_outtext("Server connected");
; 0000 0100 
; 0000 0101     strcat(cmd, temp2);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0102     strcat(cmd, "&field1=");
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0103 
; 0000 0104     // itoa(station_receive.temp, cmd);
; 0000 0105 
; 0000 0106     itoa(200, temp);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0107 	strcat(cmd, temp);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0108 
; 0000 0109     strcat(cmd, "&field2=");
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 010A     // itoa(station_receive.humi, cmd);
; 0000 010B     itoa(200, temp);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 010C 	strcat(cmd, temp);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 010D 
; 0000 010E     strcat(cmd, "&field3=");
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 010F     // itoa(station_receive.water, cmd);
; 0000 0110     itoa(200, temp);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0111 	strcat(cmd, temp);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0112 
; 0000 0113 
; 0000 0114 	// glcd_outtext(cmd);
; 0000 0115 
; 0000 0116 	length = strlen(cmd);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0117 	length += 2;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0118 
; 0000 0119 	itoa(length, temp);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 011A 
; 0000 011B 	// for (i = 0; i < 260; i++) {
; 0000 011C 		// buff[i] = '\0';
; 0000 011D 	// }
; 0000 011E 	// i = 0;
; 0000 011F 
; 0000 0120 	del_string(buff);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0121 
; 0000 0122     put_string("AT+CIPSEND=0,");
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0123     put_string(temp);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0124 	delay_ms(1000);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0125     put_string("\r\n");
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0126 
; 0000 0127     wait_until("> ", 5);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0128 
; 0000 0129 	glcd_clear();
;PCODE: $000001FB VOL: 0
; 0000 012A 	glcd_moveto(0,0);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 012B 	glcd_outtext("Sending");
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 012C 
; 0000 012D     put_string(cmd);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 012E 	put_string("\r\n");
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 012F     delay_ms(1000);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0130     putchar(0x1A);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0131 
; 0000 0132 	refresh(0);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0133 
; 0000 0134 	glcd_outtext("Done");
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0135 
; 0000 0136     /*if(check_ok==1){
; 0000 0137         glcd_moveto(0,0);
; 0000 0138         glcd_outtext("done");
; 0000 0139     }
; 0000 013A 
; 0000 013B     delay_ms(1000); */
; 0000 013C }
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0

	.DSEG
_0x2E:
	.BYTE 0x83
;
;void main(void) {
; 0000 013E void main(void) {

	.CSEG
;PCODE: $00000216 VOL: 0
; 0000 013F 
; 0000 0140     char temp;
; 0000 0141 // Declare your local variables here
; 0000 0142 // Variable used to store graphic display
; 0000 0143 // controller initialization data
; 0000 0144     GLCDINIT_t glcd_init_data;
; 0000 0145 
; 0000 0146 // Input/Output Ports initialization
; 0000 0147 // Port A initialization
; 0000 0148 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0149     DDRA=(0<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000217 VOL: 0
;	temp -> R17
;	glcd_init_data -> Y+0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 014A // State: Bit7=T Bit6=1 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 014B     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 014C 
; 0000 014D // Port B initialization
; 0000 014E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 014F     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0150 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0151     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0152 
; 0000 0153 // Port C initialization
; 0000 0154 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0155     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0156 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0157     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0158 
; 0000 0159 // Port D initialization
; 0000 015A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 015B     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 015C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 015D     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 015E 
; 0000 015F // Port E initialization
; 0000 0160 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0161     DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0162 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0163     PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0164 
; 0000 0165 // Port F initialization
; 0000 0166 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0167     DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0168 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0169     PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 016A 
; 0000 016B // Port G initialization
; 0000 016C // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 016D     DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 016E // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 016F     PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0170 
; 0000 0171 // Timer/Counter 0 initialization
; 0000 0172 // Clock source: System Clock
; 0000 0173 // Clock value: 8000.000 kHz
; 0000 0174 // Mode: Normal top=0xFF
; 0000 0175 // OC0 output: Disconnected
; 0000 0176 // Timer Period: 0.02 ms
; 0000 0177 
; 0000 0178         ASSR=0<<AS0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0179         TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 017A         TCNT0=0x60;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 017B         OCR0=0x00;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 017C 
; 0000 017D // Timer/Counter 1 initialization
; 0000 017E // Clock source: System Clock
; 0000 017F // Clock value: Timer1 Stopped
; 0000 0180 // Mode: Normal top=0xFFFF
; 0000 0181 // OC1A output: Disconnected
; 0000 0182 // OC1B output: Disconnected
; 0000 0183 // OC1C output: Disconnected
; 0000 0184 // Noise Canceler: Off
; 0000 0185 // Input Capture on Falling Edge
; 0000 0186 // Timer1 Overflow Interrupt: Off
; 0000 0187 // Input Capture Interrupt: Off
; 0000 0188 // Compare A Match Interrupt: Off
; 0000 0189 // Compare B Match Interrupt: Off
; 0000 018A // Compare C Match Interrupt: Off
; 0000 018B     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 018C     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 018D     TCNT1H=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 018E     TCNT1L=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 018F     ICR1H=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0190     ICR1L=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0191     OCR1AH=0x00;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0192     OCR1AL=0x00;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0193     OCR1BH=0x00;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0194     OCR1BL=0x00;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0195     OCR1CH=0x00;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0196     OCR1CL=0x00;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0197 
; 0000 0198 // Timer/Counter 2 initialization
; 0000 0199 // Clock source: System Clock
; 0000 019A // Clock value: Timer2 Stopped
; 0000 019B // Mode: Normal top=0xFF
; 0000 019C // OC2 output: Disconnected
; 0000 019D     TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 019E     TCNT2=0x00;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 019F     OCR2=0x00;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 01A0 
; 0000 01A1 // Timer/Counter 3 initialization
; 0000 01A2 // Clock source: System Clock
; 0000 01A3 // Clock value: Timer3 Stopped
; 0000 01A4 // Mode: Normal top=0xFFFF
; 0000 01A5 // OC3A output: Disconnected
; 0000 01A6 // OC3B output: Disconnected
; 0000 01A7 // OC3C output: Disconnected
; 0000 01A8 // Noise Canceler: Off
; 0000 01A9 // Input Capture on Falling Edge
; 0000 01AA // Timer3 Overflow Interrupt: Off
; 0000 01AB // Input Capture Interrupt: Off
; 0000 01AC // Compare A Match Interrupt: Off
; 0000 01AD // Compare B Match Interrupt: Off
; 0000 01AE // Compare C Match Interrupt: Off
; 0000 01AF     TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01B0     TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01B1     TCNT3H=0x00;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01B2     TCNT3L=0x00;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01B3     ICR3H=0x00;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 01B4     ICR3L=0x00;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 01B5     OCR3AH=0x00;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01B6     OCR3AL=0x00;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 01B7     OCR3BH=0x00;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 01B8     OCR3BL=0x00;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01B9     OCR3CH=0x00;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 01BA     OCR3CL=0x00;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01BB 
; 0000 01BC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01BD     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 01BE     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01BF 
; 0000 01C0 // External Interrupt(s) initialization
; 0000 01C1 // INT0: Off
; 0000 01C2 // INT1: Off
; 0000 01C3 // INT2: Off
; 0000 01C4 // INT3: Off
; 0000 01C5 // INT4: Off
; 0000 01C6 // INT5: Off
; 0000 01C7 // INT6: Off
; 0000 01C8 // INT7: Off
; 0000 01C9     EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 01CA     EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01CB     EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01CC 
; 0000 01CD // USART0 initialization
; 0000 01CE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01CF // USART0 Receiver: On
; 0000 01D0 // USART0 Transmitter: On
; 0000 01D1 // USART0 Mode: Asynchronous
; 0000 01D2 // USART0 Baud Rate: 9600
; 0000 01D3     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01D4     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01D5     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 01D6     UBRR0H=0x00;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01D7     UBRR0L=0x33;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01D8 
; 0000 01D9 // USART1 initialization
; 0000 01DA // USART1 disabled
; 0000 01DB     UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 01DC 
; 0000 01DD // Analog Comparator initialization
; 0000 01DE // Analog Comparator: Off
; 0000 01DF // The Analog Comparator's positive input is
; 0000 01E0 // connected to the AIN0 pin
; 0000 01E1 // The Analog Comparator's negative input is
; 0000 01E2 // connected to the AIN1 pin
; 0000 01E3     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01E4     SFIOR=(0<<ACME);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 01E5 
; 0000 01E6 // ADC initialization
; 0000 01E7 // ADC disabled
; 0000 01E8     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01E9 
; 0000 01EA // SPI initialization
; 0000 01EB // SPI disabled
; 0000 01EC     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01ED 
; 0000 01EE // TWI initialization
; 0000 01EF // TWI disabled
; 0000 01F0     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01F1 
; 0000 01F2 // Graphic Display Controller initialization
; 0000 01F3 // The PCD8544 connections are specified in the
; 0000 01F4 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0000 01F5 // SDIN - PORTC Bit 7
; 0000 01F6 // SCLK - PORTA Bit 7
; 0000 01F7 // D /C - PORTC Bit 6
; 0000 01F8 // /SCE - PORTC Bit 5
; 0000 01F9 // /RES - PORTC Bit 4
; 0000 01FA 
; 0000 01FB // Specify the current font for displaying text
; 0000 01FC     glcd_init_data.font=font5x7;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01FD // No function is used for reading
; 0000 01FE // image data from external memory
; 0000 01FF     glcd_init_data.readxmem=NULL;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0200 // No function is used for writing
; 0000 0201 // image data to external memory
; 0000 0202     glcd_init_data.writexmem=NULL;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0203 // Set the LCD temperature coefficient
; 0000 0204     glcd_init_data.temp_coef=90;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0205 // Set the LCD bias
; 0000 0206     glcd_init_data.bias=3;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0207 // Set the LCD contrast control voltage VLCD
; 0000 0208     glcd_init_data.vlcd=55;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0209 
; 0000 020A     glcd_init(&glcd_init_data);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 020B 
; 0000 020C // Global enable interrupts
; 0000 020D #asm("sei")
;PCODE: $000002A6 VOL: 0
	sei
;PCODE: $000002A7 VOL: 0
; 0000 020E 
; 0000 020F     put_string("AT\r\n");
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0210     wait_until("OK", 2);
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0211     refresh(0);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0212 
; 0000 0213     put_string("AT+CWMODE=1\r\n");
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0214     wait_until("OK", 2);
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0215     refresh(0);
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0216 
; 0000 0217     put_string("AT+CWJAP=\"Thay_Thao_deo_giai\",\"chinhxac\"\r\n");
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0218     wait_until("OK", 10);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0219     refresh(0);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 021A 
; 0000 021B     read_and_send("7U0M5UTEKXE64ZK9");
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 021C 
; 0000 021D     while (1) {
;PCODE: $000002CF VOL: 0
; 0000 021E         temp = getchar();
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 021F         glcd_putchar(temp);
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0220     }
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0221 }
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0

	.DSEG
_0x2F:
	.BYTE 0x58
